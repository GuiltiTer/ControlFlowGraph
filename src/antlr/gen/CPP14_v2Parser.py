# Generated from C:/Users/babay/projects/Master/AdvancedCompiler/CFG/grammar\CPP14_v2.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,150,2517,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,1,0,3,0,402,8,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,3,1,414,8,1,1,2,1,2,3,2,418,8,2,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,429,8,3,1,4,1,4,3,4,433,8,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,448,8,5,1,5,1,
        5,1,5,1,5,1,5,3,5,455,8,5,1,5,1,5,1,5,5,5,460,8,5,10,5,12,5,463,
        9,5,1,6,1,6,3,6,467,8,6,1,6,1,6,1,7,1,7,3,7,473,8,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,483,8,8,1,9,1,9,3,9,487,8,9,1,10,1,10,1,
        10,3,10,492,8,10,1,10,1,10,1,10,1,10,3,10,498,8,10,5,10,500,8,10,
        10,10,12,10,503,9,10,1,11,1,11,3,11,507,8,11,1,12,1,12,1,12,1,12,
        3,12,513,8,12,1,13,1,13,1,13,1,13,1,13,3,13,520,8,13,1,14,1,14,1,
        14,1,14,3,14,526,8,14,1,14,3,14,529,8,14,1,14,3,14,532,8,14,1,14,
        3,14,535,8,14,1,15,1,15,1,15,1,15,1,15,3,15,542,8,15,1,15,1,15,1,
        15,1,15,1,15,3,15,549,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,601,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,616,8,15,1,15,1,15,1,15,1,
        15,3,15,622,8,15,1,15,1,15,1,15,1,15,3,15,628,8,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,641,8,15,10,15,12,15,
        644,9,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,3,19,653,8,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,668,
        8,19,1,19,1,19,1,19,1,19,3,19,674,8,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,704,8,20,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,714,8,21,1,22,3,22,
        717,8,22,1,22,1,22,3,22,721,8,22,1,22,1,22,3,22,725,8,22,1,22,3,
        22,728,8,22,1,22,1,22,3,22,732,8,22,1,22,1,22,1,22,1,22,3,22,738,
        8,22,3,22,740,8,22,1,23,1,23,1,23,1,23,1,24,1,24,3,24,748,8,24,1,
        25,1,25,3,25,752,8,25,1,25,3,25,755,8,25,1,26,1,26,1,26,1,26,1,26,
        3,26,762,8,26,1,26,1,26,1,26,1,26,1,26,3,26,769,8,26,5,26,771,8,
        26,10,26,12,26,774,9,26,1,27,1,27,3,27,778,8,27,1,27,1,27,3,27,782,
        8,27,1,28,3,28,785,8,28,1,28,1,28,1,28,3,28,790,8,28,1,28,1,28,1,
        28,1,28,3,28,796,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,809,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,5,31,820,8,31,10,31,12,31,823,9,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,837,8,32,10,32,12,32,
        840,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,851,8,
        33,10,33,12,33,854,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
        863,8,34,10,34,12,34,866,9,34,1,35,1,35,3,35,870,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        5,36,887,8,36,10,36,12,36,890,9,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,5,37,901,8,37,10,37,12,37,904,9,37,1,38,1,38,1,38,
        1,38,1,38,1,38,5,38,912,8,38,10,38,12,38,915,9,38,1,39,1,39,1,39,
        1,39,1,39,1,39,5,39,923,8,39,10,39,12,39,926,9,39,1,40,1,40,1,40,
        1,40,1,40,1,40,5,40,934,8,40,10,40,12,40,937,9,40,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,5,41,948,8,41,10,41,12,41,951,9,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,962,8,42,10,42,
        12,42,965,9,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,974,8,43,
        1,44,1,44,1,44,1,44,1,44,1,44,3,44,982,8,44,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,995,8,45,1,46,1,46,1,46,
        1,46,1,46,1,46,5,46,1003,8,46,10,46,12,46,1006,9,46,1,47,1,47,1,
        48,1,48,3,48,1012,8,48,1,48,1,48,3,48,1016,8,48,1,48,1,48,3,48,1020,
        8,48,1,48,1,48,3,48,1024,8,48,1,48,1,48,3,48,1028,8,48,1,48,1,48,
        1,48,3,48,1033,8,48,1,48,3,48,1036,8,48,1,49,3,49,1039,8,49,1,49,
        1,49,1,49,1,49,3,49,1045,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
        1053,8,49,1,49,1,49,1,49,3,49,1058,8,49,1,50,3,50,1061,8,50,1,50,
        1,50,1,51,1,51,3,51,1067,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
        5,52,1076,8,52,10,52,12,52,1079,9,52,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,3,53,1101,8,53,1,54,1,54,3,54,1105,8,54,1,54,1,54,1,54,1,
        54,1,54,1,54,3,54,1113,8,54,1,54,1,54,1,54,1,54,3,54,1119,8,54,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,3,55,1139,8,55,1,55,1,55,3,55,1143,8,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1156,8,
        55,1,56,1,56,3,56,1160,8,56,1,57,3,57,1163,8,57,1,57,1,57,1,57,1,
        58,1,58,3,58,1170,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1178,8,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1188,8,59,1,60,1,
        60,1,61,1,61,1,61,1,61,1,61,5,61,1197,8,61,10,61,12,61,1200,9,61,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1211,8,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1221,8,63,1,64,1,64,1,64,
        3,64,1226,8,64,1,64,1,64,1,64,1,64,1,65,3,65,1233,8,65,1,65,3,65,
        1236,8,65,1,65,1,65,1,65,3,65,1241,8,65,1,65,1,65,1,65,3,65,1246,
        8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,68,1,68,
        1,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1267,8,69,1,70,1,70,3,70,
        1271,8,70,1,70,1,70,1,70,3,70,1276,8,70,1,71,1,71,1,71,1,71,1,71,
        3,71,1283,8,71,1,72,1,72,1,72,3,72,1288,8,72,1,73,1,73,1,74,1,74,
        1,74,3,74,1295,8,74,1,75,1,75,1,75,1,75,3,75,1301,8,75,1,76,1,76,
        3,76,1305,8,76,1,76,1,76,1,76,3,76,1310,8,76,1,77,1,77,3,77,1314,
        8,77,1,77,1,77,1,77,3,77,1319,8,77,1,78,3,78,1322,8,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,3,78,1344,8,78,1,79,1,79,1,79,1,79,3,79,
        1350,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1361,
        8,80,1,81,1,81,3,81,1365,8,81,1,81,3,81,1368,8,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,3,81,1378,8,81,1,81,1,81,1,81,1,81,3,81,
        1384,8,81,1,81,3,81,1387,8,81,1,82,1,82,1,83,1,83,1,83,3,83,1394,
        8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1404,8,83,1,84,
        1,84,3,84,1408,8,84,1,84,3,84,1411,8,84,1,84,3,84,1414,8,84,1,84,
        1,84,3,84,1418,8,84,1,84,1,84,1,84,3,84,1423,8,84,3,84,1425,8,84,
        1,85,1,85,3,85,1429,8,85,1,85,1,85,3,85,1433,8,85,1,85,1,85,1,86,
        1,86,1,86,1,86,1,86,3,86,1442,8,86,1,87,1,87,1,87,1,88,1,88,1,88,
        1,88,1,88,1,88,5,88,1453,8,88,10,88,12,88,1456,9,88,1,89,1,89,1,
        89,1,89,1,89,3,89,1463,8,89,1,90,1,90,1,91,1,91,3,91,1469,8,91,1,
        92,1,92,1,93,1,93,3,93,1475,8,93,1,94,1,94,3,94,1479,8,94,1,95,3,
        95,1482,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,3,96,1491,8,96,1,
        96,1,96,1,96,1,96,1,96,1,96,1,97,3,97,1500,8,97,1,97,1,97,1,97,1,
        97,1,97,1,98,3,98,1508,8,98,1,99,1,99,1,100,1,100,1,100,1,100,1,
        100,1,100,1,101,3,101,1519,8,101,1,101,1,101,1,102,1,102,3,102,1525,
        8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
        1536,8,102,1,103,3,103,1539,8,103,1,103,1,103,1,103,3,103,1544,8,
        103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,105,
        1,105,1,105,1,105,3,105,1559,8,105,1,105,1,105,1,105,1,105,3,105,
        1565,8,105,1,106,1,106,1,106,1,106,1,106,5,106,1572,8,106,10,106,
        12,106,1575,9,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,
        1584,8,107,1,108,1,108,1,108,1,108,3,108,1590,8,108,1,108,1,108,
        1,108,1,108,1,108,1,108,3,108,1598,8,108,1,108,1,108,3,108,1602,
        8,108,1,109,1,109,3,109,1606,8,109,1,109,1,109,1,109,3,109,1611,
        8,109,1,109,1,109,1,109,3,109,1616,8,109,1,109,1,109,1,109,1,109,
        1,109,5,109,1623,8,109,10,109,12,109,1626,9,109,1,110,1,110,3,110,
        1630,8,110,1,111,1,111,3,111,1634,8,111,1,112,1,112,1,112,1,112,
        1,113,1,113,1,114,1,114,1,114,1,114,1,115,1,115,3,115,1648,8,115,
        1,115,1,115,5,115,1652,8,115,10,115,12,115,1655,9,115,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        4,116,1670,8,116,11,116,12,116,1671,3,116,1674,8,116,1,117,1,117,
        1,117,1,117,1,117,1,117,5,117,1682,8,117,10,117,12,117,1685,9,117,
        1,118,1,118,3,118,1689,8,118,1,119,1,119,1,119,1,119,1,119,3,119,
        1696,8,119,1,120,1,120,1,120,1,120,3,120,1702,8,120,1,121,1,121,
        1,121,3,121,1707,8,121,1,121,1,121,1,121,1,121,3,121,1713,8,121,
        1,121,1,121,1,121,1,121,1,121,3,121,1720,8,121,1,121,1,121,3,121,
        1724,8,121,5,121,1726,8,121,10,121,12,121,1729,9,121,1,122,1,122,
        1,122,1,122,3,122,1735,8,122,1,122,3,122,1738,8,122,1,122,3,122,
        1741,8,122,1,122,3,122,1744,8,122,1,123,1,123,1,123,3,123,1749,8,
        123,1,124,1,124,3,124,1753,8,124,1,124,3,124,1756,8,124,1,124,1,
        124,3,124,1760,8,124,1,124,1,124,3,124,1764,8,124,1,124,1,124,1,
        124,3,124,1769,8,124,1,124,3,124,1772,8,124,3,124,1774,8,124,1,125,
        1,125,3,125,1778,8,125,1,126,1,126,3,126,1782,8,126,1,127,1,127,
        3,127,1786,8,127,1,128,3,128,1789,8,128,1,128,1,128,1,129,1,129,
        3,129,1795,8,129,1,130,1,130,3,130,1799,8,130,1,130,1,130,1,130,
        1,130,3,130,1805,8,130,1,131,1,131,1,131,3,131,1810,8,131,3,131,
        1812,8,131,1,132,1,132,1,132,1,132,3,132,1818,8,132,1,132,1,132,
        3,132,1822,8,132,1,132,1,132,1,132,1,132,3,132,1828,8,132,1,132,
        1,132,1,132,1,132,1,132,3,132,1835,8,132,1,132,1,132,3,132,1839,
        8,132,5,132,1841,8,132,10,132,12,132,1844,9,132,1,133,1,133,1,133,
        1,133,3,133,1850,8,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,3,134,1860,8,134,1,134,1,134,3,134,1864,8,134,5,134,1866,8,
        134,10,134,12,134,1869,9,134,1,135,3,135,1872,8,135,1,135,3,135,
        1875,8,135,1,135,1,135,1,135,1,135,3,135,1881,8,135,1,136,1,136,
        1,136,1,136,1,136,1,136,5,136,1889,8,136,10,136,12,136,1892,9,136,
        1,137,3,137,1895,8,137,1,137,1,137,1,137,1,137,3,137,1901,8,137,
        1,137,1,137,1,137,1,137,1,137,1,137,3,137,1909,8,137,1,137,1,137,
        3,137,1913,8,137,1,137,3,137,1916,8,137,1,137,1,137,3,137,1920,8,
        137,1,137,1,137,1,137,3,137,1925,8,137,1,138,3,138,1928,8,138,1,
        138,3,138,1931,8,138,1,138,1,138,3,138,1935,8,138,1,138,1,138,1,
        139,3,139,1940,8,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,
        139,3,139,1950,8,139,1,140,1,140,1,140,1,140,1,140,3,140,1957,8,
        140,1,141,1,141,1,141,3,141,1962,8,141,1,142,1,142,3,142,1966,8,
        142,1,143,1,143,1,143,3,143,1971,8,143,1,143,1,143,1,143,1,143,3,
        143,1977,8,143,5,143,1979,8,143,10,143,12,143,1982,9,143,1,144,1,
        144,1,144,3,144,1987,8,144,1,144,1,144,1,144,1,144,3,144,1993,8,
        144,1,145,1,145,3,145,1997,8,145,1,146,1,146,1,146,3,146,2002,8,
        146,1,146,1,146,1,147,1,147,3,147,2008,8,147,1,147,1,147,3,147,2012,
        8,147,1,147,3,147,2015,8,147,1,147,1,147,3,147,2019,8,147,1,147,
        3,147,2022,8,147,3,147,2024,8,147,1,148,3,148,2027,8,148,1,148,1,
        148,1,149,1,149,1,150,1,150,1,150,3,150,2036,8,150,1,151,1,151,3,
        151,2040,8,151,1,151,1,151,1,151,3,151,2045,8,151,3,151,2047,8,151,
        1,152,3,152,2050,8,152,1,152,3,152,2053,8,152,1,152,3,152,2056,8,
        152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,2065,8,152,1,
        153,1,153,1,153,1,153,1,153,1,153,5,153,2073,8,153,10,153,12,153,
        2076,9,153,1,154,1,154,3,154,2080,8,154,1,154,3,154,2083,8,154,1,
        154,1,154,3,154,2087,8,154,1,154,3,154,2090,8,154,1,154,3,154,2093,
        8,154,1,154,1,154,3,154,2097,8,154,1,155,1,155,1,155,1,155,1,155,
        5,155,2104,8,155,10,155,12,155,2107,9,155,1,156,1,156,3,156,2111,
        8,156,1,157,1,157,1,157,1,158,1,158,1,158,1,159,1,159,1,159,3,159,
        2122,8,159,1,159,1,159,1,159,1,159,3,159,2128,8,159,5,159,2130,8,
        159,10,159,12,159,2133,9,159,1,160,3,160,2136,8,160,1,160,1,160,
        3,160,2140,8,160,1,160,1,160,3,160,2144,8,160,1,160,1,160,3,160,
        2148,8,160,1,160,1,160,3,160,2152,8,160,1,160,1,160,3,160,2156,8,
        160,1,161,3,161,2159,8,161,1,161,1,161,3,161,2163,8,161,1,162,1,
        162,1,163,1,163,1,163,3,163,2170,8,163,1,164,1,164,1,164,1,165,1,
        165,3,165,2177,8,165,1,166,1,166,3,166,2181,8,166,1,167,1,167,1,
        167,1,168,1,168,3,168,2188,8,168,1,168,1,168,3,168,2192,8,168,1,
        168,1,168,1,168,3,168,2197,8,168,1,169,1,169,1,169,3,169,2202,8,
        169,1,169,1,169,1,169,1,169,1,169,3,169,2209,8,169,1,170,1,170,3,
        170,2213,8,170,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,3,
        172,2223,8,172,1,173,1,173,1,173,1,173,1,173,1,173,1,174,1,174,1,
        174,1,174,1,174,1,174,5,174,2237,8,174,10,174,12,174,2240,9,174,
        1,175,1,175,3,175,2244,8,175,1,176,1,176,3,176,2248,8,176,1,176,
        3,176,2251,8,176,1,176,1,176,3,176,2255,8,176,1,176,1,176,1,176,
        1,176,3,176,2261,8,176,1,176,3,176,2264,8,176,1,176,1,176,3,176,
        2268,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        2278,8,176,1,176,3,176,2281,8,176,1,176,1,176,1,176,1,176,1,176,
        1,176,3,176,2289,8,176,1,176,1,176,1,176,3,176,2294,8,176,1,177,
        1,177,1,177,3,177,2299,8,177,1,177,1,177,1,178,1,178,1,178,1,178,
        3,178,2307,8,178,1,178,1,178,1,178,1,178,1,178,3,178,2314,8,178,
        1,178,1,178,3,178,2318,8,178,1,179,1,179,1,180,1,180,1,180,3,180,
        2325,8,180,1,180,1,180,1,180,1,180,3,180,2331,8,180,5,180,2333,8,
        180,10,180,12,180,2336,9,180,1,181,1,181,1,181,3,181,2341,8,181,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,2350,8,182,1,182,
        1,182,3,182,2354,8,182,1,183,3,183,2357,8,183,1,183,1,183,1,183,
        1,184,1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,186,1,186,
        3,186,2373,8,186,1,186,1,186,1,186,1,187,1,187,3,187,2380,8,187,
        1,188,1,188,1,188,1,188,1,188,1,188,1,189,3,189,2389,8,189,1,189,
        1,189,1,189,1,189,3,189,2395,8,189,1,189,1,189,3,189,2399,8,189,
        1,189,3,189,2402,8,189,1,190,1,190,3,190,2406,8,190,1,191,1,191,
        3,191,2410,8,191,1,192,1,192,1,192,3,192,2415,8,192,1,192,1,192,
        1,193,1,193,1,193,3,193,2422,8,193,1,193,1,193,1,193,1,193,3,193,
        2428,8,193,5,193,2430,8,193,10,193,12,193,2433,9,193,1,194,1,194,
        1,194,1,194,1,194,1,194,3,194,2441,8,194,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,3,195,2494,8,195,1,196,1,196,1,196,1,196,1,196,
        1,196,1,196,3,196,2503,8,196,1,197,1,197,3,197,2507,8,197,1,198,
        1,198,1,199,1,199,1,199,1,199,3,199,2515,8,199,1,199,0,34,10,20,
        30,52,62,64,66,68,72,74,76,78,80,82,84,92,104,122,176,212,218,230,
        234,242,264,268,272,286,306,310,318,348,360,386,200,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,0,1,1,0,84,89,2837,0,401,1,0,0,0,2,413,1,
        0,0,0,4,417,1,0,0,0,6,428,1,0,0,0,8,430,1,0,0,0,10,447,1,0,0,0,12,
        464,1,0,0,0,14,470,1,0,0,0,16,482,1,0,0,0,18,486,1,0,0,0,20,488,
        1,0,0,0,22,506,1,0,0,0,24,512,1,0,0,0,26,519,1,0,0,0,28,521,1,0,
        0,0,30,600,1,0,0,0,32,645,1,0,0,0,34,647,1,0,0,0,36,649,1,0,0,0,
        38,673,1,0,0,0,40,703,1,0,0,0,42,713,1,0,0,0,44,739,1,0,0,0,46,741,
        1,0,0,0,48,745,1,0,0,0,50,754,1,0,0,0,52,756,1,0,0,0,54,781,1,0,
        0,0,56,795,1,0,0,0,58,797,1,0,0,0,60,808,1,0,0,0,62,810,1,0,0,0,
        64,824,1,0,0,0,66,841,1,0,0,0,68,855,1,0,0,0,70,869,1,0,0,0,72,871,
        1,0,0,0,74,891,1,0,0,0,76,905,1,0,0,0,78,916,1,0,0,0,80,927,1,0,
        0,0,82,938,1,0,0,0,84,952,1,0,0,0,86,973,1,0,0,0,88,981,1,0,0,0,
        90,994,1,0,0,0,92,996,1,0,0,0,94,1007,1,0,0,0,96,1035,1,0,0,0,98,
        1057,1,0,0,0,100,1060,1,0,0,0,102,1064,1,0,0,0,104,1070,1,0,0,0,
        106,1100,1,0,0,0,108,1118,1,0,0,0,110,1155,1,0,0,0,112,1159,1,0,
        0,0,114,1162,1,0,0,0,116,1169,1,0,0,0,118,1187,1,0,0,0,120,1189,
        1,0,0,0,122,1191,1,0,0,0,124,1210,1,0,0,0,126,1220,1,0,0,0,128,1222,
        1,0,0,0,130,1245,1,0,0,0,132,1247,1,0,0,0,134,1255,1,0,0,0,136,1257,
        1,0,0,0,138,1266,1,0,0,0,140,1275,1,0,0,0,142,1282,1,0,0,0,144,1287,
        1,0,0,0,146,1289,1,0,0,0,148,1294,1,0,0,0,150,1300,1,0,0,0,152,1309,
        1,0,0,0,154,1318,1,0,0,0,156,1343,1,0,0,0,158,1349,1,0,0,0,160,1360,
        1,0,0,0,162,1386,1,0,0,0,164,1388,1,0,0,0,166,1403,1,0,0,0,168,1424,
        1,0,0,0,170,1426,1,0,0,0,172,1441,1,0,0,0,174,1443,1,0,0,0,176,1446,
        1,0,0,0,178,1462,1,0,0,0,180,1464,1,0,0,0,182,1468,1,0,0,0,184,1470,
        1,0,0,0,186,1474,1,0,0,0,188,1478,1,0,0,0,190,1481,1,0,0,0,192,1490,
        1,0,0,0,194,1499,1,0,0,0,196,1507,1,0,0,0,198,1509,1,0,0,0,200,1511,
        1,0,0,0,202,1518,1,0,0,0,204,1535,1,0,0,0,206,1538,1,0,0,0,208,1548,
        1,0,0,0,210,1564,1,0,0,0,212,1566,1,0,0,0,214,1583,1,0,0,0,216,1601,
        1,0,0,0,218,1610,1,0,0,0,220,1627,1,0,0,0,222,1633,1,0,0,0,224,1635,
        1,0,0,0,226,1639,1,0,0,0,228,1641,1,0,0,0,230,1645,1,0,0,0,232,1673,
        1,0,0,0,234,1675,1,0,0,0,236,1686,1,0,0,0,238,1695,1,0,0,0,240,1701,
        1,0,0,0,242,1712,1,0,0,0,244,1730,1,0,0,0,246,1745,1,0,0,0,248,1773,
        1,0,0,0,250,1775,1,0,0,0,252,1781,1,0,0,0,254,1785,1,0,0,0,256,1788,
        1,0,0,0,258,1792,1,0,0,0,260,1804,1,0,0,0,262,1811,1,0,0,0,264,1827,
        1,0,0,0,266,1849,1,0,0,0,268,1851,1,0,0,0,270,1880,1,0,0,0,272,1882,
        1,0,0,0,274,1924,1,0,0,0,276,1927,1,0,0,0,278,1949,1,0,0,0,280,1956,
        1,0,0,0,282,1961,1,0,0,0,284,1965,1,0,0,0,286,1967,1,0,0,0,288,1992,
        1,0,0,0,290,1996,1,0,0,0,292,1998,1,0,0,0,294,2023,1,0,0,0,296,2026,
        1,0,0,0,298,2030,1,0,0,0,300,2035,1,0,0,0,302,2046,1,0,0,0,304,2064,
        1,0,0,0,306,2066,1,0,0,0,308,2096,1,0,0,0,310,2098,1,0,0,0,312,2110,
        1,0,0,0,314,2112,1,0,0,0,316,2115,1,0,0,0,318,2118,1,0,0,0,320,2155,
        1,0,0,0,322,2162,1,0,0,0,324,2164,1,0,0,0,326,2169,1,0,0,0,328,2171,
        1,0,0,0,330,2174,1,0,0,0,332,2178,1,0,0,0,334,2182,1,0,0,0,336,2196,
        1,0,0,0,338,2208,1,0,0,0,340,2212,1,0,0,0,342,2214,1,0,0,0,344,2222,
        1,0,0,0,346,2224,1,0,0,0,348,2230,1,0,0,0,350,2243,1,0,0,0,352,2293,
        1,0,0,0,354,2295,1,0,0,0,356,2317,1,0,0,0,358,2319,1,0,0,0,360,2321,
        1,0,0,0,362,2340,1,0,0,0,364,2353,1,0,0,0,366,2356,1,0,0,0,368,2361,
        1,0,0,0,370,2366,1,0,0,0,372,2370,1,0,0,0,374,2377,1,0,0,0,376,2381,
        1,0,0,0,378,2401,1,0,0,0,380,2403,1,0,0,0,382,2409,1,0,0,0,384,2411,
        1,0,0,0,386,2418,1,0,0,0,388,2440,1,0,0,0,390,2493,1,0,0,0,392,2502,
        1,0,0,0,394,2506,1,0,0,0,396,2508,1,0,0,0,398,2514,1,0,0,0,400,402,
        3,122,61,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,
        5,0,0,1,404,1,1,0,0,0,405,414,3,392,196,0,406,414,5,68,0,0,407,408,
        5,84,0,0,408,409,3,92,46,0,409,410,5,85,0,0,410,414,1,0,0,0,411,
        414,3,4,2,0,412,414,3,12,6,0,413,405,1,0,0,0,413,406,1,0,0,0,413,
        407,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,3,1,0,0,0,415,418,
        3,6,3,0,416,418,3,8,4,0,417,415,1,0,0,0,417,416,1,0,0,0,418,5,1,
        0,0,0,419,429,5,133,0,0,420,429,3,342,171,0,421,429,3,328,164,0,
        422,429,3,344,172,0,423,424,5,98,0,0,424,429,3,290,145,0,425,426,
        5,98,0,0,426,429,3,160,80,0,427,429,3,356,178,0,428,419,1,0,0,0,
        428,420,1,0,0,0,428,421,1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,0,
        428,425,1,0,0,0,428,427,1,0,0,0,429,7,1,0,0,0,430,432,3,10,5,0,431,
        433,5,67,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,
        435,3,6,3,0,435,9,1,0,0,0,436,437,6,5,-1,0,437,448,5,128,0,0,438,
        439,3,158,79,0,439,440,5,128,0,0,440,448,1,0,0,0,441,442,3,182,91,
        0,442,443,5,128,0,0,443,448,1,0,0,0,444,445,3,160,80,0,445,446,5,
        128,0,0,446,448,1,0,0,0,447,436,1,0,0,0,447,438,1,0,0,0,447,441,
        1,0,0,0,447,444,1,0,0,0,448,461,1,0,0,0,449,450,10,2,0,0,450,451,
        5,133,0,0,451,460,5,128,0,0,452,454,10,1,0,0,453,455,5,67,0,0,454,
        453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,3,354,177,0,
        457,458,5,128,0,0,458,460,1,0,0,0,459,449,1,0,0,0,459,452,1,0,0,
        0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,11,1,0,0,0,
        463,461,1,0,0,0,464,466,3,14,7,0,465,467,3,28,14,0,466,465,1,0,0,
        0,466,467,1,0,0,0,467,468,1,0,0,0,468,469,3,102,51,0,469,13,1,0,
        0,0,470,472,5,86,0,0,471,473,3,16,8,0,472,471,1,0,0,0,472,473,1,
        0,0,0,473,474,1,0,0,0,474,475,5,87,0,0,475,15,1,0,0,0,476,483,3,
        18,9,0,477,483,3,20,10,0,478,479,3,18,9,0,479,480,5,123,0,0,480,
        481,3,20,10,0,481,483,1,0,0,0,482,476,1,0,0,0,482,477,1,0,0,0,482,
        478,1,0,0,0,483,17,1,0,0,0,484,487,5,96,0,0,485,487,5,100,0,0,486,
        484,1,0,0,0,486,485,1,0,0,0,487,19,1,0,0,0,488,489,6,10,-1,0,489,
        491,3,22,11,0,490,492,5,132,0,0,491,490,1,0,0,0,491,492,1,0,0,0,
        492,501,1,0,0,0,493,494,10,1,0,0,494,495,5,123,0,0,495,497,3,22,
        11,0,496,498,5,132,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,500,1,
        0,0,0,499,493,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,
        0,0,0,502,21,1,0,0,0,503,501,1,0,0,0,504,507,3,24,12,0,505,507,3,
        26,13,0,506,504,1,0,0,0,506,505,1,0,0,0,507,23,1,0,0,0,508,513,5,
        133,0,0,509,510,5,96,0,0,510,513,5,133,0,0,511,513,5,68,0,0,512,
        508,1,0,0,0,512,509,1,0,0,0,512,511,1,0,0,0,513,25,1,0,0,0,514,515,
        5,133,0,0,515,520,3,280,140,0,516,517,5,96,0,0,517,518,5,133,0,0,
        518,520,3,280,140,0,519,514,1,0,0,0,519,516,1,0,0,0,520,27,1,0,0,
        0,521,522,5,84,0,0,522,523,3,270,135,0,523,525,5,85,0,0,524,526,
        5,46,0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,529,
        3,382,191,0,528,527,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,
        532,3,212,106,0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,
        533,535,3,246,123,0,534,533,1,0,0,0,534,535,1,0,0,0,535,29,1,0,0,
        0,536,537,6,15,-1,0,537,601,3,2,1,0,538,539,3,156,78,0,539,541,5,
        84,0,0,540,542,3,36,18,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,
        1,0,0,0,543,544,5,85,0,0,544,601,1,0,0,0,545,546,3,364,182,0,546,
        548,5,84,0,0,547,549,3,36,18,0,548,547,1,0,0,0,548,549,1,0,0,0,549,
        550,1,0,0,0,550,551,5,85,0,0,551,601,1,0,0,0,552,553,3,156,78,0,
        553,554,3,288,144,0,554,601,1,0,0,0,555,556,3,364,182,0,556,557,
        3,288,144,0,557,601,1,0,0,0,558,559,5,30,0,0,559,560,5,101,0,0,560,
        561,3,258,129,0,561,562,5,102,0,0,562,563,5,84,0,0,563,564,3,92,
        46,0,564,565,5,85,0,0,565,601,1,0,0,0,566,567,5,64,0,0,567,568,5,
        101,0,0,568,569,3,258,129,0,569,570,5,102,0,0,570,571,5,84,0,0,571,
        572,3,92,46,0,572,573,5,85,0,0,573,601,1,0,0,0,574,575,5,57,0,0,
        575,576,5,101,0,0,576,577,3,258,129,0,577,578,5,102,0,0,578,579,
        5,84,0,0,579,580,3,92,46,0,580,581,5,85,0,0,581,601,1,0,0,0,582,
        583,5,23,0,0,583,584,5,101,0,0,584,585,3,258,129,0,585,586,5,102,
        0,0,586,587,5,84,0,0,587,588,3,92,46,0,588,589,5,85,0,0,589,601,
        1,0,0,0,590,591,3,34,17,0,591,592,5,84,0,0,592,593,3,92,46,0,593,
        594,5,85,0,0,594,601,1,0,0,0,595,596,3,34,17,0,596,597,5,84,0,0,
        597,598,3,258,129,0,598,599,5,85,0,0,599,601,1,0,0,0,600,536,1,0,
        0,0,600,538,1,0,0,0,600,545,1,0,0,0,600,552,1,0,0,0,600,555,1,0,
        0,0,600,558,1,0,0,0,600,566,1,0,0,0,600,574,1,0,0,0,600,582,1,0,
        0,0,600,590,1,0,0,0,600,595,1,0,0,0,601,642,1,0,0,0,602,603,10,19,
        0,0,603,604,5,86,0,0,604,605,3,92,46,0,605,606,5,87,0,0,606,641,
        1,0,0,0,607,608,10,18,0,0,608,609,5,86,0,0,609,610,3,288,144,0,610,
        611,5,87,0,0,611,641,1,0,0,0,612,613,10,17,0,0,613,615,5,84,0,0,
        614,616,3,36,18,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,
        0,617,641,5,85,0,0,618,619,10,12,0,0,619,621,5,130,0,0,620,622,5,
        67,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,641,3,
        4,2,0,624,625,10,11,0,0,625,627,5,125,0,0,626,628,5,67,0,0,627,626,
        1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,641,3,4,2,0,630,631,
        10,10,0,0,631,632,5,130,0,0,632,641,3,38,19,0,633,634,10,9,0,0,634,
        635,5,125,0,0,635,641,3,38,19,0,636,637,10,8,0,0,637,641,5,121,0,
        0,638,639,10,7,0,0,639,641,5,122,0,0,640,602,1,0,0,0,640,607,1,0,
        0,0,640,612,1,0,0,0,640,618,1,0,0,0,640,624,1,0,0,0,640,630,1,0,
        0,0,640,633,1,0,0,0,640,636,1,0,0,0,640,638,1,0,0,0,641,644,1,0,
        0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,31,1,0,0,0,644,642,1,0,0,
        0,645,646,5,74,0,0,646,33,1,0,0,0,647,648,5,74,0,0,648,35,1,0,0,
        0,649,650,3,286,143,0,650,37,1,0,0,0,651,653,3,10,5,0,652,651,1,
        0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,3,158,79,0,655,656,
        5,128,0,0,656,657,5,98,0,0,657,658,3,158,79,0,658,674,1,0,0,0,659,
        660,3,10,5,0,660,661,5,67,0,0,661,662,3,354,177,0,662,663,5,128,
        0,0,663,664,5,98,0,0,664,665,3,158,79,0,665,674,1,0,0,0,666,668,
        3,10,5,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,670,
        5,98,0,0,670,674,3,158,79,0,671,672,5,98,0,0,672,674,3,160,80,0,
        673,652,1,0,0,0,673,659,1,0,0,0,673,667,1,0,0,0,673,671,1,0,0,0,
        674,39,1,0,0,0,675,704,3,30,15,0,676,677,5,121,0,0,677,704,3,60,
        30,0,678,679,5,122,0,0,679,704,3,60,30,0,680,681,3,42,21,0,681,682,
        3,60,30,0,682,704,1,0,0,0,683,684,5,61,0,0,684,704,3,40,20,0,685,
        686,5,61,0,0,686,687,5,84,0,0,687,688,3,258,129,0,688,689,5,85,0,
        0,689,704,1,0,0,0,690,691,5,61,0,0,691,692,5,132,0,0,692,693,5,84,
        0,0,693,694,5,133,0,0,694,704,5,85,0,0,695,696,5,10,0,0,696,697,
        5,84,0,0,697,698,3,258,129,0,698,699,5,85,0,0,699,704,1,0,0,0,700,
        704,3,58,29,0,701,704,3,44,22,0,702,704,3,56,28,0,703,675,1,0,0,
        0,703,676,1,0,0,0,703,678,1,0,0,0,703,680,1,0,0,0,703,683,1,0,0,
        0,703,685,1,0,0,0,703,690,1,0,0,0,703,695,1,0,0,0,703,700,1,0,0,
        0,703,701,1,0,0,0,703,702,1,0,0,0,704,41,1,0,0,0,705,714,5,97,0,
        0,706,714,5,92,0,0,707,714,5,96,0,0,708,714,5,90,0,0,709,714,5,1,
        0,0,710,714,5,98,0,0,711,714,5,91,0,0,712,714,5,2,0,0,713,705,1,
        0,0,0,713,706,1,0,0,0,713,707,1,0,0,0,713,708,1,0,0,0,713,709,1,
        0,0,0,713,710,1,0,0,0,713,711,1,0,0,0,713,712,1,0,0,0,714,43,1,0,
        0,0,715,717,5,128,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,
        0,0,0,718,720,5,48,0,0,719,721,3,46,23,0,720,719,1,0,0,0,720,721,
        1,0,0,0,721,722,1,0,0,0,722,724,3,48,24,0,723,725,3,54,27,0,724,
        723,1,0,0,0,724,725,1,0,0,0,725,740,1,0,0,0,726,728,5,128,0,0,727,
        726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,731,5,48,0,0,730,
        732,3,46,23,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,
        734,5,84,0,0,734,735,3,258,129,0,735,737,5,85,0,0,736,738,3,54,27,
        0,737,736,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,716,1,0,0,
        0,739,727,1,0,0,0,740,45,1,0,0,0,741,742,5,84,0,0,742,743,3,36,18,
        0,743,744,5,85,0,0,744,47,1,0,0,0,745,747,3,152,76,0,746,748,3,50,
        25,0,747,746,1,0,0,0,747,748,1,0,0,0,748,49,1,0,0,0,749,751,3,248,
        124,0,750,752,3,50,25,0,751,750,1,0,0,0,751,752,1,0,0,0,752,755,
        1,0,0,0,753,755,3,52,26,0,754,749,1,0,0,0,754,753,1,0,0,0,755,51,
        1,0,0,0,756,757,6,26,-1,0,757,758,5,86,0,0,758,759,3,92,46,0,759,
        761,5,87,0,0,760,762,3,212,106,0,761,760,1,0,0,0,761,762,1,0,0,0,
        762,772,1,0,0,0,763,764,10,1,0,0,764,765,5,86,0,0,765,766,3,94,47,
        0,766,768,5,87,0,0,767,769,3,212,106,0,768,767,1,0,0,0,768,769,1,
        0,0,0,769,771,1,0,0,0,770,763,1,0,0,0,771,774,1,0,0,0,772,770,1,
        0,0,0,772,773,1,0,0,0,773,53,1,0,0,0,774,772,1,0,0,0,775,777,5,84,
        0,0,776,778,3,36,18,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,1,
        0,0,0,779,782,5,85,0,0,780,782,3,288,144,0,781,775,1,0,0,0,781,780,
        1,0,0,0,782,55,1,0,0,0,783,785,5,128,0,0,784,783,1,0,0,0,784,785,
        1,0,0,0,785,786,1,0,0,0,786,787,5,27,0,0,787,796,3,60,30,0,788,790,
        5,128,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,792,
        5,27,0,0,792,793,5,86,0,0,793,794,5,87,0,0,794,796,3,60,30,0,795,
        784,1,0,0,0,795,789,1,0,0,0,796,57,1,0,0,0,797,798,5,49,0,0,798,
        799,5,84,0,0,799,800,3,92,46,0,800,801,5,85,0,0,801,59,1,0,0,0,802,
        809,3,40,20,0,803,804,5,84,0,0,804,805,3,258,129,0,805,806,5,85,
        0,0,806,807,3,60,30,0,807,809,1,0,0,0,808,802,1,0,0,0,808,803,1,
        0,0,0,809,61,1,0,0,0,810,811,6,31,-1,0,811,812,3,60,30,0,812,821,
        1,0,0,0,813,814,10,2,0,0,814,815,5,131,0,0,815,820,3,60,30,0,816,
        817,10,1,0,0,817,818,5,124,0,0,818,820,3,60,30,0,819,813,1,0,0,0,
        819,816,1,0,0,0,820,823,1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,
        822,63,1,0,0,0,823,821,1,0,0,0,824,825,6,32,-1,0,825,826,3,62,31,
        0,826,838,1,0,0,0,827,828,10,3,0,0,828,829,5,92,0,0,829,837,3,62,
        31,0,830,831,10,2,0,0,831,832,5,93,0,0,832,837,3,62,31,0,833,834,
        10,1,0,0,834,835,5,94,0,0,835,837,3,62,31,0,836,827,1,0,0,0,836,
        830,1,0,0,0,836,833,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,
        839,1,0,0,0,839,65,1,0,0,0,840,838,1,0,0,0,841,842,6,33,-1,0,842,
        843,3,64,32,0,843,852,1,0,0,0,844,845,10,2,0,0,845,846,5,90,0,0,
        846,851,3,64,32,0,847,848,10,1,0,0,848,849,5,91,0,0,849,851,3,64,
        32,0,850,844,1,0,0,0,850,847,1,0,0,0,851,854,1,0,0,0,852,850,1,0,
        0,0,852,853,1,0,0,0,853,67,1,0,0,0,854,852,1,0,0,0,855,856,6,34,
        -1,0,856,857,3,66,33,0,857,864,1,0,0,0,858,859,10,1,0,0,859,860,
        3,70,35,0,860,861,3,66,33,0,861,863,1,0,0,0,862,858,1,0,0,0,863,
        866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,69,1,0,0,0,866,864,
        1,0,0,0,867,870,5,112,0,0,868,870,5,111,0,0,869,867,1,0,0,0,869,
        868,1,0,0,0,870,71,1,0,0,0,871,872,6,36,-1,0,872,873,3,68,34,0,873,
        888,1,0,0,0,874,875,10,4,0,0,875,876,5,101,0,0,876,887,3,68,34,0,
        877,878,10,3,0,0,878,879,5,102,0,0,879,887,3,68,34,0,880,881,10,
        2,0,0,881,882,5,117,0,0,882,887,3,68,34,0,883,884,10,1,0,0,884,885,
        5,118,0,0,885,887,3,68,34,0,886,874,1,0,0,0,886,877,1,0,0,0,886,
        880,1,0,0,0,886,883,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,
        889,1,0,0,0,889,73,1,0,0,0,890,888,1,0,0,0,891,892,6,37,-1,0,892,
        893,3,72,36,0,893,902,1,0,0,0,894,895,10,2,0,0,895,896,5,115,0,0,
        896,901,3,72,36,0,897,898,10,1,0,0,898,899,5,116,0,0,899,901,3,72,
        36,0,900,894,1,0,0,0,900,897,1,0,0,0,901,904,1,0,0,0,902,900,1,0,
        0,0,902,903,1,0,0,0,903,75,1,0,0,0,904,902,1,0,0,0,905,906,6,38,
        -1,0,906,907,3,74,37,0,907,913,1,0,0,0,908,909,10,1,0,0,909,910,
        5,96,0,0,910,912,3,74,37,0,911,908,1,0,0,0,912,915,1,0,0,0,913,911,
        1,0,0,0,913,914,1,0,0,0,914,77,1,0,0,0,915,913,1,0,0,0,916,917,6,
        39,-1,0,917,918,3,76,38,0,918,924,1,0,0,0,919,920,10,1,0,0,920,921,
        5,95,0,0,921,923,3,76,38,0,922,919,1,0,0,0,923,926,1,0,0,0,924,922,
        1,0,0,0,924,925,1,0,0,0,925,79,1,0,0,0,926,924,1,0,0,0,927,928,6,
        40,-1,0,928,929,3,78,39,0,929,935,1,0,0,0,930,931,10,1,0,0,931,932,
        5,97,0,0,932,934,3,78,39,0,933,930,1,0,0,0,934,937,1,0,0,0,935,933,
        1,0,0,0,935,936,1,0,0,0,936,81,1,0,0,0,937,935,1,0,0,0,938,939,6,
        41,-1,0,939,940,3,80,40,0,940,949,1,0,0,0,941,942,10,2,0,0,942,943,
        5,3,0,0,943,948,3,80,40,0,944,945,10,1,0,0,945,946,5,4,0,0,946,948,
        3,80,40,0,947,941,1,0,0,0,947,944,1,0,0,0,948,951,1,0,0,0,949,947,
        1,0,0,0,949,950,1,0,0,0,950,83,1,0,0,0,951,949,1,0,0,0,952,953,6,
        42,-1,0,953,954,3,82,41,0,954,963,1,0,0,0,955,956,10,2,0,0,956,957,
        5,5,0,0,957,962,3,82,41,0,958,959,10,1,0,0,959,960,5,6,0,0,960,962,
        3,82,41,0,961,955,1,0,0,0,961,958,1,0,0,0,962,965,1,0,0,0,963,961,
        1,0,0,0,963,964,1,0,0,0,964,85,1,0,0,0,965,963,1,0,0,0,966,974,3,
        84,42,0,967,968,3,84,42,0,968,969,5,126,0,0,969,970,3,92,46,0,970,
        971,5,127,0,0,971,972,3,88,44,0,972,974,1,0,0,0,973,966,1,0,0,0,
        973,967,1,0,0,0,974,87,1,0,0,0,975,982,3,86,43,0,976,977,3,84,42,
        0,977,978,3,90,45,0,978,979,3,284,142,0,979,982,1,0,0,0,980,982,
        3,380,190,0,981,975,1,0,0,0,981,976,1,0,0,0,981,980,1,0,0,0,982,
        89,1,0,0,0,983,995,5,100,0,0,984,995,5,105,0,0,985,995,5,106,0,0,
        986,995,5,107,0,0,987,995,5,103,0,0,988,995,5,104,0,0,989,995,5,
        114,0,0,990,995,5,113,0,0,991,995,5,109,0,0,992,995,5,108,0,0,993,
        995,5,110,0,0,994,983,1,0,0,0,994,984,1,0,0,0,994,985,1,0,0,0,994,
        986,1,0,0,0,994,987,1,0,0,0,994,988,1,0,0,0,994,989,1,0,0,0,994,
        990,1,0,0,0,994,991,1,0,0,0,994,992,1,0,0,0,994,993,1,0,0,0,995,
        91,1,0,0,0,996,997,6,46,-1,0,997,998,3,88,44,0,998,1004,1,0,0,0,
        999,1000,10,1,0,0,1000,1001,5,123,0,0,1001,1003,3,88,44,0,1002,999,
        1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,
        93,1,0,0,0,1006,1004,1,0,0,0,1007,1008,3,86,43,0,1008,95,1,0,0,0,
        1009,1036,3,98,49,0,1010,1012,3,212,106,0,1011,1010,1,0,0,0,1011,
        1012,1,0,0,0,1012,1013,1,0,0,0,1013,1036,3,100,50,0,1014,1016,3,
        212,106,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,
        1017,1036,3,102,51,0,1018,1020,3,212,106,0,1019,1018,1,0,0,0,1019,
        1020,1,0,0,0,1020,1021,1,0,0,0,1021,1036,3,106,53,0,1022,1024,3,
        212,106,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,
        1025,1036,3,110,55,0,1026,1028,3,212,106,0,1027,1026,1,0,0,0,1027,
        1028,1,0,0,0,1028,1029,1,0,0,0,1029,1036,3,118,59,0,1030,1036,3,
        120,60,0,1031,1033,3,212,106,0,1032,1031,1,0,0,0,1032,1033,1,0,0,
        0,1033,1034,1,0,0,0,1034,1036,3,370,185,0,1035,1009,1,0,0,0,1035,
        1011,1,0,0,0,1035,1015,1,0,0,0,1035,1019,1,0,0,0,1035,1023,1,0,0,
        0,1035,1027,1,0,0,0,1035,1030,1,0,0,0,1035,1032,1,0,0,0,1036,97,
        1,0,0,0,1037,1039,3,212,106,0,1038,1037,1,0,0,0,1038,1039,1,0,0,
        0,1039,1040,1,0,0,0,1040,1041,5,133,0,0,1041,1042,5,127,0,0,1042,
        1058,3,96,48,0,1043,1045,3,212,106,0,1044,1043,1,0,0,0,1044,1045,
        1,0,0,0,1045,1046,1,0,0,0,1046,1047,5,15,0,0,1047,1048,3,94,47,0,
        1048,1049,5,127,0,0,1049,1050,3,96,48,0,1050,1058,1,0,0,0,1051,1053,
        3,212,106,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,
        0,1054,1055,5,26,0,0,1055,1056,5,127,0,0,1056,1058,3,96,48,0,1057,
        1038,1,0,0,0,1057,1044,1,0,0,0,1057,1052,1,0,0,0,1058,99,1,0,0,0,
        1059,1061,3,92,46,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,
        1,0,0,0,1062,1063,5,129,0,0,1063,101,1,0,0,0,1064,1066,5,88,0,0,
        1065,1067,3,104,52,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,
        1,0,0,0,1068,1069,5,89,0,0,1069,103,1,0,0,0,1070,1071,6,52,-1,0,
        1071,1072,3,96,48,0,1072,1077,1,0,0,0,1073,1074,10,1,0,0,1074,1076,
        3,96,48,0,1075,1073,1,0,0,0,1076,1079,1,0,0,0,1077,1075,1,0,0,0,
        1077,1078,1,0,0,0,1078,105,1,0,0,0,1079,1077,1,0,0,0,1080,1081,5,
        42,0,0,1081,1082,5,84,0,0,1082,1083,3,108,54,0,1083,1084,5,85,0,
        0,1084,1085,3,96,48,0,1085,1101,1,0,0,0,1086,1087,5,42,0,0,1087,
        1088,5,84,0,0,1088,1089,3,108,54,0,1089,1090,5,85,0,0,1090,1091,
        3,96,48,0,1091,1092,5,31,0,0,1092,1093,3,96,48,0,1093,1101,1,0,0,
        0,1094,1095,5,66,0,0,1095,1096,5,84,0,0,1096,1097,3,108,54,0,1097,
        1098,5,85,0,0,1098,1099,3,96,48,0,1099,1101,1,0,0,0,1100,1080,1,
        0,0,0,1100,1086,1,0,0,0,1100,1094,1,0,0,0,1101,107,1,0,0,0,1102,
        1119,3,92,46,0,1103,1105,3,212,106,0,1104,1103,1,0,0,0,1104,1105,
        1,0,0,0,1105,1106,1,0,0,0,1106,1107,3,140,70,0,1107,1108,3,238,119,
        0,1108,1109,5,100,0,0,1109,1110,3,284,142,0,1110,1119,1,0,0,0,1111,
        1113,3,212,106,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,
        0,0,0,1114,1115,3,140,70,0,1115,1116,3,238,119,0,1116,1117,3,288,
        144,0,1117,1119,1,0,0,0,1118,1102,1,0,0,0,1118,1104,1,0,0,0,1118,
        1112,1,0,0,0,1119,109,1,0,0,0,1120,1121,5,83,0,0,1121,1122,5,84,
        0,0,1122,1123,3,108,54,0,1123,1124,5,85,0,0,1124,1125,3,96,48,0,
        1125,1156,1,0,0,0,1126,1127,5,28,0,0,1127,1128,3,96,48,0,1128,1129,
        5,83,0,0,1129,1130,5,84,0,0,1130,1131,3,92,46,0,1131,1132,5,85,0,
        0,1132,1133,5,129,0,0,1133,1156,1,0,0,0,1134,1135,5,39,0,0,1135,
        1136,5,84,0,0,1136,1138,3,112,56,0,1137,1139,3,108,54,0,1138,1137,
        1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,0,0,0,1140,1142,5,129,0,0,
        1141,1143,3,92,46,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,
        1,0,0,0,1144,1145,5,85,0,0,1145,1146,3,96,48,0,1146,1156,1,0,0,0,
        1147,1148,5,39,0,0,1148,1149,5,84,0,0,1149,1150,3,114,57,0,1150,
        1151,5,127,0,0,1151,1152,3,116,58,0,1152,1153,5,85,0,0,1153,1154,
        3,96,48,0,1154,1156,1,0,0,0,1155,1120,1,0,0,0,1155,1126,1,0,0,0,
        1155,1134,1,0,0,0,1155,1147,1,0,0,0,1156,111,1,0,0,0,1157,1160,3,
        100,50,0,1158,1160,3,130,65,0,1159,1157,1,0,0,0,1159,1158,1,0,0,
        0,1160,113,1,0,0,0,1161,1163,3,212,106,0,1162,1161,1,0,0,0,1162,
        1163,1,0,0,0,1163,1164,1,0,0,0,1164,1165,3,140,70,0,1165,1166,3,
        238,119,0,1166,115,1,0,0,0,1167,1170,3,92,46,0,1168,1170,3,288,144,
        0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,117,1,0,0,0,1171,1172,
        5,14,0,0,1172,1188,5,129,0,0,1173,1174,5,24,0,0,1174,1188,5,129,
        0,0,1175,1177,5,58,0,0,1176,1178,3,92,46,0,1177,1176,1,0,0,0,1177,
        1178,1,0,0,0,1178,1179,1,0,0,0,1179,1188,5,129,0,0,1180,1181,5,58,
        0,0,1181,1182,3,288,144,0,1182,1183,5,129,0,0,1183,1188,1,0,0,0,
        1184,1185,5,41,0,0,1185,1186,5,133,0,0,1186,1188,5,129,0,0,1187,
        1171,1,0,0,0,1187,1173,1,0,0,0,1187,1175,1,0,0,0,1187,1180,1,0,0,
        0,1187,1184,1,0,0,0,1188,119,1,0,0,0,1189,1190,3,126,63,0,1190,121,
        1,0,0,0,1191,1192,6,61,-1,0,1192,1193,3,124,62,0,1193,1198,1,0,0,
        0,1194,1195,10,1,0,0,1195,1197,3,124,62,0,1196,1194,1,0,0,0,1197,
        1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,123,1,0,0,
        0,1200,1198,1,0,0,0,1201,1211,3,126,63,0,1202,1211,3,276,138,0,1203,
        1211,3,346,173,0,1204,1211,3,366,183,0,1205,1211,3,368,184,0,1206,
        1211,3,210,105,0,1207,1211,3,186,93,0,1208,1211,3,134,67,0,1209,
        1211,3,136,68,0,1210,1201,1,0,0,0,1210,1202,1,0,0,0,1210,1203,1,
        0,0,0,1210,1204,1,0,0,0,1210,1205,1,0,0,0,1210,1206,1,0,0,0,1210,
        1207,1,0,0,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,125,1,0,0,
        0,1212,1221,3,130,65,0,1213,1221,3,208,104,0,1214,1221,3,200,100,
        0,1215,1221,3,204,102,0,1216,1221,3,206,103,0,1217,1221,3,132,66,
        0,1218,1221,3,128,64,0,1219,1221,3,170,85,0,1220,1212,1,0,0,0,1220,
        1213,1,0,0,0,1220,1214,1,0,0,0,1220,1215,1,0,0,0,1220,1216,1,0,0,
        0,1220,1217,1,0,0,0,1220,1218,1,0,0,0,1220,1219,1,0,0,0,1221,127,
        1,0,0,0,1222,1223,5,78,0,0,1223,1225,5,133,0,0,1224,1226,3,212,106,
        0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,1228,
        5,100,0,0,1228,1229,3,258,129,0,1229,1230,5,129,0,0,1230,129,1,0,
        0,0,1231,1233,3,140,70,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,
        1235,1,0,0,0,1234,1236,3,234,117,0,1235,1234,1,0,0,0,1235,1236,1,
        0,0,0,1236,1237,1,0,0,0,1237,1246,5,129,0,0,1238,1240,3,212,106,
        0,1239,1241,3,140,70,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,
        1242,1,0,0,0,1242,1243,3,234,117,0,1243,1244,5,129,0,0,1244,1246,
        1,0,0,0,1245,1232,1,0,0,0,1245,1238,1,0,0,0,1246,131,1,0,0,0,1247,
        1248,5,63,0,0,1248,1249,5,84,0,0,1249,1250,3,94,47,0,1250,1251,5,
        123,0,0,1251,1252,5,142,0,0,1252,1253,5,85,0,0,1253,1254,5,129,0,
        0,1254,133,1,0,0,0,1255,1256,5,129,0,0,1256,135,1,0,0,0,1257,1258,
        3,212,106,0,1258,1259,5,129,0,0,1259,137,1,0,0,0,1260,1267,3,142,
        71,0,1261,1267,3,148,74,0,1262,1267,3,144,72,0,1263,1267,5,40,0,
        0,1264,1267,5,73,0,0,1265,1267,5,22,0,0,1266,1260,1,0,0,0,1266,1261,
        1,0,0,0,1266,1262,1,0,0,0,1266,1263,1,0,0,0,1266,1264,1,0,0,0,1266,
        1265,1,0,0,0,1267,139,1,0,0,0,1268,1270,3,138,69,0,1269,1271,3,212,
        106,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1276,1,0,0,0,1272,
        1273,3,138,69,0,1273,1274,3,140,70,0,1274,1276,1,0,0,0,1275,1268,
        1,0,0,0,1275,1272,1,0,0,0,1276,141,1,0,0,0,1277,1283,5,56,0,0,1278,
        1283,5,62,0,0,1279,1283,5,69,0,0,1280,1283,5,35,0,0,1281,1283,5,
        46,0,0,1282,1277,1,0,0,0,1282,1278,1,0,0,0,1282,1279,1,0,0,0,1282,
        1280,1,0,0,0,1282,1281,1,0,0,0,1283,143,1,0,0,0,1284,1288,5,43,0,
        0,1285,1288,5,79,0,0,1286,1288,5,33,0,0,1287,1284,1,0,0,0,1287,1285,
        1,0,0,0,1287,1286,1,0,0,0,1288,145,1,0,0,0,1289,1290,5,133,0,0,1290,
        147,1,0,0,0,1291,1295,3,150,75,0,1292,1295,3,292,146,0,1293,1295,
        3,166,83,0,1294,1291,1,0,0,0,1294,1292,1,0,0,0,1294,1293,1,0,0,0,
        1295,149,1,0,0,0,1296,1301,3,156,78,0,1297,1301,3,162,81,0,1298,
        1301,3,364,182,0,1299,1301,3,252,126,0,1300,1296,1,0,0,0,1300,1297,
        1,0,0,0,1300,1298,1,0,0,0,1300,1299,1,0,0,0,1301,151,1,0,0,0,1302,
        1304,3,148,74,0,1303,1305,3,212,106,0,1304,1303,1,0,0,0,1304,1305,
        1,0,0,0,1305,1310,1,0,0,0,1306,1307,3,148,74,0,1307,1308,3,152,76,
        0,1308,1310,1,0,0,0,1309,1302,1,0,0,0,1309,1306,1,0,0,0,1310,153,
        1,0,0,0,1311,1313,3,150,75,0,1312,1314,3,212,106,0,1313,1312,1,0,
        0,0,1313,1314,1,0,0,0,1314,1319,1,0,0,0,1315,1316,3,150,75,0,1316,
        1317,3,154,77,0,1317,1319,1,0,0,0,1318,1311,1,0,0,0,1318,1315,1,
        0,0,0,1319,155,1,0,0,0,1320,1322,3,10,5,0,1321,1320,1,0,0,0,1321,
        1322,1,0,0,0,1322,1323,1,0,0,0,1323,1344,3,158,79,0,1324,1325,3,
        10,5,0,1325,1326,5,67,0,0,1326,1327,3,354,177,0,1327,1344,1,0,0,
        0,1328,1344,5,17,0,0,1329,1344,5,18,0,0,1330,1344,5,19,0,0,1331,
        1344,5,82,0,0,1332,1344,5,13,0,0,1333,1344,5,59,0,0,1334,1344,5,
        44,0,0,1335,1344,5,45,0,0,1336,1344,5,60,0,0,1337,1344,5,77,0,0,
        1338,1344,5,38,0,0,1339,1344,5,29,0,0,1340,1344,5,80,0,0,1341,1344,
        5,12,0,0,1342,1344,3,160,80,0,1343,1321,1,0,0,0,1343,1324,1,0,0,
        0,1343,1328,1,0,0,0,1343,1329,1,0,0,0,1343,1330,1,0,0,0,1343,1331,
        1,0,0,0,1343,1332,1,0,0,0,1343,1333,1,0,0,0,1343,1334,1,0,0,0,1343,
        1335,1,0,0,0,1343,1336,1,0,0,0,1343,1337,1,0,0,0,1343,1338,1,0,0,
        0,1343,1339,1,0,0,0,1343,1340,1,0,0,0,1343,1341,1,0,0,0,1343,1342,
        1,0,0,0,1344,157,1,0,0,0,1345,1350,3,290,145,0,1346,1350,3,164,82,
        0,1347,1350,3,146,73,0,1348,1350,3,354,177,0,1349,1345,1,0,0,0,1349,
        1346,1,0,0,0,1349,1347,1,0,0,0,1349,1348,1,0,0,0,1350,159,1,0,0,
        0,1351,1352,5,25,0,0,1352,1353,5,84,0,0,1353,1354,3,92,46,0,1354,
        1355,5,85,0,0,1355,1361,1,0,0,0,1356,1357,5,25,0,0,1357,1358,5,84,
        0,0,1358,1359,5,12,0,0,1359,1361,5,85,0,0,1360,1351,1,0,0,0,1360,
        1356,1,0,0,0,1361,161,1,0,0,0,1362,1364,3,300,150,0,1363,1365,3,
        212,106,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,1367,1,0,0,0,
        1366,1368,3,10,5,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,
        1,0,0,0,1369,1370,5,133,0,0,1370,1387,1,0,0,0,1371,1372,3,300,150,
        0,1372,1373,3,354,177,0,1373,1387,1,0,0,0,1374,1375,3,300,150,0,
        1375,1377,3,10,5,0,1376,1378,5,67,0,0,1377,1376,1,0,0,0,1377,1378,
        1,0,0,0,1378,1379,1,0,0,0,1379,1380,3,354,177,0,1380,1387,1,0,0,
        0,1381,1383,5,32,0,0,1382,1384,3,10,5,0,1383,1382,1,0,0,0,1383,1384,
        1,0,0,0,1384,1385,1,0,0,0,1385,1387,5,133,0,0,1386,1362,1,0,0,0,
        1386,1371,1,0,0,0,1386,1374,1,0,0,0,1386,1381,1,0,0,0,1387,163,1,
        0,0,0,1388,1389,5,133,0,0,1389,165,1,0,0,0,1390,1391,3,168,84,0,
        1391,1393,5,88,0,0,1392,1394,3,176,88,0,1393,1392,1,0,0,0,1393,1394,
        1,0,0,0,1394,1395,1,0,0,0,1395,1396,5,89,0,0,1396,1404,1,0,0,0,1397,
        1398,3,168,84,0,1398,1399,5,88,0,0,1399,1400,3,176,88,0,1400,1401,
        5,123,0,0,1401,1402,5,89,0,0,1402,1404,1,0,0,0,1403,1390,1,0,0,0,
        1403,1397,1,0,0,0,1404,167,1,0,0,0,1405,1407,3,172,86,0,1406,1408,
        3,212,106,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1410,1,0,0,
        0,1409,1411,5,133,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1413,
        1,0,0,0,1412,1414,3,174,87,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,
        1414,1425,1,0,0,0,1415,1417,3,172,86,0,1416,1418,3,212,106,0,1417,
        1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1420,3,10,
        5,0,1420,1422,5,133,0,0,1421,1423,3,174,87,0,1422,1421,1,0,0,0,1422,
        1423,1,0,0,0,1423,1425,1,0,0,0,1424,1405,1,0,0,0,1424,1415,1,0,0,
        0,1425,169,1,0,0,0,1426,1428,3,172,86,0,1427,1429,3,212,106,0,1428,
        1427,1,0,0,0,1428,1429,1,0,0,0,1429,1430,1,0,0,0,1430,1432,5,133,
        0,0,1431,1433,3,174,87,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,
        1434,1,0,0,0,1434,1435,5,129,0,0,1435,171,1,0,0,0,1436,1442,5,32,
        0,0,1437,1438,5,32,0,0,1438,1442,5,20,0,0,1439,1440,5,32,0,0,1440,
        1442,5,65,0,0,1441,1436,1,0,0,0,1441,1437,1,0,0,0,1441,1439,1,0,
        0,0,1442,173,1,0,0,0,1443,1444,5,127,0,0,1444,1445,3,152,76,0,1445,
        175,1,0,0,0,1446,1447,6,88,-1,0,1447,1448,3,178,89,0,1448,1454,1,
        0,0,0,1449,1450,10,1,0,0,1450,1451,5,123,0,0,1451,1453,3,178,89,
        0,1452,1449,1,0,0,0,1453,1456,1,0,0,0,1454,1452,1,0,0,0,1454,1455,
        1,0,0,0,1455,177,1,0,0,0,1456,1454,1,0,0,0,1457,1463,3,180,90,0,
        1458,1459,3,180,90,0,1459,1460,5,100,0,0,1460,1461,3,94,47,0,1461,
        1463,1,0,0,0,1462,1457,1,0,0,0,1462,1458,1,0,0,0,1463,179,1,0,0,
        0,1464,1465,5,133,0,0,1465,181,1,0,0,0,1466,1469,3,184,92,0,1467,
        1469,3,198,99,0,1468,1466,1,0,0,0,1468,1467,1,0,0,0,1469,183,1,0,
        0,0,1470,1471,5,133,0,0,1471,185,1,0,0,0,1472,1475,3,188,94,0,1473,
        1475,3,194,97,0,1474,1472,1,0,0,0,1474,1473,1,0,0,0,1475,187,1,0,
        0,0,1476,1479,3,190,95,0,1477,1479,3,192,96,0,1478,1476,1,0,0,0,
        1478,1477,1,0,0,0,1479,189,1,0,0,0,1480,1482,5,43,0,0,1481,1480,
        1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,5,47,0,0,1484,
        1485,5,133,0,0,1485,1486,5,88,0,0,1486,1487,3,196,98,0,1487,1488,
        5,89,0,0,1488,191,1,0,0,0,1489,1491,5,43,0,0,1490,1489,1,0,0,0,1490,
        1491,1,0,0,0,1491,1492,1,0,0,0,1492,1493,5,47,0,0,1493,1494,3,184,
        92,0,1494,1495,5,88,0,0,1495,1496,3,196,98,0,1496,1497,5,89,0,0,
        1497,193,1,0,0,0,1498,1500,5,43,0,0,1499,1498,1,0,0,0,1499,1500,
        1,0,0,0,1500,1501,1,0,0,0,1501,1502,5,47,0,0,1502,1503,5,88,0,0,
        1503,1504,3,196,98,0,1504,1505,5,89,0,0,1505,195,1,0,0,0,1506,1508,
        3,122,61,0,1507,1506,1,0,0,0,1507,1508,1,0,0,0,1508,197,1,0,0,0,
        1509,1510,5,133,0,0,1510,199,1,0,0,0,1511,1512,5,47,0,0,1512,1513,
        5,133,0,0,1513,1514,5,100,0,0,1514,1515,3,202,101,0,1515,1516,5,
        129,0,0,1516,201,1,0,0,0,1517,1519,3,10,5,0,1518,1517,1,0,0,0,1518,
        1519,1,0,0,0,1519,1520,1,0,0,0,1520,1521,3,182,91,0,1521,203,1,0,
        0,0,1522,1524,5,78,0,0,1523,1525,5,75,0,0,1524,1523,1,0,0,0,1524,
        1525,1,0,0,0,1525,1526,1,0,0,0,1526,1527,3,10,5,0,1527,1528,3,6,
        3,0,1528,1529,5,129,0,0,1529,1536,1,0,0,0,1530,1531,5,78,0,0,1531,
        1532,5,128,0,0,1532,1533,3,6,3,0,1533,1534,5,129,0,0,1534,1536,1,
        0,0,0,1535,1522,1,0,0,0,1535,1530,1,0,0,0,1536,205,1,0,0,0,1537,
        1539,3,212,106,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,1,
        0,0,0,1540,1541,5,78,0,0,1541,1543,5,47,0,0,1542,1544,3,10,5,0,1543,
        1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1546,3,182,
        91,0,1546,1547,5,129,0,0,1547,207,1,0,0,0,1548,1549,5,11,0,0,1549,
        1550,5,84,0,0,1550,1551,5,142,0,0,1551,1552,5,85,0,0,1552,1553,5,
        129,0,0,1553,209,1,0,0,0,1554,1555,5,35,0,0,1555,1556,5,142,0,0,
        1556,1558,5,88,0,0,1557,1559,3,122,61,0,1558,1557,1,0,0,0,1558,1559,
        1,0,0,0,1559,1560,1,0,0,0,1560,1565,5,89,0,0,1561,1562,5,35,0,0,
        1562,1563,5,142,0,0,1563,1565,3,124,62,0,1564,1554,1,0,0,0,1564,
        1561,1,0,0,0,1565,211,1,0,0,0,1566,1567,6,106,-1,0,1567,1568,3,214,
        107,0,1568,1573,1,0,0,0,1569,1570,10,1,0,0,1570,1572,3,214,107,0,
        1571,1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,
        1,0,0,0,1574,213,1,0,0,0,1575,1573,1,0,0,0,1576,1577,5,86,0,0,1577,
        1578,5,86,0,0,1578,1579,3,218,109,0,1579,1580,5,87,0,0,1580,1581,
        5,87,0,0,1581,1584,1,0,0,0,1582,1584,3,216,108,0,1583,1576,1,0,0,
        0,1583,1582,1,0,0,0,1584,215,1,0,0,0,1585,1586,5,9,0,0,1586,1587,
        5,84,0,0,1587,1589,3,258,129,0,1588,1590,5,132,0,0,1589,1588,1,0,
        0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1592,5,85,0,0,1592,
        1602,1,0,0,0,1593,1594,5,9,0,0,1594,1595,5,84,0,0,1595,1597,3,94,
        47,0,1596,1598,5,132,0,0,1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,
        1599,1,0,0,0,1599,1600,5,85,0,0,1600,1602,1,0,0,0,1601,1585,1,0,
        0,0,1601,1593,1,0,0,0,1602,217,1,0,0,0,1603,1605,6,109,-1,0,1604,
        1606,3,220,110,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1611,1,
        0,0,0,1607,1608,3,220,110,0,1608,1609,5,132,0,0,1609,1611,1,0,0,
        0,1610,1603,1,0,0,0,1610,1607,1,0,0,0,1611,1624,1,0,0,0,1612,1613,
        10,3,0,0,1613,1615,5,123,0,0,1614,1616,3,220,110,0,1615,1614,1,0,
        0,0,1615,1616,1,0,0,0,1616,1623,1,0,0,0,1617,1618,10,1,0,0,1618,
        1619,5,123,0,0,1619,1620,3,220,110,0,1620,1621,5,132,0,0,1621,1623,
        1,0,0,0,1622,1612,1,0,0,0,1622,1617,1,0,0,0,1623,1626,1,0,0,0,1624,
        1622,1,0,0,0,1624,1625,1,0,0,0,1625,219,1,0,0,0,1626,1624,1,0,0,
        0,1627,1629,3,222,111,0,1628,1630,3,228,114,0,1629,1628,1,0,0,0,
        1629,1630,1,0,0,0,1630,221,1,0,0,0,1631,1634,5,133,0,0,1632,1634,
        3,224,112,0,1633,1631,1,0,0,0,1633,1632,1,0,0,0,1634,223,1,0,0,0,
        1635,1636,3,226,113,0,1636,1637,5,128,0,0,1637,1638,5,133,0,0,1638,
        225,1,0,0,0,1639,1640,5,133,0,0,1640,227,1,0,0,0,1641,1642,5,84,
        0,0,1642,1643,3,230,115,0,1643,1644,5,85,0,0,1644,229,1,0,0,0,1645,
        1647,6,115,-1,0,1646,1648,3,232,116,0,1647,1646,1,0,0,0,1647,1648,
        1,0,0,0,1648,1653,1,0,0,0,1649,1650,10,1,0,0,1650,1652,3,232,116,
        0,1651,1649,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,
        1,0,0,0,1654,231,1,0,0,0,1655,1653,1,0,0,0,1656,1657,5,84,0,0,1657,
        1658,3,230,115,0,1658,1659,5,85,0,0,1659,1674,1,0,0,0,1660,1661,
        5,86,0,0,1661,1662,3,230,115,0,1662,1663,5,87,0,0,1663,1674,1,0,
        0,0,1664,1665,5,88,0,0,1665,1666,3,230,115,0,1666,1667,5,89,0,0,
        1667,1674,1,0,0,0,1668,1670,8,0,0,0,1669,1668,1,0,0,0,1670,1671,
        1,0,0,0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,
        1656,1,0,0,0,1673,1660,1,0,0,0,1673,1664,1,0,0,0,1673,1669,1,0,0,
        0,1674,233,1,0,0,0,1675,1676,6,117,-1,0,1676,1677,3,236,118,0,1677,
        1683,1,0,0,0,1678,1679,10,1,0,0,1679,1680,5,123,0,0,1680,1682,3,
        236,118,0,1681,1678,1,0,0,0,1682,1685,1,0,0,0,1683,1681,1,0,0,0,
        1683,1684,1,0,0,0,1684,235,1,0,0,0,1685,1683,1,0,0,0,1686,1688,3,
        238,119,0,1687,1689,3,280,140,0,1688,1687,1,0,0,0,1688,1689,1,0,
        0,0,1689,237,1,0,0,0,1690,1696,3,240,120,0,1691,1692,3,242,121,0,
        1692,1693,3,244,122,0,1693,1694,3,246,123,0,1694,1696,1,0,0,0,1695,
        1690,1,0,0,0,1695,1691,1,0,0,0,1696,239,1,0,0,0,1697,1702,3,242,
        121,0,1698,1699,3,248,124,0,1699,1700,3,240,120,0,1700,1702,1,0,
        0,0,1701,1697,1,0,0,0,1701,1698,1,0,0,0,1702,241,1,0,0,0,1703,1704,
        6,121,-1,0,1704,1706,3,256,128,0,1705,1707,3,212,106,0,1706,1705,
        1,0,0,0,1706,1707,1,0,0,0,1707,1713,1,0,0,0,1708,1709,5,84,0,0,1709,
        1710,3,240,120,0,1710,1711,5,85,0,0,1711,1713,1,0,0,0,1712,1703,
        1,0,0,0,1712,1708,1,0,0,0,1713,1727,1,0,0,0,1714,1715,10,3,0,0,1715,
        1726,3,244,122,0,1716,1717,10,2,0,0,1717,1719,5,86,0,0,1718,1720,
        3,94,47,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,0,
        1721,1723,5,87,0,0,1722,1724,3,212,106,0,1723,1722,1,0,0,0,1723,
        1724,1,0,0,0,1724,1726,1,0,0,0,1725,1714,1,0,0,0,1725,1716,1,0,0,
        0,1726,1729,1,0,0,0,1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,243,
        1,0,0,0,1729,1727,1,0,0,0,1730,1731,5,84,0,0,1731,1732,3,270,135,
        0,1732,1734,5,85,0,0,1733,1735,3,250,125,0,1734,1733,1,0,0,0,1734,
        1735,1,0,0,0,1735,1737,1,0,0,0,1736,1738,3,254,127,0,1737,1736,1,
        0,0,0,1737,1738,1,0,0,0,1738,1740,1,0,0,0,1739,1741,3,382,191,0,
        1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,1744,
        3,212,106,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,245,1,0,0,0,
        1745,1746,5,125,0,0,1746,1748,3,154,77,0,1747,1749,3,260,130,0,1748,
        1747,1,0,0,0,1748,1749,1,0,0,0,1749,247,1,0,0,0,1750,1752,5,92,0,
        0,1751,1753,3,212,106,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,
        1755,1,0,0,0,1754,1756,3,250,125,0,1755,1754,1,0,0,0,1755,1756,1,
        0,0,0,1756,1774,1,0,0,0,1757,1759,5,96,0,0,1758,1760,3,212,106,0,
        1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1774,1,0,0,0,1761,1763,
        5,3,0,0,1762,1764,3,212,106,0,1763,1762,1,0,0,0,1763,1764,1,0,0,
        0,1764,1774,1,0,0,0,1765,1766,3,10,5,0,1766,1768,5,92,0,0,1767,1769,
        3,212,106,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1771,1,0,0,
        0,1770,1772,3,250,125,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,
        1774,1,0,0,0,1773,1750,1,0,0,0,1773,1757,1,0,0,0,1773,1761,1,0,0,
        0,1773,1765,1,0,0,0,1774,249,1,0,0,0,1775,1777,3,252,126,0,1776,
        1778,3,250,125,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,251,1,
        0,0,0,1779,1782,5,21,0,0,1780,1782,5,81,0,0,1781,1779,1,0,0,0,1781,
        1780,1,0,0,0,1782,253,1,0,0,0,1783,1786,5,96,0,0,1784,1786,5,3,0,
        0,1785,1783,1,0,0,0,1785,1784,1,0,0,0,1786,255,1,0,0,0,1787,1789,
        5,132,0,0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,
        1790,1791,3,4,2,0,1791,257,1,0,0,0,1792,1794,3,152,76,0,1793,1795,
        3,260,130,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,259,1,0,0,0,
        1796,1805,3,262,131,0,1797,1799,3,264,132,0,1798,1797,1,0,0,0,1798,
        1799,1,0,0,0,1799,1800,1,0,0,0,1800,1801,3,244,122,0,1801,1802,3,
        246,123,0,1802,1805,1,0,0,0,1803,1805,3,266,133,0,1804,1796,1,0,
        0,0,1804,1798,1,0,0,0,1804,1803,1,0,0,0,1805,261,1,0,0,0,1806,1812,
        3,264,132,0,1807,1809,3,248,124,0,1808,1810,3,262,131,0,1809,1808,
        1,0,0,0,1809,1810,1,0,0,0,1810,1812,1,0,0,0,1811,1806,1,0,0,0,1811,
        1807,1,0,0,0,1812,263,1,0,0,0,1813,1814,6,132,-1,0,1814,1828,3,244,
        122,0,1815,1817,5,86,0,0,1816,1818,3,94,47,0,1817,1816,1,0,0,0,1817,
        1818,1,0,0,0,1818,1819,1,0,0,0,1819,1821,5,87,0,0,1820,1822,3,212,
        106,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1828,1,0,0,0,1823,
        1824,5,84,0,0,1824,1825,3,262,131,0,1825,1826,5,85,0,0,1826,1828,
        1,0,0,0,1827,1813,1,0,0,0,1827,1815,1,0,0,0,1827,1823,1,0,0,0,1828,
        1842,1,0,0,0,1829,1830,10,5,0,0,1830,1841,3,244,122,0,1831,1832,
        10,3,0,0,1832,1834,5,86,0,0,1833,1835,3,94,47,0,1834,1833,1,0,0,
        0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,1838,5,87,0,0,1837,1839,
        3,212,106,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,1841,1,0,0,
        0,1840,1829,1,0,0,0,1840,1831,1,0,0,0,1841,1844,1,0,0,0,1842,1840,
        1,0,0,0,1842,1843,1,0,0,0,1843,265,1,0,0,0,1844,1842,1,0,0,0,1845,
        1850,3,268,134,0,1846,1847,3,248,124,0,1847,1848,3,266,133,0,1848,
        1850,1,0,0,0,1849,1845,1,0,0,0,1849,1846,1,0,0,0,1850,267,1,0,0,
        0,1851,1852,6,134,-1,0,1852,1853,5,132,0,0,1853,1867,1,0,0,0,1854,
        1855,10,3,0,0,1855,1866,3,244,122,0,1856,1857,10,2,0,0,1857,1859,
        5,86,0,0,1858,1860,3,94,47,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,
        1860,1861,1,0,0,0,1861,1863,5,87,0,0,1862,1864,3,212,106,0,1863,
        1862,1,0,0,0,1863,1864,1,0,0,0,1864,1866,1,0,0,0,1865,1854,1,0,0,
        0,1865,1856,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,
        1,0,0,0,1868,269,1,0,0,0,1869,1867,1,0,0,0,1870,1872,3,272,136,0,
        1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,0,0,0,1873,1875,
        5,132,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1881,1,0,0,0,
        1876,1877,3,272,136,0,1877,1878,5,123,0,0,1878,1879,5,132,0,0,1879,
        1881,1,0,0,0,1880,1871,1,0,0,0,1880,1876,1,0,0,0,1881,271,1,0,0,
        0,1882,1883,6,136,-1,0,1883,1884,3,274,137,0,1884,1890,1,0,0,0,1885,
        1886,10,1,0,0,1886,1887,5,123,0,0,1887,1889,3,274,137,0,1888,1885,
        1,0,0,0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,1891,1,0,0,0,1891,
        273,1,0,0,0,1892,1890,1,0,0,0,1893,1895,3,212,106,0,1894,1893,1,
        0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1897,3,140,70,0,1897,
        1898,3,238,119,0,1898,1925,1,0,0,0,1899,1901,3,212,106,0,1900,1899,
        1,0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1903,3,140,70,0,
        1903,1904,3,238,119,0,1904,1905,5,100,0,0,1905,1906,3,284,142,0,
        1906,1925,1,0,0,0,1907,1909,3,212,106,0,1908,1907,1,0,0,0,1908,1909,
        1,0,0,0,1909,1910,1,0,0,0,1910,1912,3,140,70,0,1911,1913,3,260,130,
        0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1925,1,0,0,0,1914,1916,
        3,212,106,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,1917,1,0,0,
        0,1917,1919,3,140,70,0,1918,1920,3,260,130,0,1919,1918,1,0,0,0,1919,
        1920,1,0,0,0,1920,1921,1,0,0,0,1921,1922,5,100,0,0,1922,1923,3,284,
        142,0,1923,1925,1,0,0,0,1924,1894,1,0,0,0,1924,1900,1,0,0,0,1924,
        1908,1,0,0,0,1924,1915,1,0,0,0,1925,275,1,0,0,0,1926,1928,3,212,
        106,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,1930,1,0,0,0,1929,
        1931,3,140,70,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1932,1,
        0,0,0,1932,1934,3,238,119,0,1933,1935,3,310,155,0,1934,1933,1,0,
        0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,3,278,139,0,1937,
        277,1,0,0,0,1938,1940,3,334,167,0,1939,1938,1,0,0,0,1939,1940,1,
        0,0,0,1940,1941,1,0,0,0,1941,1950,3,102,51,0,1942,1950,3,372,186,
        0,1943,1944,5,100,0,0,1944,1945,5,26,0,0,1945,1950,5,129,0,0,1946,
        1947,5,100,0,0,1947,1948,5,27,0,0,1948,1950,5,129,0,0,1949,1939,
        1,0,0,0,1949,1942,1,0,0,0,1949,1943,1,0,0,0,1949,1946,1,0,0,0,1950,
        279,1,0,0,0,1951,1957,3,282,141,0,1952,1953,5,84,0,0,1953,1954,3,
        36,18,0,1954,1955,5,85,0,0,1955,1957,1,0,0,0,1956,1951,1,0,0,0,1956,
        1952,1,0,0,0,1957,281,1,0,0,0,1958,1959,5,100,0,0,1959,1962,3,284,
        142,0,1960,1962,3,288,144,0,1961,1958,1,0,0,0,1961,1960,1,0,0,0,
        1962,283,1,0,0,0,1963,1966,3,88,44,0,1964,1966,3,288,144,0,1965,
        1963,1,0,0,0,1965,1964,1,0,0,0,1966,285,1,0,0,0,1967,1968,6,143,
        -1,0,1968,1970,3,284,142,0,1969,1971,5,132,0,0,1970,1969,1,0,0,0,
        1970,1971,1,0,0,0,1971,1980,1,0,0,0,1972,1973,10,1,0,0,1973,1974,
        5,123,0,0,1974,1976,3,284,142,0,1975,1977,5,132,0,0,1976,1975,1,
        0,0,0,1976,1977,1,0,0,0,1977,1979,1,0,0,0,1978,1972,1,0,0,0,1979,
        1982,1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,287,1,0,0,
        0,1982,1980,1,0,0,0,1983,1984,5,88,0,0,1984,1986,3,286,143,0,1985,
        1987,5,123,0,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,
        0,0,1988,1989,5,89,0,0,1989,1993,1,0,0,0,1990,1991,5,88,0,0,1991,
        1993,5,89,0,0,1992,1983,1,0,0,0,1992,1990,1,0,0,0,1993,289,1,0,0,
        0,1994,1997,5,133,0,0,1995,1997,3,354,177,0,1996,1994,1,0,0,0,1996,
        1995,1,0,0,0,1997,291,1,0,0,0,1998,1999,3,294,147,0,1999,2001,5,
        88,0,0,2000,2002,3,302,151,0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,
        2002,2003,1,0,0,0,2003,2004,5,89,0,0,2004,293,1,0,0,0,2005,2007,
        3,300,150,0,2006,2008,3,212,106,0,2007,2006,1,0,0,0,2007,2008,1,
        0,0,0,2008,2009,1,0,0,0,2009,2011,3,296,148,0,2010,2012,3,298,149,
        0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,2014,1,0,0,0,2013,2015,
        3,316,158,0,2014,2013,1,0,0,0,2014,2015,1,0,0,0,2015,2024,1,0,0,
        0,2016,2018,3,300,150,0,2017,2019,3,212,106,0,2018,2017,1,0,0,0,
        2018,2019,1,0,0,0,2019,2021,1,0,0,0,2020,2022,3,316,158,0,2021,2020,
        1,0,0,0,2021,2022,1,0,0,0,2022,2024,1,0,0,0,2023,2005,1,0,0,0,2023,
        2016,1,0,0,0,2024,295,1,0,0,0,2025,2027,3,10,5,0,2026,2025,1,0,0,
        0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2029,3,290,145,0,2029,
        297,1,0,0,0,2030,2031,5,37,0,0,2031,299,1,0,0,0,2032,2036,5,20,0,
        0,2033,2036,5,65,0,0,2034,2036,5,76,0,0,2035,2032,1,0,0,0,2035,2033,
        1,0,0,0,2035,2034,1,0,0,0,2036,301,1,0,0,0,2037,2039,3,304,152,0,
        2038,2040,3,302,151,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,2047,
        1,0,0,0,2041,2042,3,326,163,0,2042,2044,5,127,0,0,2043,2045,3,302,
        151,0,2044,2043,1,0,0,0,2044,2045,1,0,0,0,2045,2047,1,0,0,0,2046,
        2037,1,0,0,0,2046,2041,1,0,0,0,2047,303,1,0,0,0,2048,2050,3,212,
        106,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,2052,1,0,0,0,2051,
        2053,3,140,70,0,2052,2051,1,0,0,0,2052,2053,1,0,0,0,2053,2055,1,
        0,0,0,2054,2056,3,306,153,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,
        2056,2057,1,0,0,0,2057,2065,5,129,0,0,2058,2065,3,276,138,0,2059,
        2065,3,204,102,0,2060,2065,3,132,66,0,2061,2065,3,346,173,0,2062,
        2065,3,128,64,0,2063,2065,3,134,67,0,2064,2049,1,0,0,0,2064,2058,
        1,0,0,0,2064,2059,1,0,0,0,2064,2060,1,0,0,0,2064,2061,1,0,0,0,2064,
        2062,1,0,0,0,2064,2063,1,0,0,0,2065,305,1,0,0,0,2066,2067,6,153,
        -1,0,2067,2068,3,308,154,0,2068,2074,1,0,0,0,2069,2070,10,1,0,0,
        2070,2071,5,123,0,0,2071,2073,3,308,154,0,2072,2069,1,0,0,0,2073,
        2076,1,0,0,0,2074,2072,1,0,0,0,2074,2075,1,0,0,0,2075,307,1,0,0,
        0,2076,2074,1,0,0,0,2077,2079,3,238,119,0,2078,2080,3,310,155,0,
        2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,2083,
        3,314,157,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2097,1,0,0,
        0,2084,2086,3,238,119,0,2085,2087,3,282,141,0,2086,2085,1,0,0,0,
        2086,2087,1,0,0,0,2087,2097,1,0,0,0,2088,2090,5,133,0,0,2089,2088,
        1,0,0,0,2089,2090,1,0,0,0,2090,2092,1,0,0,0,2091,2093,3,212,106,
        0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,0,0,2094,2095,
        5,127,0,0,2095,2097,3,94,47,0,2096,2077,1,0,0,0,2096,2084,1,0,0,
        0,2096,2089,1,0,0,0,2097,309,1,0,0,0,2098,2099,6,155,-1,0,2099,2100,
        3,312,156,0,2100,2105,1,0,0,0,2101,2102,10,1,0,0,2102,2104,3,312,
        156,0,2103,2101,1,0,0,0,2104,2107,1,0,0,0,2105,2103,1,0,0,0,2105,
        2106,1,0,0,0,2106,311,1,0,0,0,2107,2105,1,0,0,0,2108,2111,5,52,0,
        0,2109,2111,5,37,0,0,2110,2108,1,0,0,0,2110,2109,1,0,0,0,2111,313,
        1,0,0,0,2112,2113,5,100,0,0,2113,2114,5,136,0,0,2114,315,1,0,0,0,
        2115,2116,5,127,0,0,2116,2117,3,318,159,0,2117,317,1,0,0,0,2118,
        2119,6,159,-1,0,2119,2121,3,320,160,0,2120,2122,5,132,0,0,2121,2120,
        1,0,0,0,2121,2122,1,0,0,0,2122,2131,1,0,0,0,2123,2124,10,1,0,0,2124,
        2125,5,123,0,0,2125,2127,3,320,160,0,2126,2128,5,132,0,0,2127,2126,
        1,0,0,0,2127,2128,1,0,0,0,2128,2130,1,0,0,0,2129,2123,1,0,0,0,2130,
        2133,1,0,0,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,2132,319,1,0,0,
        0,2133,2131,1,0,0,0,2134,2136,3,212,106,0,2135,2134,1,0,0,0,2135,
        2136,1,0,0,0,2136,2137,1,0,0,0,2137,2156,3,324,162,0,2138,2140,3,
        212,106,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,0,
        2141,2143,5,79,0,0,2142,2144,3,326,163,0,2143,2142,1,0,0,0,2143,
        2144,1,0,0,0,2144,2145,1,0,0,0,2145,2156,3,324,162,0,2146,2148,3,
        212,106,0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,0,
        2149,2151,3,326,163,0,2150,2152,5,79,0,0,2151,2150,1,0,0,0,2151,
        2152,1,0,0,0,2152,2153,1,0,0,0,2153,2154,3,324,162,0,2154,2156,1,
        0,0,0,2155,2135,1,0,0,0,2155,2139,1,0,0,0,2155,2147,1,0,0,0,2156,
        321,1,0,0,0,2157,2159,3,10,5,0,2158,2157,1,0,0,0,2158,2159,1,0,0,
        0,2159,2160,1,0,0,0,2160,2163,3,290,145,0,2161,2163,3,160,80,0,2162,
        2158,1,0,0,0,2162,2161,1,0,0,0,2163,323,1,0,0,0,2164,2165,3,322,
        161,0,2165,325,1,0,0,0,2166,2170,5,53,0,0,2167,2170,5,54,0,0,2168,
        2170,5,55,0,0,2169,2166,1,0,0,0,2169,2167,1,0,0,0,2169,2168,1,0,
        0,0,2170,327,1,0,0,0,2171,2172,5,51,0,0,2172,2173,3,330,165,0,2173,
        329,1,0,0,0,2174,2176,3,152,76,0,2175,2177,3,332,166,0,2176,2175,
        1,0,0,0,2176,2177,1,0,0,0,2177,331,1,0,0,0,2178,2180,3,248,124,0,
        2179,2181,3,332,166,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,333,
        1,0,0,0,2182,2183,5,127,0,0,2183,2184,3,336,168,0,2184,335,1,0,0,
        0,2185,2187,3,338,169,0,2186,2188,5,132,0,0,2187,2186,1,0,0,0,2187,
        2188,1,0,0,0,2188,2197,1,0,0,0,2189,2191,3,338,169,0,2190,2192,5,
        132,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,0,2192,2193,1,0,0,0,2193,
        2194,5,123,0,0,2194,2195,3,336,168,0,2195,2197,1,0,0,0,2196,2185,
        1,0,0,0,2196,2189,1,0,0,0,2197,337,1,0,0,0,2198,2199,3,340,170,0,
        2199,2201,5,84,0,0,2200,2202,3,36,18,0,2201,2200,1,0,0,0,2201,2202,
        1,0,0,0,2202,2203,1,0,0,0,2203,2204,5,85,0,0,2204,2209,1,0,0,0,2205,
        2206,3,340,170,0,2206,2207,3,288,144,0,2207,2209,1,0,0,0,2208,2198,
        1,0,0,0,2208,2205,1,0,0,0,2209,339,1,0,0,0,2210,2213,3,322,161,0,
        2211,2213,5,133,0,0,2212,2210,1,0,0,0,2212,2211,1,0,0,0,2213,341,
        1,0,0,0,2214,2215,5,51,0,0,2215,2216,3,390,195,0,2216,343,1,0,0,
        0,2217,2218,5,51,0,0,2218,2219,5,142,0,0,2219,2223,5,133,0,0,2220,
        2221,5,51,0,0,2221,2223,5,145,0,0,2222,2217,1,0,0,0,2222,2220,1,
        0,0,0,2223,345,1,0,0,0,2224,2225,5,67,0,0,2225,2226,5,101,0,0,2226,
        2227,3,348,174,0,2227,2228,5,102,0,0,2228,2229,3,124,62,0,2229,347,
        1,0,0,0,2230,2231,6,174,-1,0,2231,2232,3,350,175,0,2232,2238,1,0,
        0,0,2233,2234,10,1,0,0,2234,2235,5,123,0,0,2235,2237,3,350,175,0,
        2236,2233,1,0,0,0,2237,2240,1,0,0,0,2238,2236,1,0,0,0,2238,2239,
        1,0,0,0,2239,349,1,0,0,0,2240,2238,1,0,0,0,2241,2244,3,352,176,0,
        2242,2244,3,274,137,0,2243,2241,1,0,0,0,2243,2242,1,0,0,0,2244,351,
        1,0,0,0,2245,2247,5,20,0,0,2246,2248,5,132,0,0,2247,2246,1,0,0,0,
        2247,2248,1,0,0,0,2248,2250,1,0,0,0,2249,2251,5,133,0,0,2250,2249,
        1,0,0,0,2250,2251,1,0,0,0,2251,2294,1,0,0,0,2252,2254,5,20,0,0,2253,
        2255,5,133,0,0,2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,2256,1,0,
        0,0,2256,2257,5,100,0,0,2257,2294,3,258,129,0,2258,2260,5,75,0,0,
        2259,2261,5,132,0,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2263,
        1,0,0,0,2262,2264,5,133,0,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,
        2264,2294,1,0,0,0,2265,2267,5,75,0,0,2266,2268,5,133,0,0,2267,2266,
        1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,0,2269,2270,5,100,0,0,
        2270,2294,3,258,129,0,2271,2272,5,67,0,0,2272,2273,5,101,0,0,2273,
        2274,3,348,174,0,2274,2275,5,102,0,0,2275,2277,5,20,0,0,2276,2278,
        5,132,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2280,1,0,0,0,
        2279,2281,5,133,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,2294,
        1,0,0,0,2282,2283,5,67,0,0,2283,2284,5,101,0,0,2284,2285,3,348,174,
        0,2285,2286,5,102,0,0,2286,2288,5,20,0,0,2287,2289,5,133,0,0,2288,
        2287,1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,0,0,0,2290,2291,5,100,
        0,0,2291,2292,3,4,2,0,2292,2294,1,0,0,0,2293,2245,1,0,0,0,2293,2252,
        1,0,0,0,2293,2258,1,0,0,0,2293,2265,1,0,0,0,2293,2271,1,0,0,0,2293,
        2282,1,0,0,0,2294,353,1,0,0,0,2295,2296,3,358,179,0,2296,2298,5,
        101,0,0,2297,2299,3,360,180,0,2298,2297,1,0,0,0,2298,2299,1,0,0,
        0,2299,2300,1,0,0,0,2300,2301,5,102,0,0,2301,355,1,0,0,0,2302,2318,
        3,354,177,0,2303,2304,3,342,171,0,2304,2306,5,101,0,0,2305,2307,
        3,360,180,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,
        0,2308,2309,5,102,0,0,2309,2318,1,0,0,0,2310,2311,3,344,172,0,2311,
        2313,5,101,0,0,2312,2314,3,360,180,0,2313,2312,1,0,0,0,2313,2314,
        1,0,0,0,2314,2315,1,0,0,0,2315,2316,5,102,0,0,2316,2318,1,0,0,0,
        2317,2302,1,0,0,0,2317,2303,1,0,0,0,2317,2310,1,0,0,0,2318,357,1,
        0,0,0,2319,2320,5,133,0,0,2320,359,1,0,0,0,2321,2322,6,180,-1,0,
        2322,2324,3,362,181,0,2323,2325,5,132,0,0,2324,2323,1,0,0,0,2324,
        2325,1,0,0,0,2325,2334,1,0,0,0,2326,2327,10,1,0,0,2327,2328,5,123,
        0,0,2328,2330,3,362,181,0,2329,2331,5,132,0,0,2330,2329,1,0,0,0,
        2330,2331,1,0,0,0,2331,2333,1,0,0,0,2332,2326,1,0,0,0,2333,2336,
        1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,361,1,0,0,0,2336,
        2334,1,0,0,0,2337,2341,3,258,129,0,2338,2341,3,94,47,0,2339,2341,
        3,4,2,0,2340,2337,1,0,0,0,2340,2338,1,0,0,0,2340,2339,1,0,0,0,2341,
        363,1,0,0,0,2342,2343,5,75,0,0,2343,2344,3,10,5,0,2344,2345,5,133,
        0,0,2345,2354,1,0,0,0,2346,2347,5,75,0,0,2347,2349,3,10,5,0,2348,
        2350,5,67,0,0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,2351,1,0,
        0,0,2351,2352,3,354,177,0,2352,2354,1,0,0,0,2353,2342,1,0,0,0,2353,
        2346,1,0,0,0,2354,365,1,0,0,0,2355,2357,5,35,0,0,2356,2355,1,0,0,
        0,2356,2357,1,0,0,0,2357,2358,1,0,0,0,2358,2359,5,67,0,0,2359,2360,
        3,124,62,0,2360,367,1,0,0,0,2361,2362,5,67,0,0,2362,2363,5,101,0,
        0,2363,2364,5,102,0,0,2364,2365,3,124,62,0,2365,369,1,0,0,0,2366,
        2367,5,72,0,0,2367,2368,3,102,51,0,2368,2369,3,374,187,0,2369,371,
        1,0,0,0,2370,2372,5,72,0,0,2371,2373,3,334,167,0,2372,2371,1,0,0,
        0,2372,2373,1,0,0,0,2373,2374,1,0,0,0,2374,2375,3,102,51,0,2375,
        2376,3,374,187,0,2376,373,1,0,0,0,2377,2379,3,376,188,0,2378,2380,
        3,374,187,0,2379,2378,1,0,0,0,2379,2380,1,0,0,0,2380,375,1,0,0,0,
        2381,2382,5,16,0,0,2382,2383,5,84,0,0,2383,2384,3,378,189,0,2384,
        2385,5,85,0,0,2385,2386,3,102,51,0,2386,377,1,0,0,0,2387,2389,3,
        212,106,0,2388,2387,1,0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,
        2390,2391,3,152,76,0,2391,2392,3,238,119,0,2392,2402,1,0,0,0,2393,
        2395,3,212,106,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,2396,1,
        0,0,0,2396,2398,3,152,76,0,2397,2399,3,260,130,0,2398,2397,1,0,0,
        0,2398,2399,1,0,0,0,2399,2402,1,0,0,0,2400,2402,5,132,0,0,2401,2388,
        1,0,0,0,2401,2394,1,0,0,0,2401,2400,1,0,0,0,2402,379,1,0,0,0,2403,
        2405,5,70,0,0,2404,2406,3,88,44,0,2405,2404,1,0,0,0,2405,2406,1,
        0,0,0,2406,381,1,0,0,0,2407,2410,3,384,192,0,2408,2410,3,388,194,
        0,2409,2407,1,0,0,0,2409,2408,1,0,0,0,2410,383,1,0,0,0,2411,2412,
        5,70,0,0,2412,2414,5,84,0,0,2413,2415,3,386,193,0,2414,2413,1,0,
        0,0,2414,2415,1,0,0,0,2415,2416,1,0,0,0,2416,2417,5,85,0,0,2417,
        385,1,0,0,0,2418,2419,6,193,-1,0,2419,2421,3,258,129,0,2420,2422,
        5,132,0,0,2421,2420,1,0,0,0,2421,2422,1,0,0,0,2422,2431,1,0,0,0,
        2423,2424,10,1,0,0,2424,2425,5,123,0,0,2425,2427,3,258,129,0,2426,
        2428,5,132,0,0,2427,2426,1,0,0,0,2427,2428,1,0,0,0,2428,2430,1,0,
        0,0,2429,2423,1,0,0,0,2430,2433,1,0,0,0,2431,2429,1,0,0,0,2431,2432,
        1,0,0,0,2432,387,1,0,0,0,2433,2431,1,0,0,0,2434,2435,5,49,0,0,2435,
        2436,5,84,0,0,2436,2437,3,94,47,0,2437,2438,5,85,0,0,2438,2441,1,
        0,0,0,2439,2441,5,49,0,0,2440,2434,1,0,0,0,2440,2439,1,0,0,0,2441,
        389,1,0,0,0,2442,2494,5,48,0,0,2443,2494,5,27,0,0,2444,2445,5,48,
        0,0,2445,2446,5,86,0,0,2446,2494,5,87,0,0,2447,2448,5,27,0,0,2448,
        2449,5,86,0,0,2449,2494,5,87,0,0,2450,2494,5,90,0,0,2451,2494,5,
        91,0,0,2452,2494,5,92,0,0,2453,2494,5,93,0,0,2454,2494,5,94,0,0,
        2455,2494,5,95,0,0,2456,2494,5,96,0,0,2457,2494,5,97,0,0,2458,2494,
        5,98,0,0,2459,2494,5,1,0,0,2460,2494,5,2,0,0,2461,2494,5,100,0,0,
        2462,2494,5,101,0,0,2463,2494,5,102,0,0,2464,2494,5,103,0,0,2465,
        2494,5,104,0,0,2466,2494,5,105,0,0,2467,2494,5,106,0,0,2468,2494,
        5,107,0,0,2469,2494,5,108,0,0,2470,2494,5,109,0,0,2471,2494,5,110,
        0,0,2472,2494,5,111,0,0,2473,2494,5,112,0,0,2474,2494,5,114,0,0,
        2475,2494,5,113,0,0,2476,2494,5,115,0,0,2477,2494,5,116,0,0,2478,
        2494,5,117,0,0,2479,2494,5,118,0,0,2480,2494,5,3,0,0,2481,2494,5,
        4,0,0,2482,2494,5,5,0,0,2483,2494,5,6,0,0,2484,2494,5,121,0,0,2485,
        2494,5,122,0,0,2486,2494,5,123,0,0,2487,2494,5,124,0,0,2488,2494,
        5,125,0,0,2489,2490,5,84,0,0,2490,2494,5,85,0,0,2491,2492,5,86,0,
        0,2492,2494,5,87,0,0,2493,2442,1,0,0,0,2493,2443,1,0,0,0,2493,2444,
        1,0,0,0,2493,2447,1,0,0,0,2493,2450,1,0,0,0,2493,2451,1,0,0,0,2493,
        2452,1,0,0,0,2493,2453,1,0,0,0,2493,2454,1,0,0,0,2493,2455,1,0,0,
        0,2493,2456,1,0,0,0,2493,2457,1,0,0,0,2493,2458,1,0,0,0,2493,2459,
        1,0,0,0,2493,2460,1,0,0,0,2493,2461,1,0,0,0,2493,2462,1,0,0,0,2493,
        2463,1,0,0,0,2493,2464,1,0,0,0,2493,2465,1,0,0,0,2493,2466,1,0,0,
        0,2493,2467,1,0,0,0,2493,2468,1,0,0,0,2493,2469,1,0,0,0,2493,2470,
        1,0,0,0,2493,2471,1,0,0,0,2493,2472,1,0,0,0,2493,2473,1,0,0,0,2493,
        2474,1,0,0,0,2493,2475,1,0,0,0,2493,2476,1,0,0,0,2493,2477,1,0,0,
        0,2493,2478,1,0,0,0,2493,2479,1,0,0,0,2493,2480,1,0,0,0,2493,2481,
        1,0,0,0,2493,2482,1,0,0,0,2493,2483,1,0,0,0,2493,2484,1,0,0,0,2493,
        2485,1,0,0,0,2493,2486,1,0,0,0,2493,2487,1,0,0,0,2493,2488,1,0,0,
        0,2493,2489,1,0,0,0,2493,2491,1,0,0,0,2494,391,1,0,0,0,2495,2503,
        5,134,0,0,2496,2503,5,140,0,0,2497,2503,5,141,0,0,2498,2503,5,142,
        0,0,2499,2503,3,394,197,0,2500,2503,3,396,198,0,2501,2503,3,398,
        199,0,2502,2495,1,0,0,0,2502,2496,1,0,0,0,2502,2497,1,0,0,0,2502,
        2498,1,0,0,0,2502,2499,1,0,0,0,2502,2500,1,0,0,0,2502,2501,1,0,0,
        0,2503,393,1,0,0,0,2504,2507,5,36,0,0,2505,2507,5,71,0,0,2506,2504,
        1,0,0,0,2506,2505,1,0,0,0,2507,395,1,0,0,0,2508,2509,5,50,0,0,2509,
        397,1,0,0,0,2510,2515,5,143,0,0,2511,2515,5,144,0,0,2512,2515,5,
        145,0,0,2513,2515,5,146,0,0,2514,2510,1,0,0,0,2514,2511,1,0,0,0,
        2514,2512,1,0,0,0,2514,2513,1,0,0,0,2515,399,1,0,0,0,329,401,413,
        417,428,432,447,454,459,461,466,472,482,486,491,497,501,506,512,
        519,525,528,531,534,541,548,600,615,621,627,640,642,652,667,673,
        703,713,716,720,724,727,731,737,739,747,751,754,761,768,772,777,
        781,784,789,795,808,819,821,836,838,850,852,864,869,886,888,900,
        902,913,924,935,947,949,961,963,973,981,994,1004,1011,1015,1019,
        1023,1027,1032,1035,1038,1044,1052,1057,1060,1066,1077,1100,1104,
        1112,1118,1138,1142,1155,1159,1162,1169,1177,1187,1198,1210,1220,
        1225,1232,1235,1240,1245,1266,1270,1275,1282,1287,1294,1300,1304,
        1309,1313,1318,1321,1343,1349,1360,1364,1367,1377,1383,1386,1393,
        1403,1407,1410,1413,1417,1422,1424,1428,1432,1441,1454,1462,1468,
        1474,1478,1481,1490,1499,1507,1518,1524,1535,1538,1543,1558,1564,
        1573,1583,1589,1597,1601,1605,1610,1615,1622,1624,1629,1633,1647,
        1653,1671,1673,1683,1688,1695,1701,1706,1712,1719,1723,1725,1727,
        1734,1737,1740,1743,1748,1752,1755,1759,1763,1768,1771,1773,1777,
        1781,1785,1788,1794,1798,1804,1809,1811,1817,1821,1827,1834,1838,
        1840,1842,1849,1859,1863,1865,1867,1871,1874,1880,1890,1894,1900,
        1908,1912,1915,1919,1924,1927,1930,1934,1939,1949,1956,1961,1965,
        1970,1976,1980,1986,1992,1996,2001,2007,2011,2014,2018,2021,2023,
        2026,2035,2039,2044,2046,2049,2052,2055,2064,2074,2079,2082,2086,
        2089,2092,2096,2105,2110,2121,2127,2131,2135,2139,2143,2147,2151,
        2155,2158,2162,2169,2176,2180,2187,2191,2196,2201,2208,2212,2222,
        2238,2243,2247,2250,2254,2260,2263,2267,2277,2280,2288,2293,2298,
        2306,2313,2317,2324,2330,2334,2340,2349,2353,2356,2372,2379,2388,
        2394,2398,2401,2405,2409,2414,2421,2427,2431,2440,2493,2502,2506,
        2514
    ]

class CPP14_v2Parser ( Parser ):

    grammarFileName = "CPP14_v2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'!'", "'not'", "'&&'", "'and'", "'||'", 
                     "'or'", "<INVALID>", "<INVALID>", "'alignas'", "'alignof'", 
                     "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                     "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", 
                     "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
                     "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "<INVALID>", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", 
                     "'>>'", "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", 
                     "<INVALID>", "<INVALID>", "'++'", "'--'", "','", "'->*'", 
                     "'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "MultiLineMacro", 
                      "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False1", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True1", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShift", 
                      "RightShift", "LeftShiftAssign", "RightShiftAssign", 
                      "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
                      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", 
                      "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
                      "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
                      "Integerliteral", "Decimalliteral", "Octalliteral", 
                      "Hexadecimalliteral", "Binaryliteral", "Integersuffix", 
                      "Characterliteral", "Floatingliteral", "Stringliteral", 
                      "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_typeidofexpr = 16
    RULE_typeidofthetypeid = 17
    RULE_expressionlist = 18
    RULE_pseudodestructorname = 19
    RULE_unaryexpression = 20
    RULE_unaryoperator = 21
    RULE_newexpression = 22
    RULE_newplacement = 23
    RULE_newtypeid = 24
    RULE_newdeclarator = 25
    RULE_noptrnewdeclarator = 26
    RULE_newinitializer = 27
    RULE_deleteexpression = 28
    RULE_noexceptexpression = 29
    RULE_castexpression = 30
    RULE_pmexpression = 31
    RULE_multiplicativeexpression = 32
    RULE_additiveexpression = 33
    RULE_shiftexpression = 34
    RULE_shiftoperator = 35
    RULE_relationalexpression = 36
    RULE_equalityexpression = 37
    RULE_andexpression = 38
    RULE_exclusiveorexpression = 39
    RULE_inclusiveorexpression = 40
    RULE_logicalandexpression = 41
    RULE_logicalorexpression = 42
    RULE_conditionalexpression = 43
    RULE_assignmentexpression = 44
    RULE_assignmentoperator = 45
    RULE_expression = 46
    RULE_constantexpression = 47
    RULE_statement = 48
    RULE_labeledstatement = 49
    RULE_expressionstatement = 50
    RULE_compoundstatement = 51
    RULE_statementseq = 52
    RULE_selectionstatement = 53
    RULE_condition = 54
    RULE_iterationstatement = 55
    RULE_forinitstatement = 56
    RULE_forrangedeclaration = 57
    RULE_forrangeinitializer = 58
    RULE_jumpstatement = 59
    RULE_declarationstatement = 60
    RULE_declarationseq = 61
    RULE_declaration = 62
    RULE_blockdeclaration = 63
    RULE_aliasdeclaration = 64
    RULE_simpledeclaration = 65
    RULE_static_assertdeclaration = 66
    RULE_emptydeclaration = 67
    RULE_attributedeclaration = 68
    RULE_declspecifier = 69
    RULE_declspecifierseq = 70
    RULE_storageclassspecifier = 71
    RULE_functionspecifier = 72
    RULE_typedefname = 73
    RULE_typespecifier = 74
    RULE_trailingtypespecifier = 75
    RULE_typespecifierseq = 76
    RULE_trailingtypespecifierseq = 77
    RULE_simpletypespecifier = 78
    RULE_thetypename = 79
    RULE_decltypespecifier = 80
    RULE_elaboratedtypespecifier = 81
    RULE_enumname = 82
    RULE_enumspecifier = 83
    RULE_enumhead = 84
    RULE_opaqueenumdeclaration = 85
    RULE_enumkey = 86
    RULE_enumbase = 87
    RULE_enumeratorlist = 88
    RULE_enumeratordefinition = 89
    RULE_enumerator = 90
    RULE_namespacename = 91
    RULE_originalnamespacename = 92
    RULE_namespacedefinition = 93
    RULE_namednamespacedefinition = 94
    RULE_originalnamespacedefinition = 95
    RULE_extensionnamespacedefinition = 96
    RULE_unnamednamespacedefinition = 97
    RULE_namespacebody = 98
    RULE_namespacealias = 99
    RULE_namespacealiasdefinition = 100
    RULE_qualifiednamespacespecifier = 101
    RULE_usingdeclaration = 102
    RULE_usingdirective = 103
    RULE_asmdefinition = 104
    RULE_linkagespecification = 105
    RULE_attributespecifierseq = 106
    RULE_attributespecifier = 107
    RULE_alignmentspecifier = 108
    RULE_attributelist = 109
    RULE_attribute = 110
    RULE_attributetoken = 111
    RULE_attributescopedtoken = 112
    RULE_attributenamespace = 113
    RULE_attributeargumentclause = 114
    RULE_balancedtokenseq = 115
    RULE_balancedtoken = 116
    RULE_initdeclaratorlist = 117
    RULE_initdeclarator = 118
    RULE_declarator = 119
    RULE_ptrdeclarator = 120
    RULE_noptrdeclarator = 121
    RULE_parametersandqualifiers = 122
    RULE_trailingreturntype = 123
    RULE_ptroperator = 124
    RULE_cvqualifierseq = 125
    RULE_cvqualifier = 126
    RULE_refqualifier = 127
    RULE_declaratorid = 128
    RULE_thetypeid = 129
    RULE_abstractdeclarator = 130
    RULE_ptrabstractdeclarator = 131
    RULE_noptrabstractdeclarator = 132
    RULE_abstractpackdeclarator = 133
    RULE_noptrabstractpackdeclarator = 134
    RULE_parameterdeclarationclause = 135
    RULE_parameterdeclarationlist = 136
    RULE_parameterdeclaration = 137
    RULE_functiondefinition = 138
    RULE_functionbody = 139
    RULE_initializer = 140
    RULE_braceorequalinitializer = 141
    RULE_initializerclause = 142
    RULE_initializerlist = 143
    RULE_bracedinitlist = 144
    RULE_classname = 145
    RULE_classspecifier = 146
    RULE_classhead = 147
    RULE_classheadname = 148
    RULE_classvirtspecifier = 149
    RULE_classkey = 150
    RULE_memberspecification = 151
    RULE_memberdeclaration = 152
    RULE_memberdeclaratorlist = 153
    RULE_memberdeclarator = 154
    RULE_virtspecifierseq = 155
    RULE_virtspecifier = 156
    RULE_purespecifier = 157
    RULE_baseclause = 158
    RULE_basespecifierlist = 159
    RULE_basespecifier = 160
    RULE_classordecltype = 161
    RULE_basetypespecifier = 162
    RULE_accessspecifier = 163
    RULE_conversionfunctionid = 164
    RULE_conversiontypeid = 165
    RULE_conversiondeclarator = 166
    RULE_ctorinitializer = 167
    RULE_meminitializerlist = 168
    RULE_meminitializer = 169
    RULE_meminitializerid = 170
    RULE_operatorfunctionid = 171
    RULE_literaloperatorid = 172
    RULE_templatedeclaration = 173
    RULE_templateparameterlist = 174
    RULE_templateparameter = 175
    RULE_typeparameter = 176
    RULE_simpletemplateid = 177
    RULE_templateid = 178
    RULE_templatename = 179
    RULE_templateargumentlist = 180
    RULE_templateargument = 181
    RULE_typenamespecifier = 182
    RULE_explicitinstantiation = 183
    RULE_explicitspecialization = 184
    RULE_tryblock = 185
    RULE_functiontryblock = 186
    RULE_handlerseq = 187
    RULE_handler = 188
    RULE_exceptiondeclaration = 189
    RULE_throwexpression = 190
    RULE_exceptionspecification = 191
    RULE_dynamicexceptionspecification = 192
    RULE_typeidlist = 193
    RULE_noexceptspecification = 194
    RULE_theoperator = 195
    RULE_literal = 196
    RULE_booleanliteral = 197
    RULE_pointerliteral = 198
    RULE_userdefinedliteral = 199

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "typeidofexpr", "typeidofthetypeid", "expressionlist", 
                   "pseudodestructorname", "unaryexpression", "unaryoperator", 
                   "newexpression", "newplacement", "newtypeid", "newdeclarator", 
                   "noptrnewdeclarator", "newinitializer", "deleteexpression", 
                   "noexceptexpression", "castexpression", "pmexpression", 
                   "multiplicativeexpression", "additiveexpression", "shiftexpression", 
                   "shiftoperator", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "thetypename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "theoperator", 
                   "literal", "booleanliteral", "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    MultiLineMacro=7
    Directive=8
    Alignas=9
    Alignof=10
    Asm=11
    Auto=12
    Bool=13
    Break=14
    Case=15
    Catch=16
    Char=17
    Char16=18
    Char32=19
    Class=20
    Const=21
    Constexpr=22
    Const_cast=23
    Continue=24
    Decltype=25
    Default=26
    Delete=27
    Do=28
    Double=29
    Dynamic_cast=30
    Else=31
    Enum=32
    Explicit=33
    Export=34
    Extern=35
    False1=36
    Final=37
    Float=38
    For=39
    Friend=40
    Goto=41
    If=42
    Inline=43
    Int=44
    Long=45
    Mutable=46
    Namespace=47
    New=48
    Noexcept=49
    Nullptr=50
    Operator=51
    Override=52
    Private=53
    Protected=54
    Public=55
    Register=56
    Reinterpret_cast=57
    Return=58
    Short=59
    Signed=60
    Sizeof=61
    Static=62
    Static_assert=63
    Static_cast=64
    Struct=65
    Switch=66
    Template=67
    This=68
    Thread_local=69
    Throw=70
    True1=71
    Try=72
    Typedef=73
    Typeid_=74
    Typename_=75
    Union=76
    Unsigned=77
    Using=78
    Virtual=79
    Void=80
    Volatile=81
    Wchar=82
    While=83
    LeftParen=84
    RightParen=85
    LeftBracket=86
    RightBracket=87
    LeftBrace=88
    RightBrace=89
    Plus=90
    Minus=91
    Star=92
    Div=93
    Mod=94
    Caret=95
    And=96
    Or=97
    Tilde=98
    Not=99
    Assign=100
    Less=101
    Greater=102
    PlusAssign=103
    MinusAssign=104
    StarAssign=105
    DivAssign=106
    ModAssign=107
    XorAssign=108
    AndAssign=109
    OrAssign=110
    LeftShift=111
    RightShift=112
    LeftShiftAssign=113
    RightShiftAssign=114
    Equal=115
    NotEqual=116
    LessEqual=117
    GreaterEqual=118
    AndAnd=119
    OrOr=120
    PlusPlus=121
    MinusMinus=122
    Comma=123
    ArrowStar=124
    Arrow=125
    Question=126
    Colon=127
    Doublecolon=128
    Semi=129
    Dot=130
    DotStar=131
    Ellipsis=132
    Identifier=133
    Integerliteral=134
    Decimalliteral=135
    Octalliteral=136
    Hexadecimalliteral=137
    Binaryliteral=138
    Integersuffix=139
    Characterliteral=140
    Floatingliteral=141
    Stringliteral=142
    Userdefinedintegerliteral=143
    Userdefinedfloatingliteral=144
    Userdefinedstringliteral=145
    Userdefinedcharacterliteral=146
    Whitespace=147
    Newline=148
    BlockComment=149
    LineComment=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationunitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14_v2Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationunit" ):
                return visitor.visitTranslationunit(self)
            else:
                return visitor.visitChildren(self)




    def translationunit(self):

        localctx = CPP14_v2Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                self.state = 400
                self.declarationseq(0)


            self.state = 403
            self.match(CPP14_v2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_primaryexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Primaryexpression2Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(CPP14_v2Parser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression2" ):
                listener.enterPrimaryexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression2" ):
                listener.exitPrimaryexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression2" ):
                return visitor.visitPrimaryexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression3Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression3" ):
                listener.enterPrimaryexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression3" ):
                listener.exitPrimaryexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression3" ):
                return visitor.visitPrimaryexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression4Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression4" ):
                listener.enterPrimaryexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression4" ):
                listener.exitPrimaryexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression4" ):
                return visitor.visitPrimaryexpression4(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression5Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdaexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression5" ):
                listener.enterPrimaryexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression5" ):
                listener.exitPrimaryexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression5" ):
                return visitor.visitPrimaryexpression5(self)
            else:
                return visitor.visitChildren(self)


    class Primaryexpression1Context(PrimaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PrimaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression1" ):
                listener.enterPrimaryexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression1" ):
                listener.exitPrimaryexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression1" ):
                return visitor.visitPrimaryexpression1(self)
            else:
                return visitor.visitChildren(self)



    def primaryexpression(self):

        localctx = CPP14_v2Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.False1, CPP14_v2Parser.Nullptr, CPP14_v2Parser.True1, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Primaryexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.literal()
                pass
            elif token in [CPP14_v2Parser.This]:
                localctx = CPP14_v2Parser.Primaryexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(CPP14_v2Parser.This)
                pass
            elif token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Primaryexpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 408
                self.expression(0)
                self.state = 409
                self.match(CPP14_v2Parser.RightParen)
                pass
            elif token in [CPP14_v2Parser.Decltype, CPP14_v2Parser.Operator, CPP14_v2Parser.Tilde, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Primaryexpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.idexpression()
                pass
            elif token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Primaryexpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 412
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_idexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Idexpression2Context(IdexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IdexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.QualifiedidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression2" ):
                listener.enterIdexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression2" ):
                listener.exitIdexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression2" ):
                return visitor.visitIdexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Idexpression1Context(IdexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IdexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression1" ):
                listener.enterIdexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression1" ):
                listener.exitIdexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression1" ):
                return visitor.visitIdexpression1(self)
            else:
                return visitor.visitChildren(self)



    def idexpression(self):

        localctx = CPP14_v2Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Idexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.unqualifiedid()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Idexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unqualifiedid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unqualifiedid6Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid6" ):
                listener.enterUnqualifiedid6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid6" ):
                listener.exitUnqualifiedid6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid6" ):
                return visitor.visitUnqualifiedid6(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid7Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid7" ):
                listener.enterUnqualifiedid7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid7" ):
                listener.exitUnqualifiedid7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid7" ):
                return visitor.visitUnqualifiedid7(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid4Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LiteraloperatoridContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid4" ):
                listener.enterUnqualifiedid4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid4" ):
                listener.exitUnqualifiedid4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid4" ):
                return visitor.visitUnqualifiedid4(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid5Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid5" ):
                listener.enterUnqualifiedid5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid5" ):
                listener.exitUnqualifiedid5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid5" ):
                return visitor.visitUnqualifiedid5(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid2Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OperatorfunctionidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid2" ):
                listener.enterUnqualifiedid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid2" ):
                listener.exitUnqualifiedid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid2" ):
                return visitor.visitUnqualifiedid2(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid3Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversionfunctionidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid3" ):
                listener.enterUnqualifiedid3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid3" ):
                listener.exitUnqualifiedid3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid3" ):
                return visitor.visitUnqualifiedid3(self)
            else:
                return visitor.visitChildren(self)


    class Unqualifiedid1Context(UnqualifiedidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnqualifiedidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid1" ):
                listener.enterUnqualifiedid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid1" ):
                listener.exitUnqualifiedid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid1" ):
                return visitor.visitUnqualifiedid1(self)
            else:
                return visitor.visitChildren(self)



    def unqualifiedid(self):

        localctx = CPP14_v2Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Unqualifiedid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Unqualifiedid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Unqualifiedid3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Unqualifiedid4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.literaloperatorid()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Unqualifiedid5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.match(CPP14_v2Parser.Tilde)
                self.state = 424
                self.classname()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Unqualifiedid6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 425
                self.match(CPP14_v2Parser.Tilde)
                self.state = 426
                self.decltypespecifier()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Unqualifiedid7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 427
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedid" ):
                return visitor.visitQualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedid(self):

        localctx = CPP14_v2Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.nestednamespecifier(0)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Template:
                self.state = 431
                self.match(CPP14_v2Parser.Template)


            self.state = 434
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestednamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_nestednamespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Nestednamespecifier6Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier6" ):
                listener.enterNestednamespecifier6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier6" ):
                listener.exitNestednamespecifier6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier6" ):
                return visitor.visitNestednamespecifier6(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier5Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier5" ):
                listener.enterNestednamespecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier5" ):
                listener.exitNestednamespecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier5" ):
                return visitor.visitNestednamespecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier4Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier4" ):
                listener.enterNestednamespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier4" ):
                listener.exitNestednamespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier4" ):
                return visitor.visitNestednamespecifier4(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier3Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacenameContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier3" ):
                listener.enterNestednamespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier3" ):
                listener.exitNestednamespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier3" ):
                return visitor.visitNestednamespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier2Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier2" ):
                listener.enterNestednamespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier2" ):
                listener.exitNestednamespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier2" ):
                return visitor.visitNestednamespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Nestednamespecifier1Context(NestednamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NestednamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier1" ):
                listener.enterNestednamespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier1" ):
                listener.exitNestednamespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier1" ):
                return visitor.visitNestednamespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Nestednamespecifier1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 437
                self.match(CPP14_v2Parser.Doublecolon)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Nestednamespecifier2Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 438
                self.thetypename()
                self.state = 439
                self.match(CPP14_v2Parser.Doublecolon)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Nestednamespecifier3Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 441
                self.namespacename()
                self.state = 442
                self.match(CPP14_v2Parser.Doublecolon)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Nestednamespecifier4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 444
                self.decltypespecifier()
                self.state = 445
                self.match(CPP14_v2Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 459
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Nestednamespecifier5Context(self, CPP14_v2Parser.NestednamespecifierContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 449
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 450
                        self.match(CPP14_v2Parser.Identifier)
                        self.state = 451
                        self.match(CPP14_v2Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Nestednamespecifier6Context(self, CPP14_v2Parser.NestednamespecifierContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 452
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14_v2Parser.Template:
                            self.state = 453
                            self.match(CPP14_v2Parser.Template)


                        self.state = 456
                        self.simpletemplateid()
                        self.state = 457
                        self.match(CPP14_v2Parser.Doublecolon)
                        pass

             
                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaexpression" ):
                return visitor.visitLambdaexpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaexpression(self):

        localctx = CPP14_v2Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.lambdaintroducer()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.LeftParen:
                self.state = 465
                self.lambdadeclarator()


            self.state = 468
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaintroducerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaintroducer" ):
                return visitor.visitLambdaintroducer(self)
            else:
                return visitor.visitChildren(self)




    def lambdaintroducer(self):

        localctx = CPP14_v2Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(CPP14_v2Parser.LeftBracket)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CPP14_v2Parser.This - 68)) | (1 << (CPP14_v2Parser.And - 68)) | (1 << (CPP14_v2Parser.Assign - 68)))) != 0) or _la==CPP14_v2Parser.Identifier:
                self.state = 471
                self.lambdacapture()


            self.state = 474
            self.match(CPP14_v2Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdacaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdacapture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Lambdacapture3Context(LambdacaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LambdacaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturedefaultContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def capturelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturelistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture3" ):
                listener.enterLambdacapture3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture3" ):
                listener.exitLambdacapture3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture3" ):
                return visitor.visitLambdacapture3(self)
            else:
                return visitor.visitChildren(self)


    class Lambdacapture2Context(LambdacaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LambdacaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturelistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture2" ):
                listener.enterLambdacapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture2" ):
                listener.exitLambdacapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture2" ):
                return visitor.visitLambdacapture2(self)
            else:
                return visitor.visitChildren(self)


    class Lambdacapture1Context(LambdacaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LambdacaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturedefaultContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture1" ):
                listener.enterLambdacapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture1" ):
                listener.exitLambdacapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture1" ):
                return visitor.visitLambdacapture1(self)
            else:
                return visitor.visitChildren(self)



    def lambdacapture(self):

        localctx = CPP14_v2Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Lambdacapture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.capturedefault()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Lambdacapture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.capturelist(0)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Lambdacapture3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.capturedefault()
                self.state = 479
                self.match(CPP14_v2Parser.Comma)
                self.state = 480
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturedefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_capturedefault

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Capturedefault1Context(CapturedefaultContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturedefaultContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault1" ):
                listener.enterCapturedefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault1" ):
                listener.exitCapturedefault1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault1" ):
                return visitor.visitCapturedefault1(self)
            else:
                return visitor.visitChildren(self)


    class Capturedefault2Context(CapturedefaultContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturedefaultContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault2" ):
                listener.enterCapturedefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault2" ):
                listener.exitCapturedefault2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault2" ):
                return visitor.visitCapturedefault2(self)
            else:
                return visitor.visitChildren(self)



    def capturedefault(self):

        localctx = CPP14_v2Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        try:
            self.state = 486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Capturedefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.match(CPP14_v2Parser.And)
                pass
            elif token in [CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Capturedefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(CPP14_v2Parser.Assign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_capturelist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Capturelist2Context(CapturelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CapturelistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def capture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CaptureContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist2" ):
                listener.enterCapturelist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist2" ):
                listener.exitCapturelist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist2" ):
                return visitor.visitCapturelist2(self)
            else:
                return visitor.visitChildren(self)


    class Capturelist1Context(CapturelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CapturelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def capture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CaptureContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist1" ):
                listener.enterCapturelist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist1" ):
                listener.exitCapturelist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist1" ):
                return visitor.visitCapturelist1(self)
            else:
                return visitor.visitChildren(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Capturelist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 489
            self.capture()
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 490
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Capturelist2Context(self, CPP14_v2Parser.CapturelistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 493
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 494
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 495
                    self.capture()
                    self.state = 497
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 496
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_capture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Capture1Context(CaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplecapture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimplecaptureContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture1" ):
                listener.enterCapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture1" ):
                listener.exitCapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture1" ):
                return visitor.visitCapture1(self)
            else:
                return visitor.visitChildren(self)


    class Capture2Context(CaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initcapture(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitcaptureContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture2" ):
                listener.enterCapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture2" ):
                listener.exitCapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture2" ):
                return visitor.visitCapture2(self)
            else:
                return visitor.visitChildren(self)



    def capture(self):

        localctx = CPP14_v2Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Capture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.simplecapture()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Capture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplecaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simplecapture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simplecapture1Context(SimplecaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimplecaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture1" ):
                listener.enterSimplecapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture1" ):
                listener.exitSimplecapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture1" ):
                return visitor.visitSimplecapture1(self)
            else:
                return visitor.visitChildren(self)


    class Simplecapture3Context(SimplecaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimplecaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(CPP14_v2Parser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture3" ):
                listener.enterSimplecapture3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture3" ):
                listener.exitSimplecapture3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture3" ):
                return visitor.visitSimplecapture3(self)
            else:
                return visitor.visitChildren(self)


    class Simplecapture2Context(SimplecaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimplecaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture2" ):
                listener.enterSimplecapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture2" ):
                listener.exitSimplecapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture2" ):
                return visitor.visitSimplecapture2(self)
            else:
                return visitor.visitChildren(self)



    def simplecapture(self):

        localctx = CPP14_v2Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Simplecapture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(CPP14_v2Parser.Identifier)
                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Simplecapture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(CPP14_v2Parser.And)
                self.state = 510
                self.match(CPP14_v2Parser.Identifier)
                pass
            elif token in [CPP14_v2Parser.This]:
                localctx = CPP14_v2Parser.Simplecapture3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 511
                self.match(CPP14_v2Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initcapture

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Initcapture2Context(InitcaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitcaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def initializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture2" ):
                listener.enterInitcapture2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture2" ):
                listener.exitInitcapture2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture2" ):
                return visitor.visitInitcapture2(self)
            else:
                return visitor.visitChildren(self)


    class Initcapture1Context(InitcaptureContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitcaptureContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def initializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture1" ):
                listener.enterInitcapture1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture1" ):
                listener.exitInitcapture1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture1" ):
                return visitor.visitInitcapture1(self)
            else:
                return visitor.visitChildren(self)



    def initcapture(self):

        localctx = CPP14_v2Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Initcapture1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.match(CPP14_v2Parser.Identifier)
                self.state = 515
                self.initializer()
                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Initcapture2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.match(CPP14_v2Parser.And)
                self.state = 517
                self.match(CPP14_v2Parser.Identifier)
                self.state = 518
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdadeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def Mutable(self):
            return self.getToken(CPP14_v2Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdadeclarator" ):
                return visitor.visitLambdadeclarator(self)
            else:
                return visitor.visitChildren(self)




    def lambdadeclarator(self):

        localctx = CPP14_v2Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 522
            self.parameterdeclarationclause()
            self.state = 523
            self.match(CPP14_v2Parser.RightParen)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Mutable:
                self.state = 524
                self.match(CPP14_v2Parser.Mutable)


            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Noexcept or _la==CPP14_v2Parser.Throw:
                self.state = 527
                self.exceptionspecification()


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 530
                self.attributespecifierseq(0)


            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Arrow:
                self.state = 533
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_postfixexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Postfixexpression2Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression2" ):
                listener.enterPostfixexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression2" ):
                listener.exitPostfixexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression2" ):
                return visitor.visitPostfixexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression1Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PrimaryexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression1" ):
                listener.enterPostfixexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression1" ):
                listener.exitPostfixexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression1" ):
                return visitor.visitPostfixexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression4Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression4" ):
                listener.enterPostfixexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression4" ):
                listener.exitPostfixexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression4" ):
                return visitor.visitPostfixexpression4(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression3Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression3" ):
                listener.enterPostfixexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression3" ):
                listener.exitPostfixexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression3" ):
                return visitor.visitPostfixexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression20Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeidofthetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidofthetypeidContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression20" ):
                listener.enterPostfixexpression20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression20" ):
                listener.exitPostfixexpression20(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression20" ):
                return visitor.visitPostfixexpression20(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression9Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Dot(self):
            return self.getToken(CPP14_v2Parser.Dot, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression9" ):
                listener.enterPostfixexpression9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression9" ):
                listener.exitPostfixexpression9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression9" ):
                return visitor.visitPostfixexpression9(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression6Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypenamespecifierContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression6" ):
                listener.enterPostfixexpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression6" ):
                listener.exitPostfixexpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression6" ):
                return visitor.visitPostfixexpression6(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression13Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def PlusPlus(self):
            return self.getToken(CPP14_v2Parser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression13" ):
                listener.enterPostfixexpression13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression13" ):
                listener.exitPostfixexpression13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression13" ):
                return visitor.visitPostfixexpression13(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression5Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletypespecifierContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression5" ):
                listener.enterPostfixexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression5" ):
                listener.exitPostfixexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression5" ):
                return visitor.visitPostfixexpression5(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression12Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)
        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PseudodestructornameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression12" ):
                listener.enterPostfixexpression12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression12" ):
                listener.exitPostfixexpression12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression12" ):
                return visitor.visitPostfixexpression12(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression8Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypenamespecifierContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression8" ):
                listener.enterPostfixexpression8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression8" ):
                listener.exitPostfixexpression8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression8" ):
                return visitor.visitPostfixexpression8(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression11Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Dot(self):
            return self.getToken(CPP14_v2Parser.Dot, 0)
        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PseudodestructornameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression11" ):
                listener.enterPostfixexpression11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression11" ):
                listener.exitPostfixexpression11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression11" ):
                return visitor.visitPostfixexpression11(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression7Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletypespecifierContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression7" ):
                listener.enterPostfixexpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression7" ):
                listener.exitPostfixexpression7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression7" ):
                return visitor.visitPostfixexpression7(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression10Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression10" ):
                listener.enterPostfixexpression10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression10" ):
                listener.exitPostfixexpression10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression10" ):
                return visitor.visitPostfixexpression10(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression17Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Reinterpret_cast(self):
            return self.getToken(CPP14_v2Parser.Reinterpret_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression17" ):
                listener.enterPostfixexpression17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression17" ):
                listener.exitPostfixexpression17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression17" ):
                return visitor.visitPostfixexpression17(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression16Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Static_cast(self):
            return self.getToken(CPP14_v2Parser.Static_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression16" ):
                listener.enterPostfixexpression16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression16" ):
                listener.exitPostfixexpression16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression16" ):
                return visitor.visitPostfixexpression16(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression15Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Dynamic_cast(self):
            return self.getToken(CPP14_v2Parser.Dynamic_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression15" ):
                listener.enterPostfixexpression15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression15" ):
                listener.exitPostfixexpression15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression15" ):
                return visitor.visitPostfixexpression15(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression14Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)

        def MinusMinus(self):
            return self.getToken(CPP14_v2Parser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression14" ):
                listener.enterPostfixexpression14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression14" ):
                listener.exitPostfixexpression14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression14" ):
                return visitor.visitPostfixexpression14(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression19Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeidofthetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidofthetypeidContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression19" ):
                listener.enterPostfixexpression19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression19" ):
                listener.exitPostfixexpression19(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression19" ):
                return visitor.visitPostfixexpression19(self)
            else:
                return visitor.visitChildren(self)


    class Postfixexpression18Context(PostfixexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PostfixexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Const_cast(self):
            return self.getToken(CPP14_v2Parser.Const_cast, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression18" ):
                listener.enterPostfixexpression18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression18" ):
                listener.exitPostfixexpression18(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression18" ):
                return visitor.visitPostfixexpression18(self)
            else:
                return visitor.visitChildren(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Postfixexpression1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 537
                self.primaryexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Postfixexpression5Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 538
                self.simpletypespecifier()
                self.state = 539
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 540
                    self.expressionlist()


                self.state = 543
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Postfixexpression6Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 545
                self.typenamespecifier()
                self.state = 546
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 547
                    self.expressionlist()


                self.state = 550
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Postfixexpression7Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 552
                self.simpletypespecifier()
                self.state = 553
                self.bracedinitlist()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Postfixexpression8Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 555
                self.typenamespecifier()
                self.state = 556
                self.bracedinitlist()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Postfixexpression15Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 558
                self.match(CPP14_v2Parser.Dynamic_cast)
                self.state = 559
                self.match(CPP14_v2Parser.Less)
                self.state = 560
                self.thetypeid()
                self.state = 561
                self.match(CPP14_v2Parser.Greater)
                self.state = 562
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 563
                self.expression(0)
                self.state = 564
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Postfixexpression16Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 566
                self.match(CPP14_v2Parser.Static_cast)
                self.state = 567
                self.match(CPP14_v2Parser.Less)
                self.state = 568
                self.thetypeid()
                self.state = 569
                self.match(CPP14_v2Parser.Greater)
                self.state = 570
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 571
                self.expression(0)
                self.state = 572
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Postfixexpression17Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 574
                self.match(CPP14_v2Parser.Reinterpret_cast)
                self.state = 575
                self.match(CPP14_v2Parser.Less)
                self.state = 576
                self.thetypeid()
                self.state = 577
                self.match(CPP14_v2Parser.Greater)
                self.state = 578
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 579
                self.expression(0)
                self.state = 580
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Postfixexpression18Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 582
                self.match(CPP14_v2Parser.Const_cast)
                self.state = 583
                self.match(CPP14_v2Parser.Less)
                self.state = 584
                self.thetypeid()
                self.state = 585
                self.match(CPP14_v2Parser.Greater)
                self.state = 586
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 587
                self.expression(0)
                self.state = 588
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Postfixexpression19Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 590
                self.typeidofthetypeid()
                self.state = 591
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 592
                self.expression(0)
                self.state = 593
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Postfixexpression20Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 595
                self.typeidofthetypeid()
                self.state = 596
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 597
                self.thetypeid()
                self.state = 598
                self.match(CPP14_v2Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 640
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Postfixexpression2Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 602
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 603
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 604
                        self.expression(0)
                        self.state = 605
                        self.match(CPP14_v2Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Postfixexpression3Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 607
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 608
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 609
                        self.bracedinitlist()
                        self.state = 610
                        self.match(CPP14_v2Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14_v2Parser.Postfixexpression4Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 612
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 613
                        self.match(CPP14_v2Parser.LeftParen)
                        self.state = 615
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 614
                            self.expressionlist()


                        self.state = 617
                        self.match(CPP14_v2Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14_v2Parser.Postfixexpression9Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 618
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 619
                        self.match(CPP14_v2Parser.Dot)
                        self.state = 621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14_v2Parser.Template:
                            self.state = 620
                            self.match(CPP14_v2Parser.Template)


                        self.state = 623
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14_v2Parser.Postfixexpression10Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 624
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 625
                        self.match(CPP14_v2Parser.Arrow)
                        self.state = 627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14_v2Parser.Template:
                            self.state = 626
                            self.match(CPP14_v2Parser.Template)


                        self.state = 629
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14_v2Parser.Postfixexpression11Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 630
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 631
                        self.match(CPP14_v2Parser.Dot)
                        self.state = 632
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14_v2Parser.Postfixexpression12Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 633
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 634
                        self.match(CPP14_v2Parser.Arrow)
                        self.state = 635
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14_v2Parser.Postfixexpression13Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 636
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 637
                        self.match(CPP14_v2Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14_v2Parser.Postfixexpression14Context(self, CPP14_v2Parser.PostfixexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 638
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 639
                        self.match(CPP14_v2Parser.MinusMinus)
                        pass

             
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeidofexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14_v2Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeidofexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofexpr" ):
                listener.enterTypeidofexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofexpr" ):
                listener.exitTypeidofexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofexpr" ):
                return visitor.visitTypeidofexpr(self)
            else:
                return visitor.visitChildren(self)




    def typeidofexpr(self):

        localctx = CPP14_v2Parser.TypeidofexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeidofexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(CPP14_v2Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidofthetypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14_v2Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeidofthetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofthetypeid" ):
                listener.enterTypeidofthetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofthetypeid" ):
                listener.exitTypeidofthetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofthetypeid" ):
                return visitor.visitTypeidofthetypeid(self)
            else:
                return visitor.visitChildren(self)




    def typeidofthetypeid(self):

        localctx = CPP14_v2Parser.TypeidofthetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeidofthetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(CPP14_v2Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionlist" ):
                return visitor.visitExpressionlist(self)
            else:
                return visitor.visitChildren(self)




    def expressionlist(self):

        localctx = CPP14_v2Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudodestructornameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_pseudodestructorname

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Pseudodestructorname1Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14_v2Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,i)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname1" ):
                listener.enterPseudodestructorname1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname1" ):
                listener.exitPseudodestructorname1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname1" ):
                return visitor.visitPseudodestructorname1(self)
            else:
                return visitor.visitChildren(self)


    class Pseudodestructorname4Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname4" ):
                listener.enterPseudodestructorname4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname4" ):
                listener.exitPseudodestructorname4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname4" ):
                return visitor.visitPseudodestructorname4(self)
            else:
                return visitor.visitChildren(self)


    class Pseudodestructorname2Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname2" ):
                listener.enterPseudodestructorname2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname2" ):
                listener.exitPseudodestructorname2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname2" ):
                return visitor.visitPseudodestructorname2(self)
            else:
                return visitor.visitChildren(self)


    class Pseudodestructorname3Context(PseudodestructornameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PseudodestructornameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)
        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname3" ):
                listener.enterPseudodestructorname3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname3" ):
                listener.exitPseudodestructorname3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname3" ):
                return visitor.visitPseudodestructorname3(self)
            else:
                return visitor.visitChildren(self)



    def pseudodestructorname(self):

        localctx = CPP14_v2Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Pseudodestructorname1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 651
                    self.nestednamespecifier(0)


                self.state = 654
                self.thetypename()
                self.state = 655
                self.match(CPP14_v2Parser.Doublecolon)
                self.state = 656
                self.match(CPP14_v2Parser.Tilde)
                self.state = 657
                self.thetypename()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Pseudodestructorname2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.nestednamespecifier(0)
                self.state = 660
                self.match(CPP14_v2Parser.Template)
                self.state = 661
                self.simpletemplateid()
                self.state = 662
                self.match(CPP14_v2Parser.Doublecolon)
                self.state = 663
                self.match(CPP14_v2Parser.Tilde)
                self.state = 664
                self.thetypename()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Pseudodestructorname3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Decltype or _la==CPP14_v2Parser.Doublecolon or _la==CPP14_v2Parser.Identifier:
                    self.state = 666
                    self.nestednamespecifier(0)


                self.state = 669
                self.match(CPP14_v2Parser.Tilde)
                self.state = 670
                self.thetypename()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Pseudodestructorname4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self.match(CPP14_v2Parser.Tilde)
                self.state = 672
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unaryexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unaryexpression9Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noexceptexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoexceptexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression9" ):
                listener.enterUnaryexpression9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression9" ):
                listener.exitUnaryexpression9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression9" ):
                return visitor.visitUnaryexpression9(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression10Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression10" ):
                listener.enterUnaryexpression10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression10" ):
                listener.exitUnaryexpression10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression10" ):
                return visitor.visitUnaryexpression10(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression11Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeleteexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression11" ):
                listener.enterUnaryexpression11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression11" ):
                listener.exitUnaryexpression11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression11" ):
                return visitor.visitUnaryexpression11(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression7Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Sizeof(self):
            return self.getToken(CPP14_v2Parser.Sizeof, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression7" ):
                listener.enterUnaryexpression7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression7" ):
                listener.exitUnaryexpression7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression7" ):
                return visitor.visitUnaryexpression7(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression8Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Alignof(self):
            return self.getToken(CPP14_v2Parser.Alignof, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression8" ):
                listener.enterUnaryexpression8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression8" ):
                listener.exitUnaryexpression8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression8" ):
                return visitor.visitUnaryexpression8(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression1Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PostfixexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression1" ):
                listener.enterUnaryexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression1" ):
                listener.exitUnaryexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression1" ):
                return visitor.visitUnaryexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression2Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(CPP14_v2Parser.PlusPlus, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression2" ):
                listener.enterUnaryexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression2" ):
                listener.exitUnaryexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression2" ):
                return visitor.visitUnaryexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression5Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Sizeof(self):
            return self.getToken(CPP14_v2Parser.Sizeof, 0)
        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnaryexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression5" ):
                listener.enterUnaryexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression5" ):
                listener.exitUnaryexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression5" ):
                return visitor.visitUnaryexpression5(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression6Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Sizeof(self):
            return self.getToken(CPP14_v2Parser.Sizeof, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression6" ):
                listener.enterUnaryexpression6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression6" ):
                listener.exitUnaryexpression6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression6" ):
                return visitor.visitUnaryexpression6(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression3Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(CPP14_v2Parser.MinusMinus, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression3" ):
                listener.enterUnaryexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression3" ):
                listener.exitUnaryexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression3" ):
                return visitor.visitUnaryexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Unaryexpression4Context(UnaryexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnaryoperatorContext,0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression4" ):
                listener.enterUnaryexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression4" ):
                listener.exitUnaryexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression4" ):
                return visitor.visitUnaryexpression4(self)
            else:
                return visitor.visitChildren(self)



    def unaryexpression(self):

        localctx = CPP14_v2Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unaryexpression)
        try:
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Unaryexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Unaryexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.match(CPP14_v2Parser.PlusPlus)
                self.state = 677
                self.castexpression()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Unaryexpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 678
                self.match(CPP14_v2Parser.MinusMinus)
                self.state = 679
                self.castexpression()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Unaryexpression4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                self.unaryoperator()
                self.state = 681
                self.castexpression()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Unaryexpression5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 683
                self.match(CPP14_v2Parser.Sizeof)
                self.state = 684
                self.unaryexpression()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Unaryexpression6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 685
                self.match(CPP14_v2Parser.Sizeof)
                self.state = 686
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 687
                self.thetypeid()
                self.state = 688
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Unaryexpression7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 690
                self.match(CPP14_v2Parser.Sizeof)
                self.state = 691
                self.match(CPP14_v2Parser.Ellipsis)
                self.state = 692
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 693
                self.match(CPP14_v2Parser.Identifier)
                self.state = 694
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Unaryexpression8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 695
                self.match(CPP14_v2Parser.Alignof)
                self.state = 696
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 697
                self.thetypeid()
                self.state = 698
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Unaryexpression9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 700
                self.noexceptexpression()
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Unaryexpression10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 701
                self.newexpression()
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Unaryexpression11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 702
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unaryoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Unaryoperator5Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator5" ):
                listener.enterUnaryoperator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator5" ):
                listener.exitUnaryoperator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator5" ):
                return visitor.visitUnaryoperator5(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator6Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator6" ):
                listener.enterUnaryoperator6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator6" ):
                listener.exitUnaryoperator6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator6" ):
                return visitor.visitUnaryoperator6(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator3Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator3" ):
                listener.enterUnaryoperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator3" ):
                listener.exitUnaryoperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator3" ):
                return visitor.visitUnaryoperator3(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator4Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(CPP14_v2Parser.Plus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator4" ):
                listener.enterUnaryoperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator4" ):
                listener.exitUnaryoperator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator4" ):
                return visitor.visitUnaryoperator4(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator7Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(CPP14_v2Parser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator7" ):
                listener.enterUnaryoperator7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator7" ):
                listener.exitUnaryoperator7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator7" ):
                return visitor.visitUnaryoperator7(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator8Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator8" ):
                listener.enterUnaryoperator8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator8" ):
                listener.exitUnaryoperator8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator8" ):
                return visitor.visitUnaryoperator8(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator1Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Or(self):
            return self.getToken(CPP14_v2Parser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator1" ):
                listener.enterUnaryoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator1" ):
                listener.exitUnaryoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator1" ):
                return visitor.visitUnaryoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Unaryoperator2Context(UnaryoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UnaryoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator2" ):
                listener.enterUnaryoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator2" ):
                listener.exitUnaryoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator2" ):
                return visitor.visitUnaryoperator2(self)
            else:
                return visitor.visitChildren(self)



    def unaryoperator(self):

        localctx = CPP14_v2Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unaryoperator)
        try:
            self.state = 713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Or]:
                localctx = CPP14_v2Parser.Unaryoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.match(CPP14_v2Parser.Or)
                pass
            elif token in [CPP14_v2Parser.Star]:
                localctx = CPP14_v2Parser.Unaryoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.match(CPP14_v2Parser.Star)
                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Unaryoperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.match(CPP14_v2Parser.And)
                pass
            elif token in [CPP14_v2Parser.Plus]:
                localctx = CPP14_v2Parser.Unaryoperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 708
                self.match(CPP14_v2Parser.Plus)
                pass
            elif token in [CPP14_v2Parser.T__0]:
                localctx = CPP14_v2Parser.Unaryoperator5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 709
                self.match(CPP14_v2Parser.T__0)
                pass
            elif token in [CPP14_v2Parser.Tilde]:
                localctx = CPP14_v2Parser.Unaryoperator6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 710
                self.match(CPP14_v2Parser.Tilde)
                pass
            elif token in [CPP14_v2Parser.Minus]:
                localctx = CPP14_v2Parser.Unaryoperator7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 711
                self.match(CPP14_v2Parser.Minus)
                pass
            elif token in [CPP14_v2Parser.T__1]:
                localctx = CPP14_v2Parser.Unaryoperator8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 712
                self.match(CPP14_v2Parser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Newexpression1Context(NewexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)
        def newtypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewtypeidContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def newplacement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewplacementContext,0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression1" ):
                listener.enterNewexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression1" ):
                listener.exitNewexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression1" ):
                return visitor.visitNewexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Newexpression2Context(NewexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def newplacement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewplacementContext,0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression2" ):
                listener.enterNewexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression2" ):
                listener.exitNewexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression2" ):
                return visitor.visitNewexpression2(self)
            else:
                return visitor.visitChildren(self)



    def newexpression(self):

        localctx = CPP14_v2Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Newexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 715
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 718
                self.match(CPP14_v2Parser.New)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.LeftParen:
                    self.state = 719
                    self.newplacement()


                self.state = 722
                self.newtypeid()
                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.newinitializer()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Newexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 726
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 729
                self.match(CPP14_v2Parser.New)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.newplacement()


                self.state = 733
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 734
                self.thetypeid()
                self.state = 735
                self.match(CPP14_v2Parser.RightParen)
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 736
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewplacement" ):
                return visitor.visitNewplacement(self)
            else:
                return visitor.visitChildren(self)




    def newplacement(self):

        localctx = CPP14_v2Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 742
            self.expressionlist()
            self.state = 743
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtypeid" ):
                return visitor.visitNewtypeid(self)
            else:
                return visitor.visitChildren(self)




    def newtypeid(self):

        localctx = CPP14_v2Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.typespecifierseq()
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 746
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Newdeclarator2Context(NewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrnewdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator2" ):
                listener.enterNewdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator2" ):
                listener.exitNewdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewdeclarator2" ):
                return visitor.visitNewdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Newdeclarator1Context(NewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NewdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator1" ):
                listener.enterNewdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator1" ):
                listener.exitNewdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewdeclarator1" ):
                return visitor.visitNewdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def newdeclarator(self):

        localctx = CPP14_v2Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newdeclarator)
        try:
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Decltype, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Newdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.ptroperator()
                self.state = 751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 750
                    self.newdeclarator()


                pass
            elif token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Newdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrnewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrnewdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrnewdeclarator2Context(NoptrnewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrnewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrnewdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator2" ):
                listener.enterNoptrnewdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator2" ):
                listener.exitNoptrnewdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator2" ):
                return visitor.visitNoptrnewdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Noptrnewdeclarator1Context(NoptrnewdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrnewdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator1" ):
                listener.enterNoptrnewdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator1" ):
                listener.exitNoptrnewdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator1" ):
                return visitor.visitNoptrnewdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Noptrnewdeclarator1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 757
            self.match(CPP14_v2Parser.LeftBracket)
            self.state = 758
            self.expression(0)
            self.state = 759
            self.match(CPP14_v2Parser.RightBracket)
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 760
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Noptrnewdeclarator2Context(self, CPP14_v2Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 763
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 764
                    self.match(CPP14_v2Parser.LeftBracket)
                    self.state = 765
                    self.constantexpression()
                    self.state = 766
                    self.match(CPP14_v2Parser.RightBracket)
                    self.state = 768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                    if la_ == 1:
                        self.state = 767
                        self.attributespecifierseq(0)

             
                self.state = 774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_newinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Newinitializer2Context(NewinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer2" ):
                listener.enterNewinitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer2" ):
                listener.exitNewinitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer2" ):
                return visitor.visitNewinitializer2(self)
            else:
                return visitor.visitChildren(self)


    class Newinitializer1Context(NewinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NewinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer1" ):
                listener.enterNewinitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer1" ):
                listener.exitNewinitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer1" ):
                return visitor.visitNewinitializer1(self)
            else:
                return visitor.visitChildren(self)



    def newinitializer(self):

        localctx = CPP14_v2Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Newinitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 776
                    self.expressionlist()


                self.state = 779
                self.match(CPP14_v2Parser.RightParen)
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Newinitializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_deleteexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Deleteexpression1Context(DeleteexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeleteexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression1" ):
                listener.enterDeleteexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression1" ):
                listener.exitDeleteexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression1" ):
                return visitor.visitDeleteexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Deleteexpression2Context(DeleteexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeleteexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)

        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression2" ):
                listener.enterDeleteexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression2" ):
                listener.exitDeleteexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression2" ):
                return visitor.visitDeleteexpression2(self)
            else:
                return visitor.visitChildren(self)



    def deleteexpression(self):

        localctx = CPP14_v2Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Deleteexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 783
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 786
                self.match(CPP14_v2Parser.Delete)
                self.state = 787
                self.castexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Deleteexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Doublecolon:
                    self.state = 788
                    self.match(CPP14_v2Parser.Doublecolon)


                self.state = 791
                self.match(CPP14_v2Parser.Delete)
                self.state = 792
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 793
                self.match(CPP14_v2Parser.RightBracket)
                self.state = 794
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoexceptexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14_v2Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptexpression" ):
                return visitor.visitNoexceptexpression(self)
            else:
                return visitor.visitChildren(self)




    def noexceptexpression(self):

        localctx = CPP14_v2Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(CPP14_v2Parser.Noexcept)
            self.state = 798
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 799
            self.expression(0)
            self.state = 800
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_castexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Castexpression2Context(CastexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CastexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression2" ):
                listener.enterCastexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression2" ):
                listener.exitCastexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression2" ):
                return visitor.visitCastexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Castexpression1Context(CastexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CastexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnaryexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression1" ):
                listener.enterCastexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression1" ):
                listener.exitCastexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression1" ):
                return visitor.visitCastexpression1(self)
            else:
                return visitor.visitChildren(self)



    def castexpression(self):

        localctx = CPP14_v2Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_castexpression)
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Castexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.unaryexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Castexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 804
                self.thetypeid()
                self.state = 805
                self.match(CPP14_v2Parser.RightParen)
                self.state = 806
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_pmexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Pmexpression2Context(PmexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PmexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)

        def DotStar(self):
            return self.getToken(CPP14_v2Parser.DotStar, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression2" ):
                listener.enterPmexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression2" ):
                listener.exitPmexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression2" ):
                return visitor.visitPmexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Pmexpression1Context(PmexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PmexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression1" ):
                listener.enterPmexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression1" ):
                listener.exitPmexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression1" ):
                return visitor.visitPmexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Pmexpression3Context(PmexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PmexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)

        def ArrowStar(self):
            return self.getToken(CPP14_v2Parser.ArrowStar, 0)
        def castexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CastexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression3" ):
                listener.enterPmexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression3" ):
                listener.exitPmexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression3" ):
                return visitor.visitPmexpression3(self)
            else:
                return visitor.visitChildren(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Pmexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 811
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Pmexpression2Context(self, CPP14_v2Parser.PmexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 813
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 814
                        self.match(CPP14_v2Parser.DotStar)
                        self.state = 815
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Pmexpression3Context(self, CPP14_v2Parser.PmexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 816
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 817
                        self.match(CPP14_v2Parser.ArrowStar)
                        self.state = 818
                        self.castexpression()
                        pass

             
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_multiplicativeexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Multiplicativeexpression1Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression1" ):
                listener.enterMultiplicativeexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression1" ):
                listener.exitMultiplicativeexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression1" ):
                return visitor.visitMultiplicativeexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Multiplicativeexpression3Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)

        def Div(self):
            return self.getToken(CPP14_v2Parser.Div, 0)
        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression3" ):
                listener.enterMultiplicativeexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression3" ):
                listener.exitMultiplicativeexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression3" ):
                return visitor.visitMultiplicativeexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Multiplicativeexpression2Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)
        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression2" ):
                listener.enterMultiplicativeexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression2" ):
                listener.exitMultiplicativeexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression2" ):
                return visitor.visitMultiplicativeexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Multiplicativeexpression4Context(MultiplicativeexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MultiplicativeexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)

        def Mod(self):
            return self.getToken(CPP14_v2Parser.Mod, 0)
        def pmexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PmexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression4" ):
                listener.enterMultiplicativeexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression4" ):
                listener.exitMultiplicativeexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression4" ):
                return visitor.visitMultiplicativeexpression4(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Multiplicativeexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 825
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 836
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Multiplicativeexpression2Context(self, CPP14_v2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 827
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 828
                        self.match(CPP14_v2Parser.Star)
                        self.state = 829
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Multiplicativeexpression3Context(self, CPP14_v2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 830
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 831
                        self.match(CPP14_v2Parser.Div)
                        self.state = 832
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14_v2Parser.Multiplicativeexpression4Context(self, CPP14_v2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 833
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 834
                        self.match(CPP14_v2Parser.Mod)
                        self.state = 835
                        self.pmexpression(0)
                        pass

             
                self.state = 840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_additiveexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Additiveexpression3Context(AdditiveexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AdditiveexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)

        def Minus(self):
            return self.getToken(CPP14_v2Parser.Minus, 0)
        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression3" ):
                listener.enterAdditiveexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression3" ):
                listener.exitAdditiveexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression3" ):
                return visitor.visitAdditiveexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Additiveexpression2Context(AdditiveexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AdditiveexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)

        def Plus(self):
            return self.getToken(CPP14_v2Parser.Plus, 0)
        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression2" ):
                listener.enterAdditiveexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression2" ):
                listener.exitAdditiveexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression2" ):
                return visitor.visitAdditiveexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Additiveexpression1Context(AdditiveexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AdditiveexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MultiplicativeexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression1" ):
                listener.enterAdditiveexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression1" ):
                listener.exitAdditiveexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression1" ):
                return visitor.visitAdditiveexpression1(self)
            else:
                return visitor.visitChildren(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Additiveexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 842
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 850
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Additiveexpression2Context(self, CPP14_v2Parser.AdditiveexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 844
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 845
                        self.match(CPP14_v2Parser.Plus)
                        self.state = 846
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Additiveexpression3Context(self, CPP14_v2Parser.AdditiveexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 847
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 848
                        self.match(CPP14_v2Parser.Minus)
                        self.state = 849
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_shiftexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Shiftexpression2Context(ShiftexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)

        def shiftoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftoperatorContext,0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression2" ):
                listener.enterShiftexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression2" ):
                listener.exitShiftexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression2" ):
                return visitor.visitShiftexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Shiftexpression1Context(ShiftexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AdditiveexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression1" ):
                listener.enterShiftexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression1" ):
                listener.exitShiftexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression1" ):
                return visitor.visitShiftexpression1(self)
            else:
                return visitor.visitChildren(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Shiftexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 856
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Shiftexpression2Context(self, CPP14_v2Parser.ShiftexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                    self.state = 858
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 859
                    self.shiftoperator()
                    self.state = 860
                    self.additiveexpression(0) 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_shiftoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Shiftoperator1Context(ShiftoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShift(self):
            return self.getToken(CPP14_v2Parser.RightShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftoperator1" ):
                listener.enterShiftoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftoperator1" ):
                listener.exitShiftoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftoperator1" ):
                return visitor.visitShiftoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Shiftoperator2Context(ShiftoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ShiftoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShift(self):
            return self.getToken(CPP14_v2Parser.LeftShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftoperator2" ):
                listener.enterShiftoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftoperator2" ):
                listener.exitShiftoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftoperator2" ):
                return visitor.visitShiftoperator2(self)
            else:
                return visitor.visitChildren(self)



    def shiftoperator(self):

        localctx = CPP14_v2Parser.ShiftoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_shiftoperator)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.RightShift]:
                localctx = CPP14_v2Parser.Shiftoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.match(CPP14_v2Parser.RightShift)
                pass
            elif token in [CPP14_v2Parser.LeftShift]:
                localctx = CPP14_v2Parser.Shiftoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.match(CPP14_v2Parser.LeftShift)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_relationalexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Relationalexpression2Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression2" ):
                listener.enterRelationalexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression2" ):
                listener.exitRelationalexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression2" ):
                return visitor.visitRelationalexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression1Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression1" ):
                listener.enterRelationalexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression1" ):
                listener.exitRelationalexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression1" ):
                return visitor.visitRelationalexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression4Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def LessEqual(self):
            return self.getToken(CPP14_v2Parser.LessEqual, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression4" ):
                listener.enterRelationalexpression4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression4" ):
                listener.exitRelationalexpression4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression4" ):
                return visitor.visitRelationalexpression4(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression3Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression3" ):
                listener.enterRelationalexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression3" ):
                listener.exitRelationalexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression3" ):
                return visitor.visitRelationalexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Relationalexpression5Context(RelationalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RelationalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)

        def GreaterEqual(self):
            return self.getToken(CPP14_v2Parser.GreaterEqual, 0)
        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ShiftexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression5" ):
                listener.enterRelationalexpression5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression5" ):
                listener.exitRelationalexpression5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression5" ):
                return visitor.visitRelationalexpression5(self)
            else:
                return visitor.visitChildren(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Relationalexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 872
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 886
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Relationalexpression2Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 874
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 875
                        self.match(CPP14_v2Parser.Less)
                        self.state = 876
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Relationalexpression3Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 877
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 878
                        self.match(CPP14_v2Parser.Greater)
                        self.state = 879
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14_v2Parser.Relationalexpression4Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 880
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 881
                        self.match(CPP14_v2Parser.LessEqual)
                        self.state = 882
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14_v2Parser.Relationalexpression5Context(self, CPP14_v2Parser.RelationalexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 883
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 884
                        self.match(CPP14_v2Parser.GreaterEqual)
                        self.state = 885
                        self.shiftexpression(0)
                        pass

             
                self.state = 890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_equalityexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Equalityexpression1Context(EqualityexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EqualityexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression1" ):
                listener.enterEqualityexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression1" ):
                listener.exitEqualityexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression1" ):
                return visitor.visitEqualityexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Equalityexpression2Context(EqualityexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EqualityexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)

        def Equal(self):
            return self.getToken(CPP14_v2Parser.Equal, 0)
        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression2" ):
                listener.enterEqualityexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression2" ):
                listener.exitEqualityexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression2" ):
                return visitor.visitEqualityexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Equalityexpression3Context(EqualityexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EqualityexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)

        def NotEqual(self):
            return self.getToken(CPP14_v2Parser.NotEqual, 0)
        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RelationalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression3" ):
                listener.enterEqualityexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression3" ):
                listener.exitEqualityexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression3" ):
                return visitor.visitEqualityexpression3(self)
            else:
                return visitor.visitChildren(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Equalityexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 892
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 900
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Equalityexpression2Context(self, CPP14_v2Parser.EqualityexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 894
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 895
                        self.match(CPP14_v2Parser.Equal)
                        self.state = 896
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Equalityexpression3Context(self, CPP14_v2Parser.EqualityexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 897
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 898
                        self.match(CPP14_v2Parser.NotEqual)
                        self.state = 899
                        self.relationalexpression(0)
                        pass

             
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_andexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Andexpression2Context(AndexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AndexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AndexpressionContext,0)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression2" ):
                listener.enterAndexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression2" ):
                listener.exitAndexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression2" ):
                return visitor.visitAndexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Andexpression1Context(AndexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AndexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EqualityexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression1" ):
                listener.enterAndexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression1" ):
                listener.exitAndexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression1" ):
                return visitor.visitAndexpression1(self)
            else:
                return visitor.visitChildren(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Andexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 906
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Andexpression2Context(self, CPP14_v2Parser.AndexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 908
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 909
                    self.match(CPP14_v2Parser.And)
                    self.state = 910
                    self.equalityexpression(0) 
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_exclusiveorexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Exclusiveorexpression2Context(ExclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExclusiveorexpressionContext,0)

        def Caret(self):
            return self.getToken(CPP14_v2Parser.Caret, 0)
        def andexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AndexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression2" ):
                listener.enterExclusiveorexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression2" ):
                listener.exitExclusiveorexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression2" ):
                return visitor.visitExclusiveorexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Exclusiveorexpression1Context(ExclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AndexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression1" ):
                listener.enterExclusiveorexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression1" ):
                listener.exitExclusiveorexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression1" ):
                return visitor.visitExclusiveorexpression1(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Exclusiveorexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 917
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Exclusiveorexpression2Context(self, CPP14_v2Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 919
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 920
                    self.match(CPP14_v2Parser.Caret)
                    self.state = 921
                    self.andexpression(0) 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_inclusiveorexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Inclusiveorexpression1Context(InclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression1" ):
                listener.enterInclusiveorexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression1" ):
                listener.exitInclusiveorexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpression1" ):
                return visitor.visitInclusiveorexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Inclusiveorexpressio2Context(InclusiveorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InclusiveorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)

        def Or(self):
            return self.getToken(CPP14_v2Parser.Or, 0)
        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpressio2" ):
                listener.enterInclusiveorexpressio2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpressio2" ):
                listener.exitInclusiveorexpressio2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpressio2" ):
                return visitor.visitInclusiveorexpressio2(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Inclusiveorexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 928
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Inclusiveorexpressio2Context(self, CPP14_v2Parser.InclusiveorexpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 930
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 931
                    self.match(CPP14_v2Parser.Or)
                    self.state = 932
                    self.exclusiveorexpression(0) 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalandexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_logicalandexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Logicalandexpression2Context(LogicalandexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalandexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression2" ):
                listener.enterLogicalandexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression2" ):
                listener.exitLogicalandexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression2" ):
                return visitor.visitLogicalandexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Logicalandexpression3Context(LogicalandexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalandexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression3" ):
                listener.enterLogicalandexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression3" ):
                listener.exitLogicalandexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression3" ):
                return visitor.visitLogicalandexpression3(self)
            else:
                return visitor.visitChildren(self)


    class Logicalandexpression1Context(LogicalandexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalandexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InclusiveorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression1" ):
                listener.enterLogicalandexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression1" ):
                listener.exitLogicalandexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression1" ):
                return visitor.visitLogicalandexpression1(self)
            else:
                return visitor.visitChildren(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Logicalandexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 939
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 949
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 947
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Logicalandexpression2Context(self, CPP14_v2Parser.LogicalandexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                        self.state = 941
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 942
                        self.match(CPP14_v2Parser.T__2)
                        self.state = 943
                        self.inclusiveorexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Logicalandexpression3Context(self, CPP14_v2Parser.LogicalandexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                        self.state = 944
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 945
                        self.match(CPP14_v2Parser.T__3)
                        self.state = 946
                        self.inclusiveorexpression(0)
                        pass

             
                self.state = 951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_logicalorexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Logicalorexpression1Context(LogicalorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression1" ):
                listener.enterLogicalorexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression1" ):
                listener.exitLogicalorexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression1" ):
                return visitor.visitLogicalorexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Logicalorexpression2Context(LogicalorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression2" ):
                listener.enterLogicalorexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression2" ):
                listener.exitLogicalorexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression2" ):
                return visitor.visitLogicalorexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Logicalorexpression3Context(LogicalorexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LogicalorexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalandexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression3" ):
                listener.enterLogicalorexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression3" ):
                listener.exitLogicalorexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression3" ):
                return visitor.visitLogicalorexpression3(self)
            else:
                return visitor.visitChildren(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Logicalorexpression1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 953
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 961
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Logicalorexpression2Context(self, CPP14_v2Parser.LogicalorexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                        self.state = 955
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 956
                        self.match(CPP14_v2Parser.T__4)
                        self.state = 957
                        self.logicalandexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Logicalorexpression3Context(self, CPP14_v2Parser.LogicalorexpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                        self.state = 958
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 959
                        self.match(CPP14_v2Parser.T__5)
                        self.state = 960
                        self.logicalandexpression(0)
                        pass

             
                self.state = 965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conditionalexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Conditionalexpression1Context(ConditionalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ConditionalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression1" ):
                listener.enterConditionalexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression1" ):
                listener.exitConditionalexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalexpression1" ):
                return visitor.visitConditionalexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Conditionalexpression2Context(ConditionalexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ConditionalexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def Question(self):
            return self.getToken(CPP14_v2Parser.Question, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression2" ):
                listener.enterConditionalexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression2" ):
                listener.exitConditionalexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalexpression2" ):
                return visitor.visitConditionalexpression2(self)
            else:
                return visitor.visitChildren(self)



    def conditionalexpression(self):

        localctx = CPP14_v2Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_conditionalexpression)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Conditionalexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Conditionalexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.logicalorexpression(0)
                self.state = 968
                self.match(CPP14_v2Parser.Question)
                self.state = 969
                self.expression(0)
                self.state = 970
                self.match(CPP14_v2Parser.Colon)
                self.state = 971
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_assignmentexpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assignmentexpression1Context(AssignmentexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionalexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression1" ):
                listener.enterAssignmentexpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression1" ):
                listener.exitAssignmentexpression1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression1" ):
                return visitor.visitAssignmentexpression1(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentexpression2Context(AssignmentexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LogicalorexpressionContext,0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentoperatorContext,0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression2" ):
                listener.enterAssignmentexpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression2" ):
                listener.exitAssignmentexpression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression2" ):
                return visitor.visitAssignmentexpression2(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentexpression3Context(AssignmentexpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentexpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def throwexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThrowexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression3" ):
                listener.enterAssignmentexpression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression3" ):
                listener.exitAssignmentexpression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression3" ):
                return visitor.visitAssignmentexpression3(self)
            else:
                return visitor.visitChildren(self)



    def assignmentexpression(self):

        localctx = CPP14_v2Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentexpression)
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Assignmentexpression1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.conditionalexpression()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Assignmentexpression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.logicalorexpression(0)
                self.state = 977
                self.assignmentoperator()
                self.state = 978
                self.initializerclause()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Assignmentexpression3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 980
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_assignmentoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assignmentoperator6Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusAssign(self):
            return self.getToken(CPP14_v2Parser.MinusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator6" ):
                listener.enterAssignmentoperator6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator6" ):
                listener.exitAssignmentoperator6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator6" ):
                return visitor.visitAssignmentoperator6(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator11Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OrAssign(self):
            return self.getToken(CPP14_v2Parser.OrAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator11" ):
                listener.enterAssignmentoperator11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator11" ):
                listener.exitAssignmentoperator11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator11" ):
                return visitor.visitAssignmentoperator11(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator5Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusAssign(self):
            return self.getToken(CPP14_v2Parser.PlusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator5" ):
                listener.enterAssignmentoperator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator5" ):
                listener.exitAssignmentoperator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator5" ):
                return visitor.visitAssignmentoperator5(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator10Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XorAssign(self):
            return self.getToken(CPP14_v2Parser.XorAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator10" ):
                listener.enterAssignmentoperator10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator10" ):
                listener.exitAssignmentoperator10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator10" ):
                return visitor.visitAssignmentoperator10(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator8Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShiftAssign(self):
            return self.getToken(CPP14_v2Parser.LeftShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator8" ):
                listener.enterAssignmentoperator8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator8" ):
                listener.exitAssignmentoperator8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator8" ):
                return visitor.visitAssignmentoperator8(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator7Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShiftAssign(self):
            return self.getToken(CPP14_v2Parser.RightShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator7" ):
                listener.enterAssignmentoperator7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator7" ):
                listener.exitAssignmentoperator7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator7" ):
                return visitor.visitAssignmentoperator7(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator2Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StarAssign(self):
            return self.getToken(CPP14_v2Parser.StarAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator2" ):
                listener.enterAssignmentoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator2" ):
                listener.exitAssignmentoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator2" ):
                return visitor.visitAssignmentoperator2(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator1Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator1" ):
                listener.enterAssignmentoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator1" ):
                listener.exitAssignmentoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator1" ):
                return visitor.visitAssignmentoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator4Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ModAssign(self):
            return self.getToken(CPP14_v2Parser.ModAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator4" ):
                listener.enterAssignmentoperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator4" ):
                listener.exitAssignmentoperator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator4" ):
                return visitor.visitAssignmentoperator4(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator3Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DivAssign(self):
            return self.getToken(CPP14_v2Parser.DivAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator3" ):
                listener.enterAssignmentoperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator3" ):
                listener.exitAssignmentoperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator3" ):
                return visitor.visitAssignmentoperator3(self)
            else:
                return visitor.visitChildren(self)


    class Assignmentoperator9Context(AssignmentoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AssignmentoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AndAssign(self):
            return self.getToken(CPP14_v2Parser.AndAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator9" ):
                listener.enterAssignmentoperator9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator9" ):
                listener.exitAssignmentoperator9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator9" ):
                return visitor.visitAssignmentoperator9(self)
            else:
                return visitor.visitChildren(self)



    def assignmentoperator(self):

        localctx = CPP14_v2Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assignmentoperator)
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Assignmentoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.match(CPP14_v2Parser.Assign)
                pass
            elif token in [CPP14_v2Parser.StarAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.match(CPP14_v2Parser.StarAssign)
                pass
            elif token in [CPP14_v2Parser.DivAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                self.match(CPP14_v2Parser.DivAssign)
                pass
            elif token in [CPP14_v2Parser.ModAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 986
                self.match(CPP14_v2Parser.ModAssign)
                pass
            elif token in [CPP14_v2Parser.PlusAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 987
                self.match(CPP14_v2Parser.PlusAssign)
                pass
            elif token in [CPP14_v2Parser.MinusAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 988
                self.match(CPP14_v2Parser.MinusAssign)
                pass
            elif token in [CPP14_v2Parser.RightShiftAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 989
                self.match(CPP14_v2Parser.RightShiftAssign)
                pass
            elif token in [CPP14_v2Parser.LeftShiftAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 990
                self.match(CPP14_v2Parser.LeftShiftAssign)
                pass
            elif token in [CPP14_v2Parser.AndAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 991
                self.match(CPP14_v2Parser.AndAssign)
                pass
            elif token in [CPP14_v2Parser.XorAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 992
                self.match(CPP14_v2Parser.XorAssign)
                pass
            elif token in [CPP14_v2Parser.OrAssign]:
                localctx = CPP14_v2Parser.Assignmentoperator11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 993
                self.match(CPP14_v2Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1004
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 999
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1000
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1001
                    self.assignmentexpression() 
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantexpression" ):
                return visitor.visitConstantexpression(self)
            else:
                return visitor.visitChildren(self)




    def constantexpression(self):

        localctx = CPP14_v2Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TryblockContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CPP14_v2Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self.attributespecifierseq(0)


                self.state = 1013
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1014
                    self.attributespecifierseq(0)


                self.state = 1017
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1018
                    self.attributespecifierseq(0)


                self.state = 1021
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1022
                    self.attributespecifierseq(0)


                self.state = 1025
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1026
                    self.attributespecifierseq(0)


                self.state = 1029
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1030
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1031
                    self.attributespecifierseq(0)


                self.state = 1034
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_labeledstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Labeledstatement2Context(LabeledstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LabeledstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Case(self):
            return self.getToken(CPP14_v2Parser.Case, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement2" ):
                listener.enterLabeledstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement2" ):
                listener.exitLabeledstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement2" ):
                return visitor.visitLabeledstatement2(self)
            else:
                return visitor.visitChildren(self)


    class Labeledstatement3Context(LabeledstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LabeledstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Default(self):
            return self.getToken(CPP14_v2Parser.Default, 0)
        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement3" ):
                listener.enterLabeledstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement3" ):
                listener.exitLabeledstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement3" ):
                return visitor.visitLabeledstatement3(self)
            else:
                return visitor.visitChildren(self)


    class Labeledstatement1Context(LabeledstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LabeledstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement1" ):
                listener.enterLabeledstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement1" ):
                listener.exitLabeledstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement1" ):
                return visitor.visitLabeledstatement1(self)
            else:
                return visitor.visitChildren(self)



    def labeledstatement(self):

        localctx = CPP14_v2Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_labeledstatement)
        self._la = 0 # Token type
        try:
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Labeledstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1037
                    self.attributespecifierseq(0)


                self.state = 1040
                self.match(CPP14_v2Parser.Identifier)
                self.state = 1041
                self.match(CPP14_v2Parser.Colon)
                self.state = 1042
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Labeledstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1043
                    self.attributespecifierseq(0)


                self.state = 1046
                self.match(CPP14_v2Parser.Case)
                self.state = 1047
                self.constantexpression()
                self.state = 1048
                self.match(CPP14_v2Parser.Colon)
                self.state = 1049
                self.statement()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Labeledstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1051
                    self.attributespecifierseq(0)


                self.state = 1054
                self.match(CPP14_v2Parser.Default)
                self.state = 1055
                self.match(CPP14_v2Parser.Colon)
                self.state = 1056
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionstatement" ):
                return visitor.visitExpressionstatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionstatement(self):

        localctx = CPP14_v2Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 1059
                self.expression(0)


            self.state = 1062
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundstatement" ):
                return visitor.visitCompoundstatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundstatement(self):

        localctx = CPP14_v2Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Break) | (1 << CPP14_v2Parser.Case) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Continue) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Default) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Do) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.For) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Goto) | (1 << CPP14_v2Parser.If) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Return) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.Switch - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Thread_local - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Try - 64)) | (1 << (CPP14_v2Parser.Typedef - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Using - 64)) | (1 << (CPP14_v2Parser.Virtual - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.While - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Semi - 128)) | (1 << (CPP14_v2Parser.Ellipsis - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 1065
                self.statementseq(0)


            self.state = 1068
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_statementseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Statementseq1Context(StatementseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StatementseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq1" ):
                listener.enterStatementseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq1" ):
                listener.exitStatementseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq1" ):
                return visitor.visitStatementseq1(self)
            else:
                return visitor.visitChildren(self)


    class Statementseq2Context(StatementseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StatementseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementseqContext,0)

        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq2" ):
                listener.enterStatementseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq2" ):
                listener.exitStatementseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq2" ):
                return visitor.visitStatementseq2(self)
            else:
                return visitor.visitChildren(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Statementseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1071
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Statementseq2Context(self, CPP14_v2Parser.StatementseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1073
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1074
                    self.statement() 
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SelectionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_selectionstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Selectionstatement1Context(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(CPP14_v2Parser.If, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement1" ):
                listener.enterSelectionstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement1" ):
                listener.exitSelectionstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement1" ):
                return visitor.visitSelectionstatement1(self)
            else:
                return visitor.visitChildren(self)


    class Selectionstatement2Context(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(CPP14_v2Parser.If, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14_v2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,i)

        def Else(self):
            return self.getToken(CPP14_v2Parser.Else, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement2" ):
                listener.enterSelectionstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement2" ):
                listener.exitSelectionstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement2" ):
                return visitor.visitSelectionstatement2(self)
            else:
                return visitor.visitChildren(self)


    class Selectionstatement3Context(SelectionstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SelectionstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Switch(self):
            return self.getToken(CPP14_v2Parser.Switch, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement3" ):
                listener.enterSelectionstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement3" ):
                listener.exitSelectionstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement3" ):
                return visitor.visitSelectionstatement3(self)
            else:
                return visitor.visitChildren(self)



    def selectionstatement(self):

        localctx = CPP14_v2Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectionstatement)
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Selectionstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.match(CPP14_v2Parser.If)
                self.state = 1081
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1082
                self.condition()
                self.state = 1083
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1084
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Selectionstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1086
                self.match(CPP14_v2Parser.If)
                self.state = 1087
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1088
                self.condition()
                self.state = 1089
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1090
                self.statement()
                self.state = 1091
                self.match(CPP14_v2Parser.Else)
                self.state = 1092
                self.statement()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Selectionstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.match(CPP14_v2Parser.Switch)
                self.state = 1095
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1096
                self.condition()
                self.state = 1097
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1098
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = CPP14_v2Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1103
                    self.attributespecifierseq(0)


                self.state = 1106
                self.declspecifierseq()
                self.state = 1107
                self.declarator()
                self.state = 1108
                self.match(CPP14_v2Parser.Assign)
                self.state = 1109
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1111
                    self.attributespecifierseq(0)


                self.state = 1114
                self.declspecifierseq()
                self.state = 1115
                self.declarator()
                self.state = 1116
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_iterationstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Iterationstatement1Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(CPP14_v2Parser.While, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement1" ):
                listener.enterIterationstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement1" ):
                listener.exitIterationstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement1" ):
                return visitor.visitIterationstatement1(self)
            else:
                return visitor.visitChildren(self)


    class Iterationstatement4Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(CPP14_v2Parser.For, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ForrangedeclarationContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ForrangeinitializerContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement4" ):
                listener.enterIterationstatement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement4" ):
                listener.exitIterationstatement4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement4" ):
                return visitor.visitIterationstatement4(self)
            else:
                return visitor.visitChildren(self)


    class Iterationstatement3Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(CPP14_v2Parser.For, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ForinitstatementContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def condition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConditionContext,0)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement3" ):
                listener.enterIterationstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement3" ):
                listener.exitIterationstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement3" ):
                return visitor.visitIterationstatement3(self)
            else:
                return visitor.visitChildren(self)


    class Iterationstatement2Context(IterationstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.IterationstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(CPP14_v2Parser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StatementContext,0)

        def While(self):
            return self.getToken(CPP14_v2Parser.While, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement2" ):
                listener.enterIterationstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement2" ):
                listener.exitIterationstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement2" ):
                return visitor.visitIterationstatement2(self)
            else:
                return visitor.visitChildren(self)



    def iterationstatement(self):

        localctx = CPP14_v2Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Iterationstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(CPP14_v2Parser.While)
                self.state = 1121
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1122
                self.condition()
                self.state = 1123
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1124
                self.statement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Iterationstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(CPP14_v2Parser.Do)
                self.state = 1127
                self.statement()
                self.state = 1128
                self.match(CPP14_v2Parser.While)
                self.state = 1129
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1130
                self.expression(0)
                self.state = 1131
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1132
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Iterationstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.match(CPP14_v2Parser.For)
                self.state = 1135
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1136
                self.forinitstatement()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof) | (1 << CPP14_v2Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Thread_local - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typedef - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Virtual - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1137
                    self.condition()


                self.state = 1140
                self.match(CPP14_v2Parser.Semi)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1141
                    self.expression(0)


                self.state = 1144
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1145
                self.statement()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Iterationstatement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1147
                self.match(CPP14_v2Parser.For)
                self.state = 1148
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1149
                self.forrangedeclaration()
                self.state = 1150
                self.match(CPP14_v2Parser.Colon)
                self.state = 1151
                self.forrangeinitializer()
                self.state = 1152
                self.match(CPP14_v2Parser.RightParen)
                self.state = 1153
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForinitstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_forinitstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Forinitstatement1Context(ForinitstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForinitstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionstatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement1" ):
                listener.enterForinitstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement1" ):
                listener.exitForinitstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement1" ):
                return visitor.visitForinitstatement1(self)
            else:
                return visitor.visitChildren(self)


    class Forinitstatement2Context(ForinitstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForinitstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpledeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement2" ):
                listener.enterForinitstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement2" ):
                listener.exitForinitstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement2" ):
                return visitor.visitForinitstatement2(self)
            else:
                return visitor.visitChildren(self)



    def forinitstatement(self):

        localctx = CPP14_v2Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forinitstatement)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Forinitstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.expressionstatement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Forinitstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangedeclaration" ):
                return visitor.visitForrangedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forrangedeclaration(self):

        localctx = CPP14_v2Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1161
                self.attributespecifierseq(0)


            self.state = 1164
            self.declspecifierseq()
            self.state = 1165
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangeinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_forrangeinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Forrangeinitialize2Context(ForrangeinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForrangeinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitialize2" ):
                listener.enterForrangeinitialize2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitialize2" ):
                listener.exitForrangeinitialize2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitialize2" ):
                return visitor.visitForrangeinitialize2(self)
            else:
                return visitor.visitChildren(self)


    class Forrangeinitializer1Context(ForrangeinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ForrangeinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer1" ):
                listener.enterForrangeinitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer1" ):
                listener.exitForrangeinitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitializer1" ):
                return visitor.visitForrangeinitializer1(self)
            else:
                return visitor.visitChildren(self)



    def forrangeinitializer(self):

        localctx = CPP14_v2Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forrangeinitializer)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__0, CPP14_v2Parser.T__1, CPP14_v2Parser.Alignof, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Const_cast, CPP14_v2Parser.Decltype, CPP14_v2Parser.Delete, CPP14_v2Parser.Double, CPP14_v2Parser.Dynamic_cast, CPP14_v2Parser.False1, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.New, CPP14_v2Parser.Noexcept, CPP14_v2Parser.Nullptr, CPP14_v2Parser.Operator, CPP14_v2Parser.Reinterpret_cast, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Sizeof, CPP14_v2Parser.Static_cast, CPP14_v2Parser.This, CPP14_v2Parser.Throw, CPP14_v2Parser.True1, CPP14_v2Parser.Typeid_, CPP14_v2Parser.Typename_, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket, CPP14_v2Parser.Plus, CPP14_v2Parser.Minus, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Or, CPP14_v2Parser.Tilde, CPP14_v2Parser.PlusPlus, CPP14_v2Parser.MinusMinus, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Forrangeinitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1167
                self.expression(0)
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Forrangeinitialize2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_jumpstatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Jumpstatement5Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Goto(self):
            return self.getToken(CPP14_v2Parser.Goto, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement5" ):
                listener.enterJumpstatement5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement5" ):
                listener.exitJumpstatement5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement5" ):
                return visitor.visitJumpstatement5(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement4Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Return(self):
            return self.getToken(CPP14_v2Parser.Return, 0)
        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement4" ):
                listener.enterJumpstatement4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement4" ):
                listener.exitJumpstatement4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement4" ):
                return visitor.visitJumpstatement4(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement3Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Return(self):
            return self.getToken(CPP14_v2Parser.Return, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement3" ):
                listener.enterJumpstatement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement3" ):
                listener.exitJumpstatement3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement3" ):
                return visitor.visitJumpstatement3(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement2Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Continue(self):
            return self.getToken(CPP14_v2Parser.Continue, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement2" ):
                listener.enterJumpstatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement2" ):
                listener.exitJumpstatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement2" ):
                return visitor.visitJumpstatement2(self)
            else:
                return visitor.visitChildren(self)


    class Jumpstatement1Context(JumpstatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.JumpstatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Break(self):
            return self.getToken(CPP14_v2Parser.Break, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement1" ):
                listener.enterJumpstatement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement1" ):
                listener.exitJumpstatement1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement1" ):
                return visitor.visitJumpstatement1(self)
            else:
                return visitor.visitChildren(self)



    def jumpstatement(self):

        localctx = CPP14_v2Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Jumpstatement1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.match(CPP14_v2Parser.Break)
                self.state = 1172
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Jumpstatement2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(CPP14_v2Parser.Continue)
                self.state = 1174
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Jumpstatement3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1175
                self.match(CPP14_v2Parser.Return)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1176
                    self.expression(0)


                self.state = 1179
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Jumpstatement4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1180
                self.match(CPP14_v2Parser.Return)
                self.state = 1181
                self.bracedinitlist()
                self.state = 1182
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Jumpstatement5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1184
                self.match(CPP14_v2Parser.Goto)
                self.state = 1185
                self.match(CPP14_v2Parser.Identifier)
                self.state = 1186
                self.match(CPP14_v2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationstatement" ):
                return visitor.visitDeclarationstatement(self)
            else:
                return visitor.visitChildren(self)




    def declarationstatement(self):

        localctx = CPP14_v2Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declarationseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Declarationseq2Context(DeclarationseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq2" ):
                listener.enterDeclarationseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq2" ):
                listener.exitDeclarationseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq2" ):
                return visitor.visitDeclarationseq2(self)
            else:
                return visitor.visitChildren(self)


    class Declarationseq1Context(DeclarationseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq1" ):
                listener.enterDeclarationseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq1" ):
                listener.exitDeclarationseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq1" ):
                return visitor.visitDeclarationseq1(self)
            else:
                return visitor.visitChildren(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Declarationseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1192
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1198
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Declarationseq2Context(self, CPP14_v2Parser.DeclarationseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1194
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1195
                    self.declaration() 
                self.state = 1200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declaration1Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BlockdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration1" ):
                listener.enterDeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration1" ):
                listener.exitDeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration1" ):
                return visitor.visitDeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Declaration9Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration9" ):
                listener.enterDeclaration9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration9" ):
                listener.exitDeclaration9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration9" ):
                return visitor.visitDeclaration9(self)
            else:
                return visitor.visitChildren(self)


    class Declaration8Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EmptydeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration8" ):
                listener.enterDeclaration8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration8" ):
                listener.exitDeclaration8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration8" ):
                return visitor.visitDeclaration8(self)
            else:
                return visitor.visitChildren(self)


    class Declaration7Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration7" ):
                listener.enterDeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration7" ):
                listener.exitDeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration7" ):
                return visitor.visitDeclaration7(self)
            else:
                return visitor.visitChildren(self)


    class Declaration6Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LinkagespecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration6" ):
                listener.enterDeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration6" ):
                listener.exitDeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration6" ):
                return visitor.visitDeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class Declaration5Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExplicitspecializationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration5" ):
                listener.enterDeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration5" ):
                listener.exitDeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration5" ):
                return visitor.visitDeclaration5(self)
            else:
                return visitor.visitChildren(self)


    class Declaration4Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExplicitinstantiationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration4" ):
                listener.enterDeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration4" ):
                listener.exitDeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration4" ):
                return visitor.visitDeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class Declaration3Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplatedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration3" ):
                listener.enterDeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration3" ):
                listener.exitDeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration3" ):
                return visitor.visitDeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Declaration2Context(DeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctiondefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration2" ):
                listener.enterDeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration2" ):
                listener.exitDeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration2" ):
                return visitor.visitDeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def declaration(self):

        localctx = CPP14_v2Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declaration)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Declaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.blockdeclaration()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Declaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.functiondefinition()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Declaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.templatedeclaration()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Declaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1204
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Declaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1205
                self.explicitspecialization()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Declaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1206
                self.linkagespecification()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Declaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1207
                self.namespacedefinition()
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Declaration8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1208
                self.emptydeclaration()
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Declaration9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1209
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_blockdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Blockdeclaration4Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UsingdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration4" ):
                listener.enterBlockdeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration4" ):
                listener.exitBlockdeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration4" ):
                return visitor.visitBlockdeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration3Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacealiasdefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration3" ):
                listener.enterBlockdeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration3" ):
                listener.exitBlockdeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration3" ):
                return visitor.visitBlockdeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration2Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AsmdefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration2" ):
                listener.enterBlockdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration2" ):
                listener.exitBlockdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration2" ):
                return visitor.visitBlockdeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration1Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpledeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration1" ):
                listener.enterBlockdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration1" ):
                listener.exitBlockdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration1" ):
                return visitor.visitBlockdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration8Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OpaqueenumdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration8" ):
                listener.enterBlockdeclaration8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration8" ):
                listener.exitBlockdeclaration8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration8" ):
                return visitor.visitBlockdeclaration8(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration7Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AliasdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration7" ):
                listener.enterBlockdeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration7" ):
                listener.exitBlockdeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration7" ):
                return visitor.visitBlockdeclaration7(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration6Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.Static_assertdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration6" ):
                listener.enterBlockdeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration6" ):
                listener.exitBlockdeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration6" ):
                return visitor.visitBlockdeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class Blockdeclaration5Context(BlockdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BlockdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdirective(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UsingdirectiveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration5" ):
                listener.enterBlockdeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration5" ):
                listener.exitBlockdeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration5" ):
                return visitor.visitBlockdeclaration5(self)
            else:
                return visitor.visitChildren(self)



    def blockdeclaration(self):

        localctx = CPP14_v2Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_blockdeclaration)
        try:
            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Blockdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.simpledeclaration()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Blockdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.asmdefinition()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Blockdeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1214
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Blockdeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1215
                self.usingdeclaration()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Blockdeclaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1216
                self.usingdirective()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Blockdeclaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1217
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Blockdeclaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1218
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Blockdeclaration8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1219
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasdeclaration" ):
                return visitor.visitAliasdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def aliasdeclaration(self):

        localctx = CPP14_v2Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(CPP14_v2Parser.Using)
            self.state = 1223
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1224
                self.attributespecifierseq(0)


            self.state = 1227
            self.match(CPP14_v2Parser.Assign)
            self.state = 1228
            self.thetypeid()
            self.state = 1229
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpledeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simpledeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simpledeclaration1Context(SimpledeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpledeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration1" ):
                listener.enterSimpledeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration1" ):
                listener.exitSimpledeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration1" ):
                return visitor.visitSimpledeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Simpledeclaration2Context(SimpledeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpledeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorlistContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration2" ):
                listener.enterSimpledeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration2" ):
                listener.exitSimpledeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration2" ):
                return visitor.visitSimpledeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def simpledeclaration(self):

        localctx = CPP14_v2Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Constexpr, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Enum, CPP14_v2Parser.Explicit, CPP14_v2Parser.Extern, CPP14_v2Parser.Float, CPP14_v2Parser.Friend, CPP14_v2Parser.Inline, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Mutable, CPP14_v2Parser.Operator, CPP14_v2Parser.Register, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Static, CPP14_v2Parser.Struct, CPP14_v2Parser.Thread_local, CPP14_v2Parser.Typedef, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Virtual, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Tilde, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Semi, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Simpledeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1231
                    self.declspecifierseq()


                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Operator))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Tilde - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 1234
                    self.initdeclaratorlist(0)


                self.state = 1237
                self.match(CPP14_v2Parser.Semi)
                pass
            elif token in [CPP14_v2Parser.Alignas, CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Simpledeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.attributespecifierseq(0)
                self.state = 1240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1239
                    self.declspecifierseq()


                self.state = 1242
                self.initdeclaratorlist(0)
                self.state = 1243
                self.match(CPP14_v2Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_assertdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14_v2Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_assertdeclaration" ):
                return visitor.visitStatic_assertdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def static_assertdeclaration(self):

        localctx = CPP14_v2Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(CPP14_v2Parser.Static_assert)
            self.state = 1248
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1249
            self.constantexpression()
            self.state = 1250
            self.match(CPP14_v2Parser.Comma)
            self.state = 1251
            self.match(CPP14_v2Parser.Stringliteral)
            self.state = 1252
            self.match(CPP14_v2Parser.RightParen)
            self.state = 1253
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptydeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptydeclaration" ):
                return visitor.visitEmptydeclaration(self)
            else:
                return visitor.visitChildren(self)




    def emptydeclaration(self):

        localctx = CPP14_v2Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributedeclaration" ):
                return visitor.visitAttributedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def attributedeclaration(self):

        localctx = CPP14_v2Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.attributespecifierseq(0)
            self.state = 1258
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declspecifier1Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def storageclassspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.StorageclassspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier1" ):
                listener.enterDeclspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier1" ):
                listener.exitDeclspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier1" ):
                return visitor.visitDeclspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier2Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier2" ):
                listener.enterDeclspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier2" ):
                listener.exitDeclspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier2" ):
                return visitor.visitDeclspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier3Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctionspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier3" ):
                listener.enterDeclspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier3" ):
                listener.exitDeclspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier3" ):
                return visitor.visitDeclspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier4Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Friend(self):
            return self.getToken(CPP14_v2Parser.Friend, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier4" ):
                listener.enterDeclspecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier4" ):
                listener.exitDeclspecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier4" ):
                return visitor.visitDeclspecifier4(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier5Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typedef(self):
            return self.getToken(CPP14_v2Parser.Typedef, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier5" ):
                listener.enterDeclspecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier5" ):
                listener.exitDeclspecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier5" ):
                return visitor.visitDeclspecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifier6Context(DeclspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Constexpr(self):
            return self.getToken(CPP14_v2Parser.Constexpr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier6" ):
                listener.enterDeclspecifier6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier6" ):
                listener.exitDeclspecifier6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier6" ):
                return visitor.visitDeclspecifier6(self)
            else:
                return visitor.visitChildren(self)



    def declspecifier(self):

        localctx = CPP14_v2Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declspecifier)
        try:
            self.state = 1266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Extern, CPP14_v2Parser.Mutable, CPP14_v2Parser.Register, CPP14_v2Parser.Static, CPP14_v2Parser.Thread_local]:
                localctx = CPP14_v2Parser.Declspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self.storageclassspecifier()
                pass
            elif token in [CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Enum, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Struct, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Declspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.typespecifier()
                pass
            elif token in [CPP14_v2Parser.Explicit, CPP14_v2Parser.Inline, CPP14_v2Parser.Virtual]:
                localctx = CPP14_v2Parser.Declspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1262
                self.functionspecifier()
                pass
            elif token in [CPP14_v2Parser.Friend]:
                localctx = CPP14_v2Parser.Declspecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1263
                self.match(CPP14_v2Parser.Friend)
                pass
            elif token in [CPP14_v2Parser.Typedef]:
                localctx = CPP14_v2Parser.Declspecifier5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1264
                self.match(CPP14_v2Parser.Typedef)
                pass
            elif token in [CPP14_v2Parser.Constexpr]:
                localctx = CPP14_v2Parser.Declspecifier6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1265
                self.match(CPP14_v2Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declspecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declspecifierseq2Context(DeclspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierContext,0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq2" ):
                listener.enterDeclspecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq2" ):
                listener.exitDeclspecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq2" ):
                return visitor.visitDeclspecifierseq2(self)
            else:
                return visitor.visitChildren(self)


    class Declspecifierseq1Context(DeclspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq1" ):
                listener.enterDeclspecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq1" ):
                listener.exitDeclspecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq1" ):
                return visitor.visitDeclspecifierseq1(self)
            else:
                return visitor.visitChildren(self)



    def declspecifierseq(self):

        localctx = CPP14_v2Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_declspecifierseq)
        try:
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Declspecifierseq1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.declspecifier()
                self.state = 1270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1269
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Declspecifierseq2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.declspecifier()
                self.state = 1273
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageclassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_storageclassspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Storageclassspecifier5Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Mutable(self):
            return self.getToken(CPP14_v2Parser.Mutable, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier5" ):
                listener.enterStorageclassspecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier5" ):
                listener.exitStorageclassspecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier5" ):
                return visitor.visitStorageclassspecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier1Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Register(self):
            return self.getToken(CPP14_v2Parser.Register, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier1" ):
                listener.enterStorageclassspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier1" ):
                listener.exitStorageclassspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier1" ):
                return visitor.visitStorageclassspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier2Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Static(self):
            return self.getToken(CPP14_v2Parser.Static, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier2" ):
                listener.enterStorageclassspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier2" ):
                listener.exitStorageclassspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier2" ):
                return visitor.visitStorageclassspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier3Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Thread_local(self):
            return self.getToken(CPP14_v2Parser.Thread_local, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier3" ):
                listener.enterStorageclassspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier3" ):
                listener.exitStorageclassspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier3" ):
                return visitor.visitStorageclassspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Storageclassspecifier4Context(StorageclassspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.StorageclassspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier4" ):
                listener.enterStorageclassspecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier4" ):
                listener.exitStorageclassspecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier4" ):
                return visitor.visitStorageclassspecifier4(self)
            else:
                return visitor.visitChildren(self)



    def storageclassspecifier(self):

        localctx = CPP14_v2Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_storageclassspecifier)
        try:
            self.state = 1282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Register]:
                localctx = CPP14_v2Parser.Storageclassspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(CPP14_v2Parser.Register)
                pass
            elif token in [CPP14_v2Parser.Static]:
                localctx = CPP14_v2Parser.Storageclassspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.match(CPP14_v2Parser.Static)
                pass
            elif token in [CPP14_v2Parser.Thread_local]:
                localctx = CPP14_v2Parser.Storageclassspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1279
                self.match(CPP14_v2Parser.Thread_local)
                pass
            elif token in [CPP14_v2Parser.Extern]:
                localctx = CPP14_v2Parser.Storageclassspecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1280
                self.match(CPP14_v2Parser.Extern)
                pass
            elif token in [CPP14_v2Parser.Mutable]:
                localctx = CPP14_v2Parser.Storageclassspecifier5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1281
                self.match(CPP14_v2Parser.Mutable)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functionspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Functionspecifier2Context(FunctionspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Virtual(self):
            return self.getToken(CPP14_v2Parser.Virtual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier2" ):
                listener.enterFunctionspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier2" ):
                listener.exitFunctionspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier2" ):
                return visitor.visitFunctionspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Functionspecifier3Context(FunctionspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Explicit(self):
            return self.getToken(CPP14_v2Parser.Explicit, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier3" ):
                listener.enterFunctionspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier3" ):
                listener.exitFunctionspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier3" ):
                return visitor.visitFunctionspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Functionspecifier1Context(FunctionspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier1" ):
                listener.enterFunctionspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier1" ):
                listener.exitFunctionspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier1" ):
                return visitor.visitFunctionspecifier1(self)
            else:
                return visitor.visitChildren(self)



    def functionspecifier(self):

        localctx = CPP14_v2Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionspecifier)
        try:
            self.state = 1287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Inline]:
                localctx = CPP14_v2Parser.Functionspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1284
                self.match(CPP14_v2Parser.Inline)
                pass
            elif token in [CPP14_v2Parser.Virtual]:
                localctx = CPP14_v2Parser.Functionspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1285
                self.match(CPP14_v2Parser.Virtual)
                pass
            elif token in [CPP14_v2Parser.Explicit]:
                localctx = CPP14_v2Parser.Functionspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1286
                self.match(CPP14_v2Parser.Explicit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefname" ):
                return visitor.visitTypedefname(self)
            else:
                return visitor.visitChildren(self)




    def typedefname(self):

        localctx = CPP14_v2Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typespecifier1Context(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier1" ):
                listener.enterTypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier1" ):
                listener.exitTypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier1" ):
                return visitor.visitTypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Typespecifier3Context(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier3" ):
                listener.enterTypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier3" ):
                listener.exitTypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier3" ):
                return visitor.visitTypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Typespecifier2Context(TypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier2" ):
                listener.enterTypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier2" ):
                listener.exitTypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier2" ):
                return visitor.visitTypespecifier2(self)
            else:
                return visitor.visitChildren(self)



    def typespecifier(self):

        localctx = CPP14_v2Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typespecifier)
        try:
            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.classspecifier()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Typespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_trailingtypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trailingtypespecifier1Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier1" ):
                listener.enterTrailingtypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier1" ):
                listener.exitTrailingtypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier1" ):
                return visitor.visitTrailingtypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifier2Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ElaboratedtypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier2" ):
                listener.enterTrailingtypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier2" ):
                listener.exitTrailingtypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier2" ):
                return visitor.visitTrailingtypespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifier3Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypenamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier3" ):
                listener.enterTrailingtypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier3" ):
                listener.exitTrailingtypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier3" ):
                return visitor.visitTrailingtypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifier4Context(TrailingtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier4" ):
                listener.enterTrailingtypespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier4" ):
                listener.exitTrailingtypespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier4" ):
                return visitor.visitTrailingtypespecifier4(self)
            else:
                return visitor.visitChildren(self)



    def trailingtypespecifier(self):

        localctx = CPP14_v2Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_trailingtypespecifier)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Wchar, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Trailingtypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self.simpletypespecifier()
                pass
            elif token in [CPP14_v2Parser.Class, CPP14_v2Parser.Enum, CPP14_v2Parser.Struct, CPP14_v2Parser.Union]:
                localctx = CPP14_v2Parser.Trailingtypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.elaboratedtypespecifier()
                pass
            elif token in [CPP14_v2Parser.Typename_]:
                localctx = CPP14_v2Parser.Trailingtypespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1298
                self.typenamespecifier()
                pass
            elif token in [CPP14_v2Parser.Const, CPP14_v2Parser.Volatile]:
                localctx = CPP14_v2Parser.Trailingtypespecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1299
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typespecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typespecifierseq1Context(TypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq1" ):
                listener.enterTypespecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq1" ):
                listener.exitTypespecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq1" ):
                return visitor.visitTypespecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Typespecifierseq2Context(TypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierContext,0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq2" ):
                listener.enterTypespecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq2" ):
                listener.exitTypespecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq2" ):
                return visitor.visitTypespecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def typespecifierseq(self):

        localctx = CPP14_v2Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typespecifierseq)
        try:
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typespecifierseq1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.typespecifier()
                self.state = 1304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1303
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typespecifierseq2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.typespecifier()
                self.state = 1307
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_trailingtypespecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Trailingtypespecifierseq1Context(TrailingtypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq1" ):
                listener.enterTrailingtypespecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq1" ):
                listener.exitTrailingtypespecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq1" ):
                return visitor.visitTrailingtypespecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Trailingtypespecifierseq2Context(TrailingtypespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TrailingtypespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierContext,0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq2" ):
                listener.enterTrailingtypespecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq2" ):
                listener.exitTrailingtypespecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq2" ):
                return visitor.visitTrailingtypespecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def trailingtypespecifierseq(self):

        localctx = CPP14_v2Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Trailingtypespecifierseq1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.trailingtypespecifier()
                self.state = 1313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1312
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Trailingtypespecifierseq2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.trailingtypespecifier()
                self.state = 1316
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simpletypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Simpletypespecifier17Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier17" ):
                listener.enterSimpletypespecifier17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier17" ):
                listener.exitSimpletypespecifier17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier17" ):
                return visitor.visitSimpletypespecifier17(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier2Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier2" ):
                listener.enterSimpletypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier2" ):
                listener.exitSimpletypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier2" ):
                return visitor.visitSimpletypespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier12Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Unsigned(self):
            return self.getToken(CPP14_v2Parser.Unsigned, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier12" ):
                listener.enterSimpletypespecifier12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier12" ):
                listener.exitSimpletypespecifier12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier12" ):
                return visitor.visitSimpletypespecifier12(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier3Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Char(self):
            return self.getToken(CPP14_v2Parser.Char, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier3" ):
                listener.enterSimpletypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier3" ):
                listener.exitSimpletypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier3" ):
                return visitor.visitSimpletypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier11Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Signed(self):
            return self.getToken(CPP14_v2Parser.Signed, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier11" ):
                listener.enterSimpletypespecifier11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier11" ):
                listener.exitSimpletypespecifier11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier11" ):
                return visitor.visitSimpletypespecifier11(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier4Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Char16(self):
            return self.getToken(CPP14_v2Parser.Char16, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier4" ):
                listener.enterSimpletypespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier4" ):
                listener.exitSimpletypespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier4" ):
                return visitor.visitSimpletypespecifier4(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier10Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Long(self):
            return self.getToken(CPP14_v2Parser.Long, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier10" ):
                listener.enterSimpletypespecifier10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier10" ):
                listener.exitSimpletypespecifier10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier10" ):
                return visitor.visitSimpletypespecifier10(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier5Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Char32(self):
            return self.getToken(CPP14_v2Parser.Char32, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier5" ):
                listener.enterSimpletypespecifier5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier5" ):
                listener.exitSimpletypespecifier5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier5" ):
                return visitor.visitSimpletypespecifier5(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier6Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Wchar(self):
            return self.getToken(CPP14_v2Parser.Wchar, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier6" ):
                listener.enterSimpletypespecifier6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier6" ):
                listener.exitSimpletypespecifier6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier6" ):
                return visitor.visitSimpletypespecifier6(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier16Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Auto(self):
            return self.getToken(CPP14_v2Parser.Auto, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier16" ):
                listener.enterSimpletypespecifier16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier16" ):
                listener.exitSimpletypespecifier16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier16" ):
                return visitor.visitSimpletypespecifier16(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier7Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Bool(self):
            return self.getToken(CPP14_v2Parser.Bool, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier7" ):
                listener.enterSimpletypespecifier7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier7" ):
                listener.exitSimpletypespecifier7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier7" ):
                return visitor.visitSimpletypespecifier7(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier15Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(CPP14_v2Parser.Void, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier15" ):
                listener.enterSimpletypespecifier15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier15" ):
                listener.exitSimpletypespecifier15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier15" ):
                return visitor.visitSimpletypespecifier15(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier8Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Short(self):
            return self.getToken(CPP14_v2Parser.Short, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier8" ):
                listener.enterSimpletypespecifier8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier8" ):
                listener.exitSimpletypespecifier8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier8" ):
                return visitor.visitSimpletypespecifier8(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier14Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Double(self):
            return self.getToken(CPP14_v2Parser.Double, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier14" ):
                listener.enterSimpletypespecifier14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier14" ):
                listener.exitSimpletypespecifier14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier14" ):
                return visitor.visitSimpletypespecifier14(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier9Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Int(self):
            return self.getToken(CPP14_v2Parser.Int, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier9" ):
                listener.enterSimpletypespecifier9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier9" ):
                listener.exitSimpletypespecifier9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier9" ):
                return visitor.visitSimpletypespecifier9(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier13Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Float(self):
            return self.getToken(CPP14_v2Parser.Float, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier13" ):
                listener.enterSimpletypespecifier13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier13" ):
                listener.exitSimpletypespecifier13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier13" ):
                return visitor.visitSimpletypespecifier13(self)
            else:
                return visitor.visitChildren(self)


    class Simpletypespecifier1Context(SimpletypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.SimpletypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypenameContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier1" ):
                listener.enterSimpletypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier1" ):
                listener.exitSimpletypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier1" ):
                return visitor.visitSimpletypespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def simpletypespecifier(self):

        localctx = CPP14_v2Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simpletypespecifier)
        try:
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Simpletypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1320
                    self.nestednamespecifier(0)


                self.state = 1323
                self.thetypename()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Simpletypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.nestednamespecifier(0)
                self.state = 1325
                self.match(CPP14_v2Parser.Template)
                self.state = 1326
                self.simpletemplateid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Simpletypespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1328
                self.match(CPP14_v2Parser.Char)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Simpletypespecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1329
                self.match(CPP14_v2Parser.Char16)
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Simpletypespecifier5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1330
                self.match(CPP14_v2Parser.Char32)
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Simpletypespecifier6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1331
                self.match(CPP14_v2Parser.Wchar)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Simpletypespecifier7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1332
                self.match(CPP14_v2Parser.Bool)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Simpletypespecifier8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1333
                self.match(CPP14_v2Parser.Short)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Simpletypespecifier9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1334
                self.match(CPP14_v2Parser.Int)
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Simpletypespecifier10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1335
                self.match(CPP14_v2Parser.Long)
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Simpletypespecifier11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1336
                self.match(CPP14_v2Parser.Signed)
                pass

            elif la_ == 12:
                localctx = CPP14_v2Parser.Simpletypespecifier12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1337
                self.match(CPP14_v2Parser.Unsigned)
                pass

            elif la_ == 13:
                localctx = CPP14_v2Parser.Simpletypespecifier13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1338
                self.match(CPP14_v2Parser.Float)
                pass

            elif la_ == 14:
                localctx = CPP14_v2Parser.Simpletypespecifier14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1339
                self.match(CPP14_v2Parser.Double)
                pass

            elif la_ == 15:
                localctx = CPP14_v2Parser.Simpletypespecifier15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1340
                self.match(CPP14_v2Parser.Void)
                pass

            elif la_ == 16:
                localctx = CPP14_v2Parser.Simpletypespecifier16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1341
                self.match(CPP14_v2Parser.Auto)
                pass

            elif la_ == 17:
                localctx = CPP14_v2Parser.Simpletypespecifier17Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1342
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_thetypename

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Thetypename1Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename1" ):
                listener.enterThetypename1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename1" ):
                listener.exitThetypename1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename1" ):
                return visitor.visitThetypename1(self)
            else:
                return visitor.visitChildren(self)


    class Thetypename2Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename2" ):
                listener.enterThetypename2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename2" ):
                listener.exitThetypename2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename2" ):
                return visitor.visitThetypename2(self)
            else:
                return visitor.visitChildren(self)


    class Thetypename3Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedefname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypedefnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename3" ):
                listener.enterThetypename3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename3" ):
                listener.exitThetypename3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename3" ):
                return visitor.visitThetypename3(self)
            else:
                return visitor.visitChildren(self)


    class Thetypename4Context(ThetypenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ThetypenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename4" ):
                listener.enterThetypename4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename4" ):
                listener.exitThetypename4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename4" ):
                return visitor.visitThetypename4(self)
            else:
                return visitor.visitChildren(self)



    def thetypename(self):

        localctx = CPP14_v2Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_thetypename)
        try:
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Thetypename1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.classname()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Thetypename2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.enumname()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Thetypename3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1347
                self.typedefname()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Thetypename4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1348
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_decltypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Decltypespecifier1Context(DecltypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DecltypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Decltype(self):
            return self.getToken(CPP14_v2Parser.Decltype, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier1" ):
                listener.enterDecltypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier1" ):
                listener.exitDecltypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier1" ):
                return visitor.visitDecltypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Decltypespecifier2Context(DecltypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DecltypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Decltype(self):
            return self.getToken(CPP14_v2Parser.Decltype, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def Auto(self):
            return self.getToken(CPP14_v2Parser.Auto, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier2" ):
                listener.enterDecltypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier2" ):
                listener.exitDecltypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier2" ):
                return visitor.visitDecltypespecifier2(self)
            else:
                return visitor.visitChildren(self)



    def decltypespecifier(self):

        localctx = CPP14_v2Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_decltypespecifier)
        try:
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Decltypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.match(CPP14_v2Parser.Decltype)
                self.state = 1352
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1353
                self.expression(0)
                self.state = 1354
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Decltypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1356
                self.match(CPP14_v2Parser.Decltype)
                self.state = 1357
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1358
                self.match(CPP14_v2Parser.Auto)
                self.state = 1359
                self.match(CPP14_v2Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_elaboratedtypespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Elaboratedtypespecifier1Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier1" ):
                listener.enterElaboratedtypespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier1" ):
                listener.exitElaboratedtypespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier1" ):
                return visitor.visitElaboratedtypespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Elaboratedtypespecifier2Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier2" ):
                listener.enterElaboratedtypespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier2" ):
                listener.exitElaboratedtypespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier2" ):
                return visitor.visitElaboratedtypespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Elaboratedtypespecifier3Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier3" ):
                listener.enterElaboratedtypespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier3" ):
                listener.exitElaboratedtypespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier3" ):
                return visitor.visitElaboratedtypespecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Elaboratedtypespecifier4Context(ElaboratedtypespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ElaboratedtypespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier4" ):
                listener.enterElaboratedtypespecifier4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier4" ):
                listener.exitElaboratedtypespecifier4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier4" ):
                return visitor.visitElaboratedtypespecifier4(self)
            else:
                return visitor.visitChildren(self)



    def elaboratedtypespecifier(self):

        localctx = CPP14_v2Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.classkey()
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1363
                    self.attributespecifierseq(0)


                self.state = 1367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1366
                    self.nestednamespecifier(0)


                self.state = 1369
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.classkey()
                self.state = 1372
                self.simpletemplateid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1374
                self.classkey()
                self.state = 1375
                self.nestednamespecifier(0)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Template:
                    self.state = 1376
                    self.match(CPP14_v2Parser.Template)


                self.state = 1379
                self.simpletemplateid()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Elaboratedtypespecifier4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1381
                self.match(CPP14_v2Parser.Enum)
                self.state = 1383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    self.nestednamespecifier(0)


                self.state = 1385
                self.match(CPP14_v2Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumname" ):
                return visitor.visitEnumname(self)
            else:
                return visitor.visitChildren(self)




    def enumname(self):

        localctx = CPP14_v2Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumspecifier2Context(EnumspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumheadContext,0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier2" ):
                listener.enterEnumspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier2" ):
                listener.exitEnumspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier2" ):
                return visitor.visitEnumspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Enumspecifier1Context(EnumspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumheadContext,0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)
        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier1" ):
                listener.enterEnumspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier1" ):
                listener.exitEnumspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier1" ):
                return visitor.visitEnumspecifier1(self)
            else:
                return visitor.visitChildren(self)



    def enumspecifier(self):

        localctx = CPP14_v2Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.enumhead()
                self.state = 1391
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 1392
                    self.enumeratorlist(0)


                self.state = 1395
                self.match(CPP14_v2Parser.RightBrace)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.enumhead()
                self.state = 1398
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1399
                self.enumeratorlist(0)
                self.state = 1400
                self.match(CPP14_v2Parser.Comma)
                self.state = 1401
                self.match(CPP14_v2Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumhead

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumhead2Context(EnumheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumkeyContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumbaseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead2" ):
                listener.enterEnumhead2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead2" ):
                listener.exitEnumhead2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead2" ):
                return visitor.visitEnumhead2(self)
            else:
                return visitor.visitChildren(self)


    class Enumhead1Context(EnumheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumkeyContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def enumbase(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumbaseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead1" ):
                listener.enterEnumhead1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead1" ):
                listener.exitEnumhead1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead1" ):
                return visitor.visitEnumhead1(self)
            else:
                return visitor.visitChildren(self)



    def enumhead(self):

        localctx = CPP14_v2Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumhead1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.enumkey()
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1406
                    self.attributespecifierseq(0)


                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 1409
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 1412
                    self.enumbase()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumhead2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.enumkey()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1416
                    self.attributespecifierseq(0)


                self.state = 1419
                self.nestednamespecifier(0)
                self.state = 1420
                self.match(CPP14_v2Parser.Identifier)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 1421
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueenumdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaqueenumdeclaration" ):
                return visitor.visitOpaqueenumdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def opaqueenumdeclaration(self):

        localctx = CPP14_v2Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.enumkey()
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1427
                self.attributespecifierseq(0)


            self.state = 1430
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Colon:
                self.state = 1431
                self.enumbase()


            self.state = 1434
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumkey

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumkey3Context(EnumkeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumkeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)
        def Struct(self):
            return self.getToken(CPP14_v2Parser.Struct, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey3" ):
                listener.enterEnumkey3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey3" ):
                listener.exitEnumkey3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey3" ):
                return visitor.visitEnumkey3(self)
            else:
                return visitor.visitChildren(self)


    class Enumkey2Context(EnumkeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumkeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)
        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey2" ):
                listener.enterEnumkey2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey2" ):
                listener.exitEnumkey2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey2" ):
                return visitor.visitEnumkey2(self)
            else:
                return visitor.visitChildren(self)


    class Enumkey1Context(EnumkeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumkeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Enum(self):
            return self.getToken(CPP14_v2Parser.Enum, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey1" ):
                listener.enterEnumkey1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey1" ):
                listener.exitEnumkey1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey1" ):
                return visitor.visitEnumkey1(self)
            else:
                return visitor.visitChildren(self)



    def enumkey(self):

        localctx = CPP14_v2Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumkey)
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumkey1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.match(CPP14_v2Parser.Enum)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumkey2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.match(CPP14_v2Parser.Enum)
                self.state = 1438
                self.match(CPP14_v2Parser.Class)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Enumkey3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1439
                self.match(CPP14_v2Parser.Enum)
                self.state = 1440
                self.match(CPP14_v2Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbase" ):
                return visitor.visitEnumbase(self)
            else:
                return visitor.visitChildren(self)




    def enumbase(self):

        localctx = CPP14_v2Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(CPP14_v2Parser.Colon)
            self.state = 1444
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumeratorlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Enumeratorlist2Context(EnumeratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratordefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist2" ):
                listener.enterEnumeratorlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist2" ):
                listener.exitEnumeratorlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist2" ):
                return visitor.visitEnumeratorlist2(self)
            else:
                return visitor.visitChildren(self)


    class Enumeratorlist1Context(EnumeratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratordefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist1" ):
                listener.enterEnumeratorlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist1" ):
                listener.exitEnumeratorlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist1" ):
                return visitor.visitEnumeratorlist1(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Enumeratorlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1447
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Enumeratorlist2Context(self, CPP14_v2Parser.EnumeratorlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1449
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1450
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1451
                    self.enumeratordefinition() 
                self.state = 1456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratordefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumeratordefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Enumeratordefinition2Context(EnumeratordefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratordefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumerator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorContext,0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition2" ):
                listener.enterEnumeratordefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition2" ):
                listener.exitEnumeratordefinition2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition2" ):
                return visitor.visitEnumeratordefinition2(self)
            else:
                return visitor.visitChildren(self)


    class Enumeratordefinition1Context(EnumeratordefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.EnumeratordefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumerator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EnumeratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition1" ):
                listener.enterEnumeratordefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition1" ):
                listener.exitEnumeratordefinition1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition1" ):
                return visitor.visitEnumeratordefinition1(self)
            else:
                return visitor.visitChildren(self)



    def enumeratordefinition(self):

        localctx = CPP14_v2Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumeratordefinition)
        try:
            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Enumeratordefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.enumerator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Enumeratordefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.enumerator()
                self.state = 1459
                self.match(CPP14_v2Parser.Assign)
                self.state = 1460
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CPP14_v2Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacename

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Namespacename2Context(NamespacenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespacealias(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacealiasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename2" ):
                listener.enterNamespacename2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename2" ):
                listener.exitNamespacename2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename2" ):
                return visitor.visitNamespacename2(self)
            else:
                return visitor.visitChildren(self)


    class Namespacename1Context(NamespacenameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacenameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OriginalnamespacenameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename1" ):
                listener.enterNamespacename1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename1" ):
                listener.exitNamespacename1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename1" ):
                return visitor.visitNamespacename1(self)
            else:
                return visitor.visitChildren(self)



    def namespacename(self):

        localctx = CPP14_v2Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namespacename)
        try:
            self.state = 1468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Namespacename1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.originalnamespacename()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Namespacename2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacename" ):
                return visitor.visitOriginalnamespacename(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacename(self):

        localctx = CPP14_v2Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacedefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Namespacedefinition1Context(NamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamednamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition1" ):
                listener.enterNamespacedefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition1" ):
                listener.exitNamespacedefinition1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition1" ):
                return visitor.visitNamespacedefinition1(self)
            else:
                return visitor.visitChildren(self)


    class Namespacedefinition2Context(NamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnnamednamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition2" ):
                listener.enterNamespacedefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition2" ):
                listener.exitNamespacedefinition2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition2" ):
                return visitor.visitNamespacedefinition2(self)
            else:
                return visitor.visitChildren(self)



    def namespacedefinition(self):

        localctx = CPP14_v2Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_namespacedefinition)
        try:
            self.state = 1474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Namespacedefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Namespacedefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namednamespacedefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Namednamespacedefinition2Context(NamednamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamednamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExtensionnamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition2" ):
                listener.enterNamednamespacedefinition2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition2" ):
                listener.exitNamednamespacedefinition2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition2" ):
                return visitor.visitNamednamespacedefinition2(self)
            else:
                return visitor.visitChildren(self)


    class Namednamespacedefinition1Context(NamednamespacedefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NamednamespacedefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OriginalnamespacedefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition1" ):
                listener.enterNamednamespacedefinition1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition1" ):
                listener.exitNamednamespacedefinition1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition1" ):
                return visitor.visitNamednamespacedefinition1(self)
            else:
                return visitor.visitChildren(self)



    def namednamespacedefinition(self):

        localctx = CPP14_v2Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namednamespacedefinition)
        try:
            self.state = 1478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Namednamespacedefinition1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Namednamespacedefinition2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacedefinition" ):
                return visitor.visitOriginalnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacedefinition(self):

        localctx = CPP14_v2Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Inline:
                self.state = 1480
                self.match(CPP14_v2Parser.Inline)


            self.state = 1483
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1484
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1485
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1486
            self.namespacebody()
            self.state = 1487
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OriginalnamespacenameContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionnamespacedefinition" ):
                return visitor.visitExtensionnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def extensionnamespacedefinition(self):

        localctx = CPP14_v2Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Inline:
                self.state = 1489
                self.match(CPP14_v2Parser.Inline)


            self.state = 1492
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1493
            self.originalnamespacename()
            self.state = 1494
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1495
            self.namespacebody()
            self.state = 1496
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14_v2Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamednamespacedefinition" ):
                return visitor.visitUnnamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def unnamednamespacedefinition(self):

        localctx = CPP14_v2Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Inline:
                self.state = 1498
                self.match(CPP14_v2Parser.Inline)


            self.state = 1501
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1502
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 1503
            self.namespacebody()
            self.state = 1504
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacebodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacebody" ):
                return visitor.visitNamespacebody(self)
            else:
                return visitor.visitChildren(self)




    def namespacebody(self):

        localctx = CPP14_v2Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                self.state = 1506
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealias" ):
                return visitor.visitNamespacealias(self)
            else:
                return visitor.visitChildren(self)




    def namespacealias(self):

        localctx = CPP14_v2Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealiasdefinition" ):
                return visitor.visitNamespacealiasdefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacealiasdefinition(self):

        localctx = CPP14_v2Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1512
            self.match(CPP14_v2Parser.Identifier)
            self.state = 1513
            self.match(CPP14_v2Parser.Assign)
            self.state = 1514
            self.qualifiednamespacespecifier()
            self.state = 1515
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiednamespacespecifier" ):
                return visitor.visitQualifiednamespacespecifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14_v2Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1517
                self.nestednamespecifier(0)


            self.state = 1520
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_usingdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Usingdeclaration1Context(UsingdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UsingdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration1" ):
                listener.enterUsingdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration1" ):
                listener.exitUsingdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration1" ):
                return visitor.visitUsingdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Usingdeclaration2Context(UsingdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UsingdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)
        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)
        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UnqualifiedidContext,0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration2" ):
                listener.enterUsingdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration2" ):
                listener.exitUsingdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration2" ):
                return visitor.visitUsingdeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def usingdeclaration(self):

        localctx = CPP14_v2Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Usingdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.match(CPP14_v2Parser.Using)
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Typename_:
                    self.state = 1523
                    self.match(CPP14_v2Parser.Typename_)


                self.state = 1526
                self.nestednamespecifier(0)
                self.state = 1527
                self.unqualifiedid()
                self.state = 1528
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Usingdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.match(CPP14_v2Parser.Using)
                self.state = 1531
                self.match(CPP14_v2Parser.Doublecolon)
                self.state = 1532
                self.unqualifiedid()
                self.state = 1533
                self.match(CPP14_v2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14_v2Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14_v2Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NamespacenameContext,0)


        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdirective" ):
                return visitor.visitUsingdirective(self)
            else:
                return visitor.visitChildren(self)




    def usingdirective(self):

        localctx = CPP14_v2Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1537
                self.attributespecifierseq(0)


            self.state = 1540
            self.match(CPP14_v2Parser.Using)
            self.state = 1541
            self.match(CPP14_v2Parser.Namespace)
            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1542
                self.nestednamespecifier(0)


            self.state = 1545
            self.namespacename()
            self.state = 1546
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14_v2Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmdefinition" ):
                return visitor.visitAsmdefinition(self)
            else:
                return visitor.visitChildren(self)




    def asmdefinition(self):

        localctx = CPP14_v2Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(CPP14_v2Parser.Asm)
            self.state = 1549
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1550
            self.match(CPP14_v2Parser.Stringliteral)
            self.state = 1551
            self.match(CPP14_v2Parser.RightParen)
            self.state = 1552
            self.match(CPP14_v2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkagespecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_linkagespecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Linkagespecification2Context(LinkagespecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LinkagespecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)
        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)
        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification2" ):
                listener.enterLinkagespecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification2" ):
                listener.exitLinkagespecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification2" ):
                return visitor.visitLinkagespecification2(self)
            else:
                return visitor.visitChildren(self)


    class Linkagespecification1Context(LinkagespecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LinkagespecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)
        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)
        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)
        def declarationseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification1" ):
                listener.enterLinkagespecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification1" ):
                listener.exitLinkagespecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification1" ):
                return visitor.visitLinkagespecification1(self)
            else:
                return visitor.visitChildren(self)



    def linkagespecification(self):

        localctx = CPP14_v2Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Linkagespecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.match(CPP14_v2Parser.Extern)
                self.state = 1555
                self.match(CPP14_v2Parser.Stringliteral)
                self.state = 1556
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Asm) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Namespace) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                    self.state = 1557
                    self.declarationseq(0)


                self.state = 1560
                self.match(CPP14_v2Parser.RightBrace)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Linkagespecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.match(CPP14_v2Parser.Extern)
                self.state = 1562
                self.match(CPP14_v2Parser.Stringliteral)
                self.state = 1563
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributespecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Attributespecifierseq1Context(AttributespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq1" ):
                listener.enterAttributespecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq1" ):
                listener.exitAttributespecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq1" ):
                return visitor.visitAttributespecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Attributespecifierseq2Context(AttributespecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq2" ):
                listener.enterAttributespecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq2" ):
                listener.exitAttributespecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq2" ):
                return visitor.visitAttributespecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Attributespecifierseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1567
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Attributespecifierseq2Context(self, CPP14_v2Parser.AttributespecifierseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1569
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1570
                    self.attributespecifier() 
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Attributespecifier2Context(AttributespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AlignmentspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier2" ):
                listener.enterAttributespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier2" ):
                listener.exitAttributespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier2" ):
                return visitor.visitAttributespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Attributespecifier1Context(AttributespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftBracket)
            else:
                return self.getToken(CPP14_v2Parser.LeftBracket, i)
        def attributelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributelistContext,0)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightBracket)
            else:
                return self.getToken(CPP14_v2Parser.RightBracket, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier1" ):
                listener.enterAttributespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier1" ):
                listener.exitAttributespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier1" ):
                return visitor.visitAttributespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifier(self):

        localctx = CPP14_v2Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attributespecifier)
        try:
            self.state = 1583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Attributespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1576
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1577
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1578
                self.attributelist(0)
                self.state = 1579
                self.match(CPP14_v2Parser.RightBracket)
                self.state = 1580
                self.match(CPP14_v2Parser.RightBracket)
                pass
            elif token in [CPP14_v2Parser.Alignas]:
                localctx = CPP14_v2Parser.Attributespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_alignmentspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Alignmentspecifier1Context(AlignmentspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AlignmentspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Alignas(self):
            return self.getToken(CPP14_v2Parser.Alignas, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier1" ):
                listener.enterAlignmentspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier1" ):
                listener.exitAlignmentspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier1" ):
                return visitor.visitAlignmentspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Alignmentspecifier2Context(AlignmentspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AlignmentspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Alignas(self):
            return self.getToken(CPP14_v2Parser.Alignas, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier2" ):
                listener.enterAlignmentspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier2" ):
                listener.exitAlignmentspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier2" ):
                return visitor.visitAlignmentspecifier2(self)
            else:
                return visitor.visitChildren(self)



    def alignmentspecifier(self):

        localctx = CPP14_v2Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Alignmentspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.match(CPP14_v2Parser.Alignas)
                self.state = 1586
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1587
                self.thetypeid()
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 1588
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 1591
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Alignmentspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.match(CPP14_v2Parser.Alignas)
                self.state = 1594
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1595
                self.constantexpression()
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 1596
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 1599
                self.match(CPP14_v2Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributelist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Attributelist3Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist3" ):
                listener.enterAttributelist3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist3" ):
                listener.exitAttributelist3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist3" ):
                return visitor.visitAttributelist3(self)
            else:
                return visitor.visitChildren(self)


    class Attributelist2Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributelistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist2" ):
                listener.enterAttributelist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist2" ):
                listener.exitAttributelist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist2" ):
                return visitor.visitAttributelist2(self)
            else:
                return visitor.visitChildren(self)


    class Attributelist4Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributelistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist4" ):
                listener.enterAttributelist4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist4" ):
                listener.exitAttributelist4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist4" ):
                return visitor.visitAttributelist4(self)
            else:
                return visitor.visitChildren(self)


    class Attributelist1Context(AttributelistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributelistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attribute(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist1" ):
                listener.enterAttributelist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist1" ):
                listener.exitAttributelist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist1" ):
                return visitor.visitAttributelist1(self)
            else:
                return visitor.visitChildren(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Attributelist1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1604
                    self.attribute()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Attributelist3Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1607
                self.attribute()
                self.state = 1608
                self.match(CPP14_v2Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1622
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Attributelist2Context(self, CPP14_v2Parser.AttributelistContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1612
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1613
                        self.match(CPP14_v2Parser.Comma)
                        self.state = 1615
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                        if la_ == 1:
                            self.state = 1614
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Attributelist4Context(self, CPP14_v2Parser.AttributelistContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1617
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1618
                        self.match(CPP14_v2Parser.Comma)
                        self.state = 1619
                        self.attribute()
                        self.state = 1620
                        self.match(CPP14_v2Parser.Ellipsis)
                        pass

             
                self.state = 1626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = CPP14_v2Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.attributetoken()
            self.state = 1629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1628
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributetokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributetoken

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Attributetoken1Context(AttributetokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributetokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken1" ):
                listener.enterAttributetoken1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken1" ):
                listener.exitAttributetoken1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken1" ):
                return visitor.visitAttributetoken1(self)
            else:
                return visitor.visitChildren(self)


    class Attributetoken2Context(AttributetokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AttributetokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributescopedtokenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken2" ):
                listener.enterAttributetoken2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken2" ):
                listener.exitAttributetoken2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken2" ):
                return visitor.visitAttributetoken2(self)
            else:
                return visitor.visitChildren(self)



    def attributetoken(self):

        localctx = CPP14_v2Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributetoken)
        try:
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Attributetoken1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1631
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Attributetoken2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1632
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributescopedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributenamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14_v2Parser.Doublecolon, 0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributescopedtoken" ):
                return visitor.visitAttributescopedtoken(self)
            else:
                return visitor.visitChildren(self)




    def attributescopedtoken(self):

        localctx = CPP14_v2Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.attributenamespace()
            self.state = 1636
            self.match(CPP14_v2Parser.Doublecolon)
            self.state = 1637
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributenamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributenamespace" ):
                return visitor.visitAttributenamespace(self)
            else:
                return visitor.visitChildren(self)




    def attributenamespace(self):

        localctx = CPP14_v2Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeargumentclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeargumentclause" ):
                return visitor.visitAttributeargumentclause(self)
            else:
                return visitor.visitChildren(self)




    def attributeargumentclause(self):

        localctx = CPP14_v2Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1642
            self.balancedtokenseq(0)
            self.state = 1643
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_balancedtokenseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Balancedtokenseq2Context(BalancedtokenseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq2" ):
                listener.enterBalancedtokenseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq2" ):
                listener.exitBalancedtokenseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq2" ):
                return visitor.visitBalancedtokenseq2(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtokenseq1Context(BalancedtokenseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq1" ):
                listener.enterBalancedtokenseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq1" ):
                listener.exitBalancedtokenseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq1" ):
                return visitor.visitBalancedtokenseq1(self)
            else:
                return visitor.visitChildren(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Balancedtokenseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1646
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1653
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Balancedtokenseq2Context(self, CPP14_v2Parser.BalancedtokenseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1649
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1650
                    self.balancedtoken() 
                self.state = 1655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BalancedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_balancedtoken

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Balancedtoken3Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken3" ):
                listener.enterBalancedtoken3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken3" ):
                listener.exitBalancedtoken3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken3" ):
                return visitor.visitBalancedtoken3(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtoken4Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftParen)
            else:
                return self.getToken(CPP14_v2Parser.LeftParen, i)
        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightParen)
            else:
                return self.getToken(CPP14_v2Parser.RightParen, i)
        def LeftBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftBrace)
            else:
                return self.getToken(CPP14_v2Parser.LeftBrace, i)
        def RightBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightBrace)
            else:
                return self.getToken(CPP14_v2Parser.RightBrace, i)
        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.LeftBracket)
            else:
                return self.getToken(CPP14_v2Parser.LeftBracket, i)
        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14_v2Parser.RightBracket)
            else:
                return self.getToken(CPP14_v2Parser.RightBracket, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken4" ):
                listener.enterBalancedtoken4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken4" ):
                listener.exitBalancedtoken4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken4" ):
                return visitor.visitBalancedtoken4(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtoken1Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken1" ):
                listener.enterBalancedtoken1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken1" ):
                listener.exitBalancedtoken1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken1" ):
                return visitor.visitBalancedtoken1(self)
            else:
                return visitor.visitChildren(self)


    class Balancedtoken2Context(BalancedtokenContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BalancedtokenContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BalancedtokenseqContext,0)

        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken2" ):
                listener.enterBalancedtoken2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken2" ):
                listener.exitBalancedtoken2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken2" ):
                return visitor.visitBalancedtoken2(self)
            else:
                return visitor.visitChildren(self)



    def balancedtoken(self):

        localctx = CPP14_v2Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_balancedtoken)
        self._la = 0 # Token type
        try:
            self.state = 1673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Balancedtoken1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1657
                self.balancedtokenseq(0)
                self.state = 1658
                self.match(CPP14_v2Parser.RightParen)
                pass
            elif token in [CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Balancedtoken2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1660
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1661
                self.balancedtokenseq(0)
                self.state = 1662
                self.match(CPP14_v2Parser.RightBracket)
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Balancedtoken3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1664
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1665
                self.balancedtokenseq(0)
                self.state = 1666
                self.match(CPP14_v2Parser.RightBrace)
                pass
            elif token in [CPP14_v2Parser.T__0, CPP14_v2Parser.T__1, CPP14_v2Parser.T__2, CPP14_v2Parser.T__3, CPP14_v2Parser.T__4, CPP14_v2Parser.T__5, CPP14_v2Parser.MultiLineMacro, CPP14_v2Parser.Directive, CPP14_v2Parser.Alignas, CPP14_v2Parser.Alignof, CPP14_v2Parser.Asm, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Break, CPP14_v2Parser.Case, CPP14_v2Parser.Catch, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Constexpr, CPP14_v2Parser.Const_cast, CPP14_v2Parser.Continue, CPP14_v2Parser.Decltype, CPP14_v2Parser.Default, CPP14_v2Parser.Delete, CPP14_v2Parser.Do, CPP14_v2Parser.Double, CPP14_v2Parser.Dynamic_cast, CPP14_v2Parser.Else, CPP14_v2Parser.Enum, CPP14_v2Parser.Explicit, CPP14_v2Parser.Export, CPP14_v2Parser.Extern, CPP14_v2Parser.False1, CPP14_v2Parser.Final, CPP14_v2Parser.Float, CPP14_v2Parser.For, CPP14_v2Parser.Friend, CPP14_v2Parser.Goto, CPP14_v2Parser.If, CPP14_v2Parser.Inline, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Mutable, CPP14_v2Parser.Namespace, CPP14_v2Parser.New, CPP14_v2Parser.Noexcept, CPP14_v2Parser.Nullptr, CPP14_v2Parser.Operator, CPP14_v2Parser.Override, CPP14_v2Parser.Private, CPP14_v2Parser.Protected, CPP14_v2Parser.Public, CPP14_v2Parser.Register, CPP14_v2Parser.Reinterpret_cast, CPP14_v2Parser.Return, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Sizeof, CPP14_v2Parser.Static, CPP14_v2Parser.Static_assert, CPP14_v2Parser.Static_cast, CPP14_v2Parser.Struct, CPP14_v2Parser.Switch, CPP14_v2Parser.Template, CPP14_v2Parser.This, CPP14_v2Parser.Thread_local, CPP14_v2Parser.Throw, CPP14_v2Parser.True1, CPP14_v2Parser.Try, CPP14_v2Parser.Typedef, CPP14_v2Parser.Typeid_, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Using, CPP14_v2Parser.Virtual, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.While, CPP14_v2Parser.Plus, CPP14_v2Parser.Minus, CPP14_v2Parser.Star, CPP14_v2Parser.Div, CPP14_v2Parser.Mod, CPP14_v2Parser.Caret, CPP14_v2Parser.And, CPP14_v2Parser.Or, CPP14_v2Parser.Tilde, CPP14_v2Parser.Not, CPP14_v2Parser.Assign, CPP14_v2Parser.Less, CPP14_v2Parser.Greater, CPP14_v2Parser.PlusAssign, CPP14_v2Parser.MinusAssign, CPP14_v2Parser.StarAssign, CPP14_v2Parser.DivAssign, CPP14_v2Parser.ModAssign, CPP14_v2Parser.XorAssign, CPP14_v2Parser.AndAssign, CPP14_v2Parser.OrAssign, CPP14_v2Parser.LeftShift, CPP14_v2Parser.RightShift, CPP14_v2Parser.LeftShiftAssign, CPP14_v2Parser.RightShiftAssign, CPP14_v2Parser.Equal, CPP14_v2Parser.NotEqual, CPP14_v2Parser.LessEqual, CPP14_v2Parser.GreaterEqual, CPP14_v2Parser.AndAnd, CPP14_v2Parser.OrOr, CPP14_v2Parser.PlusPlus, CPP14_v2Parser.MinusMinus, CPP14_v2Parser.Comma, CPP14_v2Parser.ArrowStar, CPP14_v2Parser.Arrow, CPP14_v2Parser.Question, CPP14_v2Parser.Colon, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Semi, CPP14_v2Parser.Dot, CPP14_v2Parser.DotStar, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Decimalliteral, CPP14_v2Parser.Octalliteral, CPP14_v2Parser.Hexadecimalliteral, CPP14_v2Parser.Binaryliteral, CPP14_v2Parser.Integersuffix, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral, CPP14_v2Parser.Whitespace, CPP14_v2Parser.Newline, CPP14_v2Parser.BlockComment, CPP14_v2Parser.LineComment]:
                localctx = CPP14_v2Parser.Balancedtoken4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1669 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1668
                        _la = self._input.LA(1)
                        if _la <= 0 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.RightParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.RightBracket - 84)) | (1 << (CPP14_v2Parser.LeftBrace - 84)) | (1 << (CPP14_v2Parser.RightBrace - 84)))) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1671 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initdeclaratorlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Initdeclaratorlist2Context(InitdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist2" ):
                listener.enterInitdeclaratorlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist2" ):
                listener.exitInitdeclaratorlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist2" ):
                return visitor.visitInitdeclaratorlist2(self)
            else:
                return visitor.visitChildren(self)


    class Initdeclaratorlist1Context(InitdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist1" ):
                listener.enterInitdeclaratorlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist1" ):
                listener.exitInitdeclaratorlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist1" ):
                return visitor.visitInitdeclaratorlist1(self)
            else:
                return visitor.visitChildren(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Initdeclaratorlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1676
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Initdeclaratorlist2Context(self, CPP14_v2Parser.InitdeclaratorlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1678
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1679
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1680
                    self.initdeclarator() 
                self.state = 1685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclarator" ):
                return visitor.visitInitdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initdeclarator(self):

        localctx = CPP14_v2Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.declarator()
            self.state = 1688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1687
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Declarator2Context(DeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingreturntypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator2" ):
                listener.enterDeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator2" ):
                listener.exitDeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator2" ):
                return visitor.visitDeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Declarator1Context(DeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.DeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator1" ):
                listener.enterDeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator1" ):
                listener.exitDeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator1" ):
                return visitor.visitDeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def declarator(self):

        localctx = CPP14_v2Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_declarator)
        try:
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Declarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1690
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Declarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1691
                self.noptrdeclarator(0)
                self.state = 1692
                self.parametersandqualifiers()
                self.state = 1693
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ptrdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ptrdeclarator1Context(PtrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator1" ):
                listener.enterPtrdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator1" ):
                listener.exitPtrdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrdeclarator1" ):
                return visitor.visitPtrdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Ptrdeclarator2Context(PtrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator2" ):
                listener.enterPtrdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator2" ):
                listener.exitPtrdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrdeclarator2" ):
                return visitor.visitPtrdeclarator2(self)
            else:
                return visitor.visitChildren(self)



    def ptrdeclarator(self):

        localctx = CPP14_v2Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ptrdeclarator)
        try:
            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Ptrdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Ptrdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.ptroperator()
                self.state = 1699
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrdeclarator1Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratoridContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator1" ):
                listener.enterNoptrdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator1" ):
                listener.exitNoptrdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator1" ):
                return visitor.visitNoptrdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Noptrdeclarator4Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrdeclaratorContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator4" ):
                listener.enterNoptrdeclarator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator4" ):
                listener.exitNoptrdeclarator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator4" ):
                return visitor.visitNoptrdeclarator4(self)
            else:
                return visitor.visitChildren(self)


    class Noptrdeclarator2Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator2" ):
                listener.enterNoptrdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator2" ):
                listener.exitNoptrdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator2" ):
                return visitor.visitNoptrdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Noptrdeclarator3Context(NoptrdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator3" ):
                listener.enterNoptrdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator3" ):
                listener.exitNoptrdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator3" ):
                return visitor.visitNoptrdeclarator3(self)
            else:
                return visitor.visitChildren(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 242
        self.enterRecursionRule(localctx, 242, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Decltype, CPP14_v2Parser.Operator, CPP14_v2Parser.Tilde, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Noptrdeclarator1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1704
                self.declaratorid()
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1705
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Noptrdeclarator4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1708
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1709
                self.ptrdeclarator()
                self.state = 1710
                self.match(CPP14_v2Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1727
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1725
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Noptrdeclarator2Context(self, CPP14_v2Parser.NoptrdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1714
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1715
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Noptrdeclarator3Context(self, CPP14_v2Parser.NoptrdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1716
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1717
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 1719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1718
                            self.constantexpression()


                        self.state = 1721
                        self.match(CPP14_v2Parser.RightBracket)
                        self.state = 1723
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                        if la_ == 1:
                            self.state = 1722
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersandqualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersandqualifiers" ):
                return visitor.visitParametersandqualifiers(self)
            else:
                return visitor.visitChildren(self)




    def parametersandqualifiers(self):

        localctx = CPP14_v2Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 1731
            self.parameterdeclarationclause()
            self.state = 1732
            self.match(CPP14_v2Parser.RightParen)
            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1733
                self.cvqualifierseq()


            self.state = 1737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1736
                self.refqualifier()


            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1739
                self.exceptionspecification()


            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1742
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingreturntypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingreturntype" ):
                return visitor.visitTrailingreturntype(self)
            else:
                return visitor.visitChildren(self)




    def trailingreturntype(self):

        localctx = CPP14_v2Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(CPP14_v2Parser.Arrow)
            self.state = 1746
            self.trailingtypespecifierseq()
            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1747
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtroperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ptroperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ptroperator1Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator1" ):
                listener.enterPtroperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator1" ):
                listener.exitPtroperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator1" ):
                return visitor.visitPtroperator1(self)
            else:
                return visitor.visitChildren(self)


    class Ptroperator2Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator2" ):
                listener.enterPtroperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator2" ):
                listener.exitPtroperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator2" ):
                return visitor.visitPtroperator2(self)
            else:
                return visitor.visitChildren(self)


    class Ptroperator3Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator3" ):
                listener.enterPtroperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator3" ):
                listener.exitPtroperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator3" ):
                return visitor.visitPtroperator3(self)
            else:
                return visitor.visitChildren(self)


    class Ptroperato4Context(PtroperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtroperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperato4" ):
                listener.enterPtroperato4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperato4" ):
                listener.exitPtroperato4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperato4" ):
                return visitor.visitPtroperato4(self)
            else:
                return visitor.visitChildren(self)



    def ptroperator(self):

        localctx = CPP14_v2Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ptroperator)
        try:
            self.state = 1773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Star]:
                localctx = CPP14_v2Parser.Ptroperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1750
                self.match(CPP14_v2Parser.Star)
                self.state = 1752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.attributespecifierseq(0)


                self.state = 1755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1754
                    self.cvqualifierseq()


                pass
            elif token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Ptroperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1757
                self.match(CPP14_v2Parser.And)
                self.state = 1759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1758
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14_v2Parser.T__2]:
                localctx = CPP14_v2Parser.Ptroperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1761
                self.match(CPP14_v2Parser.T__2)
                self.state = 1763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1762
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14_v2Parser.Decltype, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Ptroperato4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1765
                self.nestednamespecifier(0)
                self.state = 1766
                self.match(CPP14_v2Parser.Star)
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.attributespecifierseq(0)


                self.state = 1771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1770
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifierseq" ):
                return visitor.visitCvqualifierseq(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifierseq(self):

        localctx = CPP14_v2Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.cvqualifier()
            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1776
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_cvqualifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Cvqualifier2Context(CvqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CvqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Volatile(self):
            return self.getToken(CPP14_v2Parser.Volatile, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier2" ):
                listener.enterCvqualifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier2" ):
                listener.exitCvqualifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier2" ):
                return visitor.visitCvqualifier2(self)
            else:
                return visitor.visitChildren(self)


    class Cvqualifier1Context(CvqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.CvqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Const(self):
            return self.getToken(CPP14_v2Parser.Const, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier1" ):
                listener.enterCvqualifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier1" ):
                listener.exitCvqualifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier1" ):
                return visitor.visitCvqualifier1(self)
            else:
                return visitor.visitChildren(self)



    def cvqualifier(self):

        localctx = CPP14_v2Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cvqualifier)
        try:
            self.state = 1781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Const]:
                localctx = CPP14_v2Parser.Cvqualifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1779
                self.match(CPP14_v2Parser.Const)
                pass
            elif token in [CPP14_v2Parser.Volatile]:
                localctx = CPP14_v2Parser.Cvqualifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1780
                self.match(CPP14_v2Parser.Volatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_refqualifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Refqualifier1Context(RefqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RefqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier1" ):
                listener.enterRefqualifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier1" ):
                listener.exitRefqualifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier1" ):
                return visitor.visitRefqualifier1(self)
            else:
                return visitor.visitChildren(self)


    class Refqualifier2Context(RefqualifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.RefqualifierContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier2" ):
                listener.enterRefqualifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier2" ):
                listener.exitRefqualifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier2" ):
                return visitor.visitRefqualifier2(self)
            else:
                return visitor.visitChildren(self)



    def refqualifier(self):

        localctx = CPP14_v2Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_refqualifier)
        try:
            self.state = 1785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.And]:
                localctx = CPP14_v2Parser.Refqualifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1783
                self.match(CPP14_v2Parser.And)
                pass
            elif token in [CPP14_v2Parser.T__2]:
                localctx = CPP14_v2Parser.Refqualifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.match(CPP14_v2Parser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaratorid" ):
                return visitor.visitDeclaratorid(self)
            else:
                return visitor.visitChildren(self)




    def declaratorid(self):

        localctx = CPP14_v2Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Ellipsis:
                self.state = 1787
                self.match(CPP14_v2Parser.Ellipsis)


            self.state = 1790
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_thetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypeid" ):
                listener.enterThetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypeid" ):
                listener.exitThetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypeid" ):
                return visitor.visitThetypeid(self)
            else:
                return visitor.visitChildren(self)




    def thetypeid(self):

        localctx = CPP14_v2Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.typespecifierseq()
            self.state = 1794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1793
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_abstractdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Abstractdeclarator2Context(AbstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TrailingreturntypeContext,0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator2" ):
                listener.enterAbstractdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator2" ):
                listener.exitAbstractdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator2" ):
                return visitor.visitAbstractdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Abstractdeclarator1Context(AbstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator1" ):
                listener.enterAbstractdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator1" ):
                listener.exitAbstractdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator1" ):
                return visitor.visitAbstractdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Abstractdeclarator3Context(AbstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractpackdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator3" ):
                listener.enterAbstractdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator3" ):
                listener.exitAbstractdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator3" ):
                return visitor.visitAbstractdeclarator3(self)
            else:
                return visitor.visitChildren(self)



    def abstractdeclarator(self):

        localctx = CPP14_v2Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractdeclarator)
        try:
            self.state = 1804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Abstractdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1796
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Abstractdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1797
                    self.noptrabstractdeclarator(0)


                self.state = 1800
                self.parametersandqualifiers()
                self.state = 1801
                self.trailingreturntype()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Abstractdeclarator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1803
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ptrabstractdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Ptrabstractdeclarator2Context(PtrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator2" ):
                listener.enterPtrabstractdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator2" ):
                listener.exitPtrabstractdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator2" ):
                return visitor.visitPtrabstractdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Ptrabstractdeclarator1Context(PtrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.PtrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator1" ):
                listener.enterPtrabstractdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator1" ):
                listener.exitPtrabstractdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator1" ):
                return visitor.visitPtrabstractdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def ptrabstractdeclarator(self):

        localctx = CPP14_v2Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket]:
                localctx = CPP14_v2Parser.Ptrabstractdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1806
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Decltype, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Ptrabstractdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1807
                self.ptroperator()
                self.state = 1809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1808
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrabstractdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrabstractdeclarator4Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator4" ):
                listener.enterNoptrabstractdeclarator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator4" ):
                listener.exitNoptrabstractdeclarator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator4" ):
                return visitor.visitNoptrabstractdeclarator4(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator5Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtrabstractdeclaratorContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator5" ):
                listener.enterNoptrabstractdeclarator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator5" ):
                listener.exitNoptrabstractdeclarator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator5" ):
                return visitor.visitNoptrabstractdeclarator5(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator2Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator2" ):
                listener.enterNoptrabstractdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator2" ):
                listener.exitNoptrabstractdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator2" ):
                return visitor.visitNoptrabstractdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator3Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator3" ):
                listener.enterNoptrabstractdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator3" ):
                listener.exitNoptrabstractdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator3" ):
                return visitor.visitNoptrabstractdeclarator3(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractdeclarator1Context(NoptrabstractdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator1" ):
                listener.enterNoptrabstractdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator1" ):
                listener.exitNoptrabstractdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator1" ):
                return visitor.visitNoptrabstractdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Noptrabstractdeclarator2Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1814
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Noptrabstractdeclarator4Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1815
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1816
                    self.constantexpression()


                self.state = 1819
                self.match(CPP14_v2Parser.RightBracket)
                self.state = 1821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1820
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Noptrabstractdeclarator5Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1823
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1824
                self.ptrabstractdeclarator()
                self.state = 1825
                self.match(CPP14_v2Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1840
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Noptrabstractdeclarator1Context(self, CPP14_v2Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1829
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1830
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Noptrabstractdeclarator3Context(self, CPP14_v2Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1831
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1832
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 1834
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1833
                            self.constantexpression()


                        self.state = 1836
                        self.match(CPP14_v2Parser.RightBracket)
                        self.state = 1838
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1837
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_abstractpackdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Abstractpackdeclarator2Context(AbstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractpackdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator2" ):
                listener.enterAbstractpackdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator2" ):
                listener.exitAbstractpackdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator2" ):
                return visitor.visitAbstractpackdeclarator2(self)
            else:
                return visitor.visitChildren(self)


    class Abstractpackdeclarator1Context(AbstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AbstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractpackdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator1" ):
                listener.enterAbstractpackdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator1" ):
                listener.exitAbstractpackdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator1" ):
                return visitor.visitAbstractpackdeclarator1(self)
            else:
                return visitor.visitChildren(self)



    def abstractpackdeclarator(self):

        localctx = CPP14_v2Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Ellipsis]:
                localctx = CPP14_v2Parser.Abstractpackdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1845
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Decltype, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Abstractpackdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.ptroperator()
                self.state = 1847
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noptrabstractpackdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Noptrabstractpackdeclarator3Context(NoptrabstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator3" ):
                listener.enterNoptrabstractpackdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator3" ):
                listener.exitNoptrabstractpackdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator3" ):
                return visitor.visitNoptrabstractpackdeclarator3(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractpackdeclarator1Context(NoptrabstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractpackdeclaratorContext,0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParametersandqualifiersContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator1" ):
                listener.enterNoptrabstractpackdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator1" ):
                listener.exitNoptrabstractpackdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator1" ):
                return visitor.visitNoptrabstractpackdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Noptrabstractpackdeclarator2Context(NoptrabstractpackdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoptrabstractpackdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoptrabstractpackdeclaratorContext,0)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator2" ):
                listener.enterNoptrabstractpackdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator2" ):
                listener.exitNoptrabstractpackdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator2" ):
                return visitor.visitNoptrabstractpackdeclarator2(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Noptrabstractpackdeclarator3Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1852
            self.match(CPP14_v2Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1865
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        localctx = CPP14_v2Parser.Noptrabstractpackdeclarator1Context(self, CPP14_v2Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1854
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1855
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14_v2Parser.Noptrabstractpackdeclarator2Context(self, CPP14_v2Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1856
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1857
                        self.match(CPP14_v2Parser.LeftBracket)
                        self.state = 1859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1858
                            self.constantexpression()


                        self.state = 1861
                        self.match(CPP14_v2Parser.RightBracket)
                        self.state = 1863
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                        if la_ == 1:
                            self.state = 1862
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parameterdeclarationclause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Parameterdeclarationclause2Context(ParameterdeclarationclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause2" ):
                listener.enterParameterdeclarationclause2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause2" ):
                listener.exitParameterdeclarationclause2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause2" ):
                return visitor.visitParameterdeclarationclause2(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclarationclause1Context(ParameterdeclarationclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationlistContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause1" ):
                listener.enterParameterdeclarationclause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause1" ):
                listener.exitParameterdeclarationclause1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause1" ):
                return visitor.visitParameterdeclarationclause1(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationclause(self):

        localctx = CPP14_v2Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Parameterdeclarationclause1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (CPP14_v2Parser.Alignas - 9)) | (1 << (CPP14_v2Parser.Auto - 9)) | (1 << (CPP14_v2Parser.Bool - 9)) | (1 << (CPP14_v2Parser.Char - 9)) | (1 << (CPP14_v2Parser.Char16 - 9)) | (1 << (CPP14_v2Parser.Char32 - 9)) | (1 << (CPP14_v2Parser.Class - 9)) | (1 << (CPP14_v2Parser.Const - 9)) | (1 << (CPP14_v2Parser.Constexpr - 9)) | (1 << (CPP14_v2Parser.Decltype - 9)) | (1 << (CPP14_v2Parser.Double - 9)) | (1 << (CPP14_v2Parser.Enum - 9)) | (1 << (CPP14_v2Parser.Explicit - 9)) | (1 << (CPP14_v2Parser.Extern - 9)) | (1 << (CPP14_v2Parser.Float - 9)) | (1 << (CPP14_v2Parser.Friend - 9)) | (1 << (CPP14_v2Parser.Inline - 9)) | (1 << (CPP14_v2Parser.Int - 9)) | (1 << (CPP14_v2Parser.Long - 9)) | (1 << (CPP14_v2Parser.Mutable - 9)) | (1 << (CPP14_v2Parser.Register - 9)) | (1 << (CPP14_v2Parser.Short - 9)) | (1 << (CPP14_v2Parser.Signed - 9)) | (1 << (CPP14_v2Parser.Static - 9)) | (1 << (CPP14_v2Parser.Struct - 9)) | (1 << (CPP14_v2Parser.Thread_local - 9)))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CPP14_v2Parser.Typedef - 73)) | (1 << (CPP14_v2Parser.Typename_ - 73)) | (1 << (CPP14_v2Parser.Union - 73)) | (1 << (CPP14_v2Parser.Unsigned - 73)) | (1 << (CPP14_v2Parser.Virtual - 73)) | (1 << (CPP14_v2Parser.Void - 73)) | (1 << (CPP14_v2Parser.Volatile - 73)) | (1 << (CPP14_v2Parser.Wchar - 73)) | (1 << (CPP14_v2Parser.LeftBracket - 73)) | (1 << (CPP14_v2Parser.Doublecolon - 73)) | (1 << (CPP14_v2Parser.Identifier - 73)))) != 0):
                    self.state = 1870
                    self.parameterdeclarationlist(0)


                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 1873
                    self.match(CPP14_v2Parser.Ellipsis)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Parameterdeclarationclause2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1876
                self.parameterdeclarationlist(0)
                self.state = 1877
                self.match(CPP14_v2Parser.Comma)
                self.state = 1878
                self.match(CPP14_v2Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterdeclarationlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parameterdeclarationlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Parameterdeclarationlist1Context(ParameterdeclarationlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist1" ):
                listener.enterParameterdeclarationlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist1" ):
                listener.exitParameterdeclarationlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist1" ):
                return visitor.visitParameterdeclarationlist1(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclarationlist2Context(ParameterdeclarationlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist2" ):
                listener.enterParameterdeclarationlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist2" ):
                listener.exitParameterdeclarationlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist2" ):
                return visitor.visitParameterdeclarationlist2(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Parameterdeclarationlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1883
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Parameterdeclarationlist2Context(self, CPP14_v2Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1885
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1886
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1887
                    self.parameterdeclaration() 
                self.state = 1892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_parameterdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Parameterdeclaration1Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration1" ):
                listener.enterParameterdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration1" ):
                listener.exitParameterdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration1" ):
                return visitor.visitParameterdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclaration2Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration2" ):
                listener.enterParameterdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration2" ):
                listener.exitParameterdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration2" ):
                return visitor.visitParameterdeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclaration3Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration3" ):
                listener.enterParameterdeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration3" ):
                listener.exitParameterdeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration3" ):
                return visitor.visitParameterdeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Parameterdeclaration4Context(ParameterdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ParameterdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration4" ):
                listener.enterParameterdeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration4" ):
                listener.exitParameterdeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration4" ):
                return visitor.visitParameterdeclaration4(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclaration(self):

        localctx = CPP14_v2Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Parameterdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1893
                    self.attributespecifierseq(0)


                self.state = 1896
                self.declspecifierseq()
                self.state = 1897
                self.declarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Parameterdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1899
                    self.attributespecifierseq(0)


                self.state = 1902
                self.declspecifierseq()
                self.state = 1903
                self.declarator()
                self.state = 1904
                self.match(CPP14_v2Parser.Assign)
                self.state = 1905
                self.initializerclause()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Parameterdeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1907
                    self.attributespecifierseq(0)


                self.state = 1910
                self.declspecifierseq()
                self.state = 1912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1911
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Parameterdeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 1914
                    self.attributespecifierseq(0)


                self.state = 1917
                self.declspecifierseq()
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.T__2 or _la==CPP14_v2Parser.Decltype or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 1918
                    self.abstractdeclarator()


                self.state = 1921
                self.match(CPP14_v2Parser.Assign)
                self.state = 1922
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefinition" ):
                return visitor.visitFunctiondefinition(self)
            else:
                return visitor.visitChildren(self)




    def functiondefinition(self):

        localctx = CPP14_v2Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                self.state = 1926
                self.attributespecifierseq(0)


            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.declspecifierseq()


            self.state = 1932
            self.declarator()
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Final or _la==CPP14_v2Parser.Override:
                self.state = 1933
                self.virtspecifierseq(0)


            self.state = 1936
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functionbody

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Functionbody1Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)

        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CtorinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody1" ):
                listener.enterFunctionbody1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody1" ):
                listener.exitFunctionbody1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody1" ):
                return visitor.visitFunctionbody1(self)
            else:
                return visitor.visitChildren(self)


    class Functionbody2Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctiontryblockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody2" ):
                listener.enterFunctionbody2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody2" ):
                listener.exitFunctionbody2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody2" ):
                return visitor.visitFunctionbody2(self)
            else:
                return visitor.visitChildren(self)


    class Functionbody3Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def Default(self):
            return self.getToken(CPP14_v2Parser.Default, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody3" ):
                listener.enterFunctionbody3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody3" ):
                listener.exitFunctionbody3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody3" ):
                return visitor.visitFunctionbody3(self)
            else:
                return visitor.visitChildren(self)


    class Functionbody4Context(FunctionbodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.FunctionbodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody4" ):
                listener.enterFunctionbody4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody4" ):
                listener.exitFunctionbody4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody4" ):
                return visitor.visitFunctionbody4(self)
            else:
                return visitor.visitChildren(self)



    def functionbody(self):

        localctx = CPP14_v2Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Functionbody1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 1938
                    self.ctorinitializer()


                self.state = 1941
                self.compoundstatement()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Functionbody2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.functiontryblock()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Functionbody3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1943
                self.match(CPP14_v2Parser.Assign)
                self.state = 1944
                self.match(CPP14_v2Parser.Default)
                self.state = 1945
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Functionbody4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1946
                self.match(CPP14_v2Parser.Assign)
                self.state = 1947
                self.match(CPP14_v2Parser.Delete)
                self.state = 1948
                self.match(CPP14_v2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Initializer2Context(InitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer2" ):
                listener.enterInitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer2" ):
                listener.exitInitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer2" ):
                return visitor.visitInitializer2(self)
            else:
                return visitor.visitChildren(self)


    class Initializer1Context(InitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BraceorequalinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer1" ):
                listener.enterInitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer1" ):
                listener.exitInitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer1" ):
                return visitor.visitInitializer1(self)
            else:
                return visitor.visitChildren(self)



    def initializer(self):

        localctx = CPP14_v2Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_initializer)
        try:
            self.state = 1956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.LeftBrace, CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Initializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1951
                self.braceorequalinitializer()
                pass
            elif token in [CPP14_v2Parser.LeftParen]:
                localctx = CPP14_v2Parser.Initializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1952
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 1953
                self.expressionlist()
                self.state = 1954
                self.match(CPP14_v2Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceorequalinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_braceorequalinitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Braceorequalinitializer1Context(BraceorequalinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BraceorequalinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer1" ):
                listener.enterBraceorequalinitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer1" ):
                listener.exitBraceorequalinitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceorequalinitializer1" ):
                return visitor.visitBraceorequalinitializer1(self)
            else:
                return visitor.visitChildren(self)


    class Braceorequalinitializer2Context(BraceorequalinitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BraceorequalinitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer2" ):
                listener.enterBraceorequalinitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer2" ):
                listener.exitBraceorequalinitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceorequalinitializer2" ):
                return visitor.visitBraceorequalinitializer2(self)
            else:
                return visitor.visitChildren(self)



    def braceorequalinitializer(self):

        localctx = CPP14_v2Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_braceorequalinitializer)
        try:
            self.state = 1961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Assign]:
                localctx = CPP14_v2Parser.Braceorequalinitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1958
                self.match(CPP14_v2Parser.Assign)
                self.state = 1959
                self.initializerclause()
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Braceorequalinitializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initializerclause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Initializerclause2Context(InitializerclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause2" ):
                listener.enterInitializerclause2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause2" ):
                listener.exitInitializerclause2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerclause2" ):
                return visitor.visitInitializerclause2(self)
            else:
                return visitor.visitChildren(self)


    class Initializerclause1Context(InitializerclauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerclauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause1" ):
                listener.enterInitializerclause1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause1" ):
                listener.exitInitializerclause1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerclause1" ):
                return visitor.visitInitializerclause1(self)
            else:
                return visitor.visitChildren(self)



    def initializerclause(self):

        localctx = CPP14_v2Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_initializerclause)
        try:
            self.state = 1965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__0, CPP14_v2Parser.T__1, CPP14_v2Parser.Alignof, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Const_cast, CPP14_v2Parser.Decltype, CPP14_v2Parser.Delete, CPP14_v2Parser.Double, CPP14_v2Parser.Dynamic_cast, CPP14_v2Parser.False1, CPP14_v2Parser.Float, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.New, CPP14_v2Parser.Noexcept, CPP14_v2Parser.Nullptr, CPP14_v2Parser.Operator, CPP14_v2Parser.Reinterpret_cast, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Sizeof, CPP14_v2Parser.Static_cast, CPP14_v2Parser.This, CPP14_v2Parser.Throw, CPP14_v2Parser.True1, CPP14_v2Parser.Typeid_, CPP14_v2Parser.Typename_, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Void, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket, CPP14_v2Parser.Plus, CPP14_v2Parser.Minus, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Or, CPP14_v2Parser.Tilde, CPP14_v2Parser.PlusPlus, CPP14_v2Parser.MinusMinus, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Identifier, CPP14_v2Parser.Integerliteral, CPP14_v2Parser.Characterliteral, CPP14_v2Parser.Floatingliteral, CPP14_v2Parser.Stringliteral, CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Initializerclause1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                self.assignmentexpression()
                pass
            elif token in [CPP14_v2Parser.LeftBrace]:
                localctx = CPP14_v2Parser.Initializerclause2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_initializerlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Initializerlist1Context(InitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist1" ):
                listener.enterInitializerlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist1" ):
                listener.exitInitializerlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist1" ):
                return visitor.visitInitializerlist1(self)
            else:
                return visitor.visitChildren(self)


    class Initializerlist2Context(InitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.InitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def initializerclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerclauseContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist2" ):
                listener.enterInitializerlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist2" ):
                listener.exitInitializerlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist2" ):
                return visitor.visitInitializerlist2(self)
            else:
                return visitor.visitChildren(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Initializerlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1968
            self.initializerclause()
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1969
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Initializerlist2Context(self, CPP14_v2Parser.InitializerlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1972
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1973
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 1974
                    self.initializerclause()
                    self.state = 1976
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                    if la_ == 1:
                        self.state = 1975
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 1982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BracedinitlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_bracedinitlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Bracedinitlist1Context(BracedinitlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BracedinitlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def initializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.InitializerlistContext,0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)
        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist1" ):
                listener.enterBracedinitlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist1" ):
                listener.exitBracedinitlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist1" ):
                return visitor.visitBracedinitlist1(self)
            else:
                return visitor.visitChildren(self)


    class Bracedinitlist2Context(BracedinitlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BracedinitlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)
        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist2" ):
                listener.enterBracedinitlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist2" ):
                listener.exitBracedinitlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist2" ):
                return visitor.visitBracedinitlist2(self)
            else:
                return visitor.visitChildren(self)



    def bracedinitlist(self):

        localctx = CPP14_v2Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Bracedinitlist1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1984
                self.initializerlist(0)
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Comma:
                    self.state = 1985
                    self.match(CPP14_v2Parser.Comma)


                self.state = 1988
                self.match(CPP14_v2Parser.RightBrace)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Bracedinitlist2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1990
                self.match(CPP14_v2Parser.LeftBrace)
                self.state = 1991
                self.match(CPP14_v2Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classname

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classname2Context(ClassnameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassnameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname2" ):
                listener.enterClassname2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname2" ):
                listener.exitClassname2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname2" ):
                return visitor.visitClassname2(self)
            else:
                return visitor.visitChildren(self)


    class Classname1Context(ClassnameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassnameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname1" ):
                listener.enterClassname1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname1" ):
                listener.exitClassname1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname1" ):
                return visitor.visitClassname1(self)
            else:
                return visitor.visitChildren(self)



    def classname(self):

        localctx = CPP14_v2Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classname)
        try:
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Classname1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Classname2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14_v2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14_v2Parser.RightBrace, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassspecifier" ):
                return visitor.visitClassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classspecifier(self):

        localctx = CPP14_v2Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.classhead()
            self.state = 1999
            self.match(CPP14_v2Parser.LeftBrace)
            self.state = 2001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Colon - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                self.state = 2000
                self.memberspecification()


            self.state = 2003
            self.match(CPP14_v2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classhead

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classhead2Context(ClassheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def baseclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BaseclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead2" ):
                listener.enterClasshead2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead2" ):
                listener.exitClasshead2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead2" ):
                return visitor.visitClasshead2(self)
            else:
                return visitor.visitChildren(self)


    class Classhead1Context(ClassheadContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassheadContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classkey(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClasskeyContext,0)

        def classheadname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassheadnameContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassvirtspecifierContext,0)

        def baseclause(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BaseclauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead1" ):
                listener.enterClasshead1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead1" ):
                listener.exitClasshead1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead1" ):
                return visitor.visitClasshead1(self)
            else:
                return visitor.visitChildren(self)



    def classhead(self):

        localctx = CPP14_v2Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 2023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Classhead1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2005
                self.classkey()
                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2006
                    self.attributespecifierseq(0)


                self.state = 2009
                self.classheadname()
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Final:
                    self.state = 2010
                    self.classvirtspecifier()


                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 2013
                    self.baseclause()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Classhead2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2016
                self.classkey()
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2017
                    self.attributespecifierseq(0)


                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Colon:
                    self.state = 2020
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassheadname" ):
                return visitor.visitClassheadname(self)
            else:
                return visitor.visitChildren(self)




    def classheadname(self):

        localctx = CPP14_v2Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2025
                self.nestednamespecifier(0)


            self.state = 2028
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassvirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14_v2Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassvirtspecifier" ):
                return visitor.visitClassvirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classvirtspecifier(self):

        localctx = CPP14_v2Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.match(CPP14_v2Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClasskeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classkey

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classkey3Context(ClasskeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClasskeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Union(self):
            return self.getToken(CPP14_v2Parser.Union, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey3" ):
                listener.enterClasskey3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey3" ):
                listener.exitClasskey3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey3" ):
                return visitor.visitClasskey3(self)
            else:
                return visitor.visitChildren(self)


    class Classkey1Context(ClasskeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClasskeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey1" ):
                listener.enterClasskey1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey1" ):
                listener.exitClasskey1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey1" ):
                return visitor.visitClasskey1(self)
            else:
                return visitor.visitChildren(self)


    class Classkey2Context(ClasskeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClasskeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Struct(self):
            return self.getToken(CPP14_v2Parser.Struct, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey2" ):
                listener.enterClasskey2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey2" ):
                listener.exitClasskey2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey2" ):
                return visitor.visitClasskey2(self)
            else:
                return visitor.visitChildren(self)



    def classkey(self):

        localctx = CPP14_v2Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_classkey)
        try:
            self.state = 2035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Class]:
                localctx = CPP14_v2Parser.Classkey1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2032
                self.match(CPP14_v2Parser.Class)
                pass
            elif token in [CPP14_v2Parser.Struct]:
                localctx = CPP14_v2Parser.Classkey2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2033
                self.match(CPP14_v2Parser.Struct)
                pass
            elif token in [CPP14_v2Parser.Union]:
                localctx = CPP14_v2Parser.Classkey3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2034
                self.match(CPP14_v2Parser.Union)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberspecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Memberspecification1Context(MemberspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclarationContext,0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification1" ):
                listener.enterMemberspecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification1" ):
                listener.exitMemberspecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification1" ):
                return visitor.visitMemberspecification1(self)
            else:
                return visitor.visitChildren(self)


    class Memberspecification2Context(MemberspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AccessspecifierContext,0)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def memberspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification2" ):
                listener.enterMemberspecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification2" ):
                listener.exitMemberspecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification2" ):
                return visitor.visitMemberspecification2(self)
            else:
                return visitor.visitChildren(self)



    def memberspecification(self):

        localctx = CPP14_v2Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.T__2, CPP14_v2Parser.Alignas, CPP14_v2Parser.Auto, CPP14_v2Parser.Bool, CPP14_v2Parser.Char, CPP14_v2Parser.Char16, CPP14_v2Parser.Char32, CPP14_v2Parser.Class, CPP14_v2Parser.Const, CPP14_v2Parser.Constexpr, CPP14_v2Parser.Decltype, CPP14_v2Parser.Double, CPP14_v2Parser.Enum, CPP14_v2Parser.Explicit, CPP14_v2Parser.Extern, CPP14_v2Parser.Float, CPP14_v2Parser.Friend, CPP14_v2Parser.Inline, CPP14_v2Parser.Int, CPP14_v2Parser.Long, CPP14_v2Parser.Mutable, CPP14_v2Parser.Operator, CPP14_v2Parser.Register, CPP14_v2Parser.Short, CPP14_v2Parser.Signed, CPP14_v2Parser.Static, CPP14_v2Parser.Static_assert, CPP14_v2Parser.Struct, CPP14_v2Parser.Template, CPP14_v2Parser.Thread_local, CPP14_v2Parser.Typedef, CPP14_v2Parser.Typename_, CPP14_v2Parser.Union, CPP14_v2Parser.Unsigned, CPP14_v2Parser.Using, CPP14_v2Parser.Virtual, CPP14_v2Parser.Void, CPP14_v2Parser.Volatile, CPP14_v2Parser.Wchar, CPP14_v2Parser.LeftParen, CPP14_v2Parser.LeftBracket, CPP14_v2Parser.Star, CPP14_v2Parser.And, CPP14_v2Parser.Tilde, CPP14_v2Parser.Colon, CPP14_v2Parser.Doublecolon, CPP14_v2Parser.Semi, CPP14_v2Parser.Ellipsis, CPP14_v2Parser.Identifier]:
                localctx = CPP14_v2Parser.Memberspecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2037
                self.memberdeclaration()
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Colon - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                    self.state = 2038
                    self.memberspecification()


                pass
            elif token in [CPP14_v2Parser.Private, CPP14_v2Parser.Protected, CPP14_v2Parser.Public]:
                localctx = CPP14_v2Parser.Memberspecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.accessspecifier()
                self.state = 2042
                self.match(CPP14_v2Parser.Colon)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Constexpr) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.Explicit) | (1 << CPP14_v2Parser.Extern) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Friend) | (1 << CPP14_v2Parser.Inline) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.Mutable) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public) | (1 << CPP14_v2Parser.Register) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Static) | (1 << CPP14_v2Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14_v2Parser.Struct - 65)) | (1 << (CPP14_v2Parser.Template - 65)) | (1 << (CPP14_v2Parser.Thread_local - 65)) | (1 << (CPP14_v2Parser.Typedef - 65)) | (1 << (CPP14_v2Parser.Typename_ - 65)) | (1 << (CPP14_v2Parser.Union - 65)) | (1 << (CPP14_v2Parser.Unsigned - 65)) | (1 << (CPP14_v2Parser.Using - 65)) | (1 << (CPP14_v2Parser.Virtual - 65)) | (1 << (CPP14_v2Parser.Void - 65)) | (1 << (CPP14_v2Parser.Volatile - 65)) | (1 << (CPP14_v2Parser.Wchar - 65)) | (1 << (CPP14_v2Parser.LeftParen - 65)) | (1 << (CPP14_v2Parser.LeftBracket - 65)) | (1 << (CPP14_v2Parser.Star - 65)) | (1 << (CPP14_v2Parser.And - 65)) | (1 << (CPP14_v2Parser.Tilde - 65)) | (1 << (CPP14_v2Parser.Colon - 65)) | (1 << (CPP14_v2Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14_v2Parser.Semi - 129)) | (1 << (CPP14_v2Parser.Ellipsis - 129)) | (1 << (CPP14_v2Parser.Identifier - 129)))) != 0):
                    self.state = 2043
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberdeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Memberdeclaration4Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.Static_assertdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration4" ):
                listener.enterMemberdeclaration4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration4" ):
                listener.exitMemberdeclaration4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration4" ):
                return visitor.visitMemberdeclaration4(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration5Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplatedeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration5" ):
                listener.enterMemberdeclaration5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration5" ):
                listener.exitMemberdeclaration5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration5" ):
                return visitor.visitMemberdeclaration5(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration6Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AliasdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration6" ):
                listener.enterMemberdeclaration6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration6" ):
                listener.exitMemberdeclaration6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration6" ):
                return visitor.visitMemberdeclaration6(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration7Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.EmptydeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration7" ):
                listener.enterMemberdeclaration7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration7" ):
                listener.exitMemberdeclaration7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration7" ):
                return visitor.visitMemberdeclaration7(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration1Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Semi(self):
            return self.getToken(CPP14_v2Parser.Semi, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclspecifierseqContext,0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration1" ):
                listener.enterMemberdeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration1" ):
                listener.exitMemberdeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration1" ):
                return visitor.visitMemberdeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration2Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14_v2Parser.FunctiondefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration2" ):
                listener.enterMemberdeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration2" ):
                listener.exitMemberdeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration2" ):
                return visitor.visitMemberdeclaration2(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaration3Context(MemberdeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UsingdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration3" ):
                listener.enterMemberdeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration3" ):
                listener.exitMemberdeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration3" ):
                return visitor.visitMemberdeclaration3(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaration(self):

        localctx = CPP14_v2Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Memberdeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 2048
                    self.attributespecifierseq(0)


                self.state = 2052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2051
                    self.declspecifierseq()


                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__2) | (1 << CPP14_v2Parser.Alignas) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Operator))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Tilde - 84)) | (1 << (CPP14_v2Parser.Colon - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 2054
                    self.memberdeclaratorlist(0)


                self.state = 2057
                self.match(CPP14_v2Parser.Semi)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Memberdeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self.functiondefinition()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Memberdeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2059
                self.usingdeclaration()
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Memberdeclaration4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2060
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Memberdeclaration5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2061
                self.templatedeclaration()
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Memberdeclaration6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2062
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Memberdeclaration7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2063
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberdeclaratorlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Memberdeclaratorlis1Context(MemberdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlis1" ):
                listener.enterMemberdeclaratorlis1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlis1" ):
                listener.exitMemberdeclaratorlis1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlis1" ):
                return visitor.visitMemberdeclaratorlis1(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclaratorlis2Context(MemberdeclaratorlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MemberdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlis2" ):
                listener.enterMemberdeclaratorlis2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlis2" ):
                listener.exitMemberdeclaratorlis2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlis2" ):
                return visitor.visitMemberdeclaratorlis2(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 306
        self.enterRecursionRule(localctx, 306, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Memberdeclaratorlis1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2067
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Memberdeclaratorlis2Context(self, CPP14_v2Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2069
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2070
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2071
                    self.memberdeclarator() 
                self.state = 2076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MemberdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_memberdeclarator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Memberdeclarator3Context(MemberdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)
        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator3" ):
                listener.enterMemberdeclarator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator3" ):
                listener.exitMemberdeclarator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator3" ):
                return visitor.visitMemberdeclarator3(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclarator1Context(MemberdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierseqContext,0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PurespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator1" ):
                listener.enterMemberdeclarator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator1" ):
                listener.exitMemberdeclarator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator1" ):
                return visitor.visitMemberdeclarator1(self)
            else:
                return visitor.visitChildren(self)


    class Memberdeclarator2Context(MemberdeclaratorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MemberdeclaratorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BraceorequalinitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator2" ):
                listener.enterMemberdeclarator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator2" ):
                listener.exitMemberdeclarator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator2" ):
                return visitor.visitMemberdeclarator2(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclarator(self):

        localctx = CPP14_v2Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Memberdeclarator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2077
                self.declarator()
                self.state = 2079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2078
                    self.virtspecifierseq(0)


                self.state = 2082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2081
                    self.purespecifier()


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Memberdeclarator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2084
                self.declarator()
                self.state = 2086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2085
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Memberdeclarator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2088
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2091
                    self.attributespecifierseq(0)


                self.state = 2094
                self.match(CPP14_v2Parser.Colon)
                self.state = 2095
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_virtspecifierseq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Virtspecifierseq1Context(VirtspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq1" ):
                listener.enterVirtspecifierseq1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq1" ):
                listener.exitVirtspecifierseq1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq1" ):
                return visitor.visitVirtspecifierseq1(self)
            else:
                return visitor.visitChildren(self)


    class Virtspecifierseq2Context(VirtspecifierseqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierseqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierseqContext,0)

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.VirtspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq2" ):
                listener.enterVirtspecifierseq2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq2" ):
                listener.exitVirtspecifierseq2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq2" ):
                return visitor.visitVirtspecifierseq2(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 310
        self.enterRecursionRule(localctx, 310, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Virtspecifierseq1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2099
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Virtspecifierseq2Context(self, CPP14_v2Parser.VirtspecifierseqContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2101
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2102
                    self.virtspecifier() 
                self.state = 2107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_virtspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Virtspecifier1Context(VirtspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Override(self):
            return self.getToken(CPP14_v2Parser.Override, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier1" ):
                listener.enterVirtspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier1" ):
                listener.exitVirtspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier1" ):
                return visitor.visitVirtspecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Virtspecifier2Context(VirtspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.VirtspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Final(self):
            return self.getToken(CPP14_v2Parser.Final, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier2" ):
                listener.enterVirtspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier2" ):
                listener.exitVirtspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier2" ):
                return visitor.visitVirtspecifier2(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifier(self):

        localctx = CPP14_v2Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_virtspecifier)
        try:
            self.state = 2110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Override]:
                localctx = CPP14_v2Parser.Virtspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self.match(CPP14_v2Parser.Override)
                pass
            elif token in [CPP14_v2Parser.Final]:
                localctx = CPP14_v2Parser.Virtspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                self.match(CPP14_v2Parser.Final)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14_v2Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurespecifier" ):
                return visitor.visitPurespecifier(self)
            else:
                return visitor.visitChildren(self)




    def purespecifier(self):

        localctx = CPP14_v2Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(CPP14_v2Parser.Assign)
            self.state = 2113
            localctx.val = self.match(CPP14_v2Parser.Octalliteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseclause" ):
                return visitor.visitBaseclause(self)
            else:
                return visitor.visitChildren(self)




    def baseclause(self):

        localctx = CPP14_v2Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(CPP14_v2Parser.Colon)
            self.state = 2116
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasespecifierlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_basespecifierlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Basespecifierlist2Context(BasespecifierlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def basespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist2" ):
                listener.enterBasespecifierlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist2" ):
                listener.exitBasespecifierlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist2" ):
                return visitor.visitBasespecifierlist2(self)
            else:
                return visitor.visitChildren(self)


    class Basespecifierlist1Context(BasespecifierlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasespecifierContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist1" ):
                listener.enterBasespecifierlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist1" ):
                listener.exitBasespecifierlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist1" ):
                return visitor.visitBasespecifierlist1(self)
            else:
                return visitor.visitChildren(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Basespecifierlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2119
            self.basespecifier()
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 2120
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Basespecifierlist2Context(self, CPP14_v2Parser.BasespecifierlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2123
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2124
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2125
                    self.basespecifier()
                    self.state = 2127
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 2126
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 2133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_basespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Basespecifier2Context(BasespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Virtual(self):
            return self.getToken(CPP14_v2Parser.Virtual, 0)
        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasetypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AccessspecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier2" ):
                listener.enterBasespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier2" ):
                listener.exitBasespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier2" ):
                return visitor.visitBasespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Basespecifier1Context(BasespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasetypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier1" ):
                listener.enterBasespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier1" ):
                listener.exitBasespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier1" ):
                return visitor.visitBasespecifier1(self)
            else:
                return visitor.visitChildren(self)


    class Basespecifier3Context(BasespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BasespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AccessspecifierContext,0)

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BasetypespecifierContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def Virtual(self):
            return self.getToken(CPP14_v2Parser.Virtual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier3" ):
                listener.enterBasespecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier3" ):
                listener.exitBasespecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier3" ):
                return visitor.visitBasespecifier3(self)
            else:
                return visitor.visitChildren(self)



    def basespecifier(self):

        localctx = CPP14_v2Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Basespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2134
                    self.attributespecifierseq(0)


                self.state = 2137
                self.basetypespecifier()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Basespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2138
                    self.attributespecifierseq(0)


                self.state = 2141
                self.match(CPP14_v2Parser.Virtual)
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.Private) | (1 << CPP14_v2Parser.Protected) | (1 << CPP14_v2Parser.Public))) != 0):
                    self.state = 2142
                    self.accessspecifier()


                self.state = 2145
                self.basetypespecifier()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Basespecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2146
                    self.attributespecifierseq(0)


                self.state = 2149
                self.accessspecifier()
                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Virtual:
                    self.state = 2150
                    self.match(CPP14_v2Parser.Virtual)


                self.state = 2153
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassordecltypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_classordecltype

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Classordecltype2Context(ClassordecltypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassordecltypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DecltypespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype2" ):
                listener.enterClassordecltype2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype2" ):
                listener.exitClassordecltype2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype2" ):
                return visitor.visitClassordecltype2(self)
            else:
                return visitor.visitChildren(self)


    class Classordecltype1Context(ClassordecltypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ClassordecltypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classname(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassnameContext,0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype1" ):
                listener.enterClassordecltype1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype1" ):
                listener.exitClassordecltype1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype1" ):
                return visitor.visitClassordecltype1(self)
            else:
                return visitor.visitChildren(self)



    def classordecltype(self):

        localctx = CPP14_v2Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_classordecltype)
        try:
            self.state = 2162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Classordecltype1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2157
                    self.nestednamespecifier(0)


                self.state = 2160
                self.classname()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Classordecltype2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2161
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasetypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasetypespecifier" ):
                return visitor.visitBasetypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basetypespecifier(self):

        localctx = CPP14_v2Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_accessspecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Accessspecifier2Context(AccessspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AccessspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Protected(self):
            return self.getToken(CPP14_v2Parser.Protected, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier2" ):
                listener.enterAccessspecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier2" ):
                listener.exitAccessspecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier2" ):
                return visitor.visitAccessspecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Accessspecifier3Context(AccessspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AccessspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Public(self):
            return self.getToken(CPP14_v2Parser.Public, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier3" ):
                listener.enterAccessspecifier3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier3" ):
                listener.exitAccessspecifier3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier3" ):
                return visitor.visitAccessspecifier3(self)
            else:
                return visitor.visitChildren(self)


    class Accessspecifier1Context(AccessspecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.AccessspecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Private(self):
            return self.getToken(CPP14_v2Parser.Private, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier1" ):
                listener.enterAccessspecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier1" ):
                listener.exitAccessspecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier1" ):
                return visitor.visitAccessspecifier1(self)
            else:
                return visitor.visitChildren(self)



    def accessspecifier(self):

        localctx = CPP14_v2Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_accessspecifier)
        try:
            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Private]:
                localctx = CPP14_v2Parser.Accessspecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2166
                self.match(CPP14_v2Parser.Private)
                pass
            elif token in [CPP14_v2Parser.Protected]:
                localctx = CPP14_v2Parser.Accessspecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2167
                self.match(CPP14_v2Parser.Protected)
                pass
            elif token in [CPP14_v2Parser.Public]:
                localctx = CPP14_v2Parser.Accessspecifier3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2168
                self.match(CPP14_v2Parser.Public)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversionfunctionid" ):
                return visitor.visitConversionfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def conversionfunctionid(self):

        localctx = CPP14_v2Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(CPP14_v2Parser.Operator)
            self.state = 2172
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiontypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiontypeid" ):
                return visitor.visitConversiontypeid(self)
            else:
                return visitor.visitChildren(self)




    def conversiontypeid(self):

        localctx = CPP14_v2Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            self.typespecifierseq()
            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2175
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiondeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiondeclarator" ):
                return visitor.visitConversiondeclarator(self)
            else:
                return visitor.visitChildren(self)




    def conversiondeclarator(self):

        localctx = CPP14_v2Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self.ptroperator()
            self.state = 2180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2179
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtorinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14_v2Parser.Colon, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtorinitializer" ):
                return visitor.visitCtorinitializer(self)
            else:
                return visitor.visitChildren(self)




    def ctorinitializer(self):

        localctx = CPP14_v2Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self.match(CPP14_v2Parser.Colon)
            self.state = 2183
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_meminitializerlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meminitializerlist1Context(MeminitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist1" ):
                listener.enterMeminitializerlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist1" ):
                listener.exitMeminitializerlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist1" ):
                return visitor.visitMeminitializerlist1(self)
            else:
                return visitor.visitChildren(self)


    class Meminitializerlist2Context(MeminitializerlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializerlistContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist2" ):
                listener.enterMeminitializerlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist2" ):
                listener.exitMeminitializerlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist2" ):
                return visitor.visitMeminitializerlist2(self)
            else:
                return visitor.visitChildren(self)



    def meminitializerlist(self):

        localctx = CPP14_v2Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Meminitializerlist1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2185
                self.meminitializer()
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 2186
                    self.match(CPP14_v2Parser.Ellipsis)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Meminitializerlist2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2189
                self.meminitializer()
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Ellipsis:
                    self.state = 2190
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2193
                self.match(CPP14_v2Parser.Comma)
                self.state = 2194
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_meminitializer

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meminitializer2Context(MeminitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializeridContext,0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BracedinitlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer2" ):
                listener.enterMeminitializer2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer2" ):
                listener.exitMeminitializer2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer2" ):
                return visitor.visitMeminitializer2(self)
            else:
                return visitor.visitChildren(self)


    class Meminitializer1Context(MeminitializerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.MeminitializeridContext,0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)
        def expressionlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExpressionlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer1" ):
                listener.enterMeminitializer1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer1" ):
                listener.exitMeminitializer1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer1" ):
                return visitor.visitMeminitializer1(self)
            else:
                return visitor.visitChildren(self)



    def meminitializer(self):

        localctx = CPP14_v2Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Meminitializer1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2198
                self.meminitializerid()
                self.state = 2199
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.Throw - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.LeftBrace - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2200
                    self.expressionlist()


                self.state = 2203
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Meminitializer2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.meminitializerid()
                self.state = 2206
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_meminitializerid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Meminitializerid1Context(MeminitializeridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializeridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ClassordecltypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid1" ):
                listener.enterMeminitializerid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid1" ):
                listener.exitMeminitializerid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid1" ):
                return visitor.visitMeminitializerid1(self)
            else:
                return visitor.visitChildren(self)


    class Meminitializerid2Context(MeminitializeridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.MeminitializeridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid2" ):
                listener.enterMeminitializerid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid2" ):
                listener.exitMeminitializerid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid2" ):
                return visitor.visitMeminitializerid2(self)
            else:
                return visitor.visitChildren(self)



    def meminitializerid(self):

        localctx = CPP14_v2Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_meminitializerid)
        try:
            self.state = 2212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Meminitializerid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2210
                self.classordecltype()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Meminitializerid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2211
                self.match(CPP14_v2Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TheoperatorContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorfunctionid" ):
                return visitor.visitOperatorfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def operatorfunctionid(self):

        localctx = CPP14_v2Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.match(CPP14_v2Parser.Operator)
            self.state = 2215
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteraloperatoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_literaloperatorid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Literaloperatorid2Context(LiteraloperatoridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteraloperatoridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)
        def Userdefinedstringliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedstringliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid2" ):
                listener.enterLiteraloperatorid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid2" ):
                listener.exitLiteraloperatorid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid2" ):
                return visitor.visitLiteraloperatorid2(self)
            else:
                return visitor.visitChildren(self)


    class Literaloperatorid1Context(LiteraloperatoridContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteraloperatoridContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Operator(self):
            return self.getToken(CPP14_v2Parser.Operator, 0)
        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid1" ):
                listener.enterLiteraloperatorid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid1" ):
                listener.exitLiteraloperatorid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid1" ):
                return visitor.visitLiteraloperatorid1(self)
            else:
                return visitor.visitChildren(self)



    def literaloperatorid(self):

        localctx = CPP14_v2Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_literaloperatorid)
        try:
            self.state = 2222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Literaloperatorid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2217
                self.match(CPP14_v2Parser.Operator)
                self.state = 2218
                self.match(CPP14_v2Parser.Stringliteral)
                self.state = 2219
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Literaloperatorid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2220
                self.match(CPP14_v2Parser.Operator)
                self.state = 2221
                self.match(CPP14_v2Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatedeclaration" ):
                return visitor.visitTemplatedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def templatedeclaration(self):

        localctx = CPP14_v2Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.match(CPP14_v2Parser.Template)
            self.state = 2225
            self.match(CPP14_v2Parser.Less)
            self.state = 2226
            self.templateparameterlist(0)
            self.state = 2227
            self.match(CPP14_v2Parser.Greater)
            self.state = 2228
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateparameterlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Templateparameterlist1Context(TemplateparameterlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist1" ):
                listener.enterTemplateparameterlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist1" ):
                listener.exitTemplateparameterlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist1" ):
                return visitor.visitTemplateparameterlist1(self)
            else:
                return visitor.visitChildren(self)


    class Templateparameterlist2Context(TemplateparameterlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def templateparameter(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist2" ):
                listener.enterTemplateparameterlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist2" ):
                listener.exitTemplateparameterlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist2" ):
                return visitor.visitTemplateparameterlist2(self)
            else:
                return visitor.visitChildren(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 348
        self.enterRecursionRule(localctx, 348, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Templateparameterlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2231
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Templateparameterlist2Context(self, CPP14_v2Parser.TemplateparameterlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2233
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2234
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2235
                    self.templateparameter() 
                self.state = 2240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateparameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Templateparameter1Context(TemplateparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeparameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter1" ):
                listener.enterTemplateparameter1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter1" ):
                listener.exitTemplateparameter1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter1" ):
                return visitor.visitTemplateparameter1(self)
            else:
                return visitor.visitChildren(self)


    class Templateparameter2Context(TemplateparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ParameterdeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter2" ):
                listener.enterTemplateparameter2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter2" ):
                listener.exitTemplateparameter2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter2" ):
                return visitor.visitTemplateparameter2(self)
            else:
                return visitor.visitChildren(self)



    def templateparameter(self):

        localctx = CPP14_v2Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateparameter)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Templateparameter1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.typeparameter()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Templateparameter2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeparameter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typeparameter1Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter1" ):
                listener.enterTypeparameter1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter1" ):
                listener.exitTypeparameter1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter1" ):
                return visitor.visitTypeparameter1(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter2Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter2" ):
                listener.enterTypeparameter2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter2" ):
                listener.exitTypeparameter2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter2" ):
                return visitor.visitTypeparameter2(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter3Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter3" ):
                listener.enterTypeparameter3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter3" ):
                listener.exitTypeparameter3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter3" ):
                return visitor.visitTypeparameter3(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter4Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter4" ):
                listener.enterTypeparameter4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter4" ):
                listener.exitTypeparameter4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter4" ):
                return visitor.visitTypeparameter4(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter5Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)
        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter5" ):
                listener.enterTypeparameter5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter5" ):
                listener.exitTypeparameter5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter5" ):
                return visitor.visitTypeparameter5(self)
            else:
                return visitor.visitChildren(self)


    class Typeparameter6Context(TypeparameterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeparameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)
        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateparameterlistContext,0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def Class(self):
            return self.getToken(CPP14_v2Parser.Class, 0)
        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)
        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter6" ):
                listener.enterTypeparameter6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter6" ):
                listener.exitTypeparameter6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter6" ):
                return visitor.visitTypeparameter6(self)
            else:
                return visitor.visitChildren(self)



    def typeparameter(self):

        localctx = CPP14_v2Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typeparameter1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2245
                self.match(CPP14_v2Parser.Class)
                self.state = 2247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2246
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 2249
                    self.match(CPP14_v2Parser.Identifier)


                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typeparameter2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2252
                self.match(CPP14_v2Parser.Class)
                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2253
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2256
                self.match(CPP14_v2Parser.Assign)
                self.state = 2257
                self.thetypeid()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Typeparameter3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2258
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2259
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 2262
                    self.match(CPP14_v2Parser.Identifier)


                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Typeparameter4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2265
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2266
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2269
                self.match(CPP14_v2Parser.Assign)
                self.state = 2270
                self.thetypeid()
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Typeparameter5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2271
                self.match(CPP14_v2Parser.Template)
                self.state = 2272
                self.match(CPP14_v2Parser.Less)
                self.state = 2273
                self.templateparameterlist(0)
                self.state = 2274
                self.match(CPP14_v2Parser.Greater)
                self.state = 2275
                self.match(CPP14_v2Parser.Class)
                self.state = 2277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2276
                    self.match(CPP14_v2Parser.Ellipsis)


                self.state = 2280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2279
                    self.match(CPP14_v2Parser.Identifier)


                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Typeparameter6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2282
                self.match(CPP14_v2Parser.Template)
                self.state = 2283
                self.match(CPP14_v2Parser.Less)
                self.state = 2284
                self.templateparameterlist(0)
                self.state = 2285
                self.match(CPP14_v2Parser.Greater)
                self.state = 2286
                self.match(CPP14_v2Parser.Class)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Identifier:
                    self.state = 2287
                    self.match(CPP14_v2Parser.Identifier)


                self.state = 2290
                self.match(CPP14_v2Parser.Assign)
                self.state = 2291
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplatenameContext,0)


        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletemplateid" ):
                return visitor.visitSimpletemplateid(self)
            else:
                return visitor.visitChildren(self)




    def simpletemplateid(self):

        localctx = CPP14_v2Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.templatename()
            self.state = 2296
            self.match(CPP14_v2Parser.Less)
            self.state = 2298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 2297
                self.templateargumentlist(0)


            self.state = 2300
            self.match(CPP14_v2Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Templateid3Context(TemplateidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.LiteraloperatoridContext,0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid3" ):
                listener.enterTemplateid3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid3" ):
                listener.exitTemplateid3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid3" ):
                return visitor.visitTemplateid3(self)
            else:
                return visitor.visitChildren(self)


    class Templateid1Context(TemplateidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid1" ):
                listener.enterTemplateid1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid1" ):
                listener.exitTemplateid1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid1" ):
                return visitor.visitTemplateid1(self)
            else:
                return visitor.visitChildren(self)


    class Templateid2Context(TemplateidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.OperatorfunctionidContext,0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)
        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)
        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid2" ):
                listener.enterTemplateid2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid2" ):
                listener.exitTemplateid2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid2" ):
                return visitor.visitTemplateid2(self)
            else:
                return visitor.visitChildren(self)



    def templateid(self):

        localctx = CPP14_v2Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Templateid1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2302
                self.simpletemplateid()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Templateid2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2303
                self.operatorfunctionid()
                self.state = 2304
                self.match(CPP14_v2Parser.Less)
                self.state = 2306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2305
                    self.templateargumentlist(0)


                self.state = 2308
                self.match(CPP14_v2Parser.Greater)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Templateid3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2310
                self.literaloperatorid()
                self.state = 2311
                self.match(CPP14_v2Parser.Less)
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14_v2Parser.T__0) | (1 << CPP14_v2Parser.T__1) | (1 << CPP14_v2Parser.Alignof) | (1 << CPP14_v2Parser.Auto) | (1 << CPP14_v2Parser.Bool) | (1 << CPP14_v2Parser.Char) | (1 << CPP14_v2Parser.Char16) | (1 << CPP14_v2Parser.Char32) | (1 << CPP14_v2Parser.Class) | (1 << CPP14_v2Parser.Const) | (1 << CPP14_v2Parser.Const_cast) | (1 << CPP14_v2Parser.Decltype) | (1 << CPP14_v2Parser.Delete) | (1 << CPP14_v2Parser.Double) | (1 << CPP14_v2Parser.Dynamic_cast) | (1 << CPP14_v2Parser.Enum) | (1 << CPP14_v2Parser.False1) | (1 << CPP14_v2Parser.Float) | (1 << CPP14_v2Parser.Int) | (1 << CPP14_v2Parser.Long) | (1 << CPP14_v2Parser.New) | (1 << CPP14_v2Parser.Noexcept) | (1 << CPP14_v2Parser.Nullptr) | (1 << CPP14_v2Parser.Operator) | (1 << CPP14_v2Parser.Reinterpret_cast) | (1 << CPP14_v2Parser.Short) | (1 << CPP14_v2Parser.Signed) | (1 << CPP14_v2Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14_v2Parser.Static_cast - 64)) | (1 << (CPP14_v2Parser.Struct - 64)) | (1 << (CPP14_v2Parser.This - 64)) | (1 << (CPP14_v2Parser.True1 - 64)) | (1 << (CPP14_v2Parser.Typeid_ - 64)) | (1 << (CPP14_v2Parser.Typename_ - 64)) | (1 << (CPP14_v2Parser.Union - 64)) | (1 << (CPP14_v2Parser.Unsigned - 64)) | (1 << (CPP14_v2Parser.Void - 64)) | (1 << (CPP14_v2Parser.Volatile - 64)) | (1 << (CPP14_v2Parser.Wchar - 64)) | (1 << (CPP14_v2Parser.LeftParen - 64)) | (1 << (CPP14_v2Parser.LeftBracket - 64)) | (1 << (CPP14_v2Parser.Plus - 64)) | (1 << (CPP14_v2Parser.Minus - 64)) | (1 << (CPP14_v2Parser.Star - 64)) | (1 << (CPP14_v2Parser.And - 64)) | (1 << (CPP14_v2Parser.Or - 64)) | (1 << (CPP14_v2Parser.Tilde - 64)) | (1 << (CPP14_v2Parser.PlusPlus - 64)) | (1 << (CPP14_v2Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14_v2Parser.Doublecolon - 128)) | (1 << (CPP14_v2Parser.Identifier - 128)) | (1 << (CPP14_v2Parser.Integerliteral - 128)) | (1 << (CPP14_v2Parser.Characterliteral - 128)) | (1 << (CPP14_v2Parser.Floatingliteral - 128)) | (1 << (CPP14_v2Parser.Stringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14_v2Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2312
                    self.templateargumentlist(0)


                self.state = 2315
                self.match(CPP14_v2Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatename" ):
                return visitor.visitTemplatename(self)
            else:
                return visitor.visitChildren(self)




    def templatename(self):

        localctx = CPP14_v2Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(CPP14_v2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateargumentlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateargumentlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Templateargumentlist2Context(TemplateargumentlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def templateargument(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist2" ):
                listener.enterTemplateargumentlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist2" ):
                listener.exitTemplateargumentlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist2" ):
                return visitor.visitTemplateargumentlist2(self)
            else:
                return visitor.visitChildren(self)


    class Templateargumentlist1Context(TemplateargumentlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateargument(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TemplateargumentContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist1" ):
                listener.enterTemplateargumentlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist1" ):
                listener.exitTemplateargumentlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist1" ):
                return visitor.visitTemplateargumentlist1(self)
            else:
                return visitor.visitChildren(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Templateargumentlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2322
            self.templateargument()
            self.state = 2324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2323
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Templateargumentlist2Context(self, CPP14_v2Parser.TemplateargumentlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2326
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2327
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2328
                    self.templateargument()
                    self.state = 2330
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        self.state = 2329
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 2336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateargumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_templateargument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Templateargument3Context(TemplateargumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.IdexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument3" ):
                listener.enterTemplateargument3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument3" ):
                listener.exitTemplateargument3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument3" ):
                return visitor.visitTemplateargument3(self)
            else:
                return visitor.visitChildren(self)


    class Templateargument2Context(TemplateargumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument2" ):
                listener.enterTemplateargument2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument2" ):
                listener.exitTemplateargument2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument2" ):
                return visitor.visitTemplateargument2(self)
            else:
                return visitor.visitChildren(self)


    class Templateargument1Context(TemplateargumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TemplateargumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument1" ):
                listener.enterTemplateargument1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument1" ):
                listener.exitTemplateargument1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument1" ):
                return visitor.visitTemplateargument1(self)
            else:
                return visitor.visitChildren(self)



    def templateargument(self):

        localctx = CPP14_v2Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_templateargument)
        try:
            self.state = 2340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Templateargument1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2337
                self.thetypeid()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Templateargument2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.constantexpression()
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Templateargument3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2339
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typenamespecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Typenamespecifier2Context(TypenamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypenamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.SimpletemplateidContext,0)

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier2" ):
                listener.enterTypenamespecifier2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier2" ):
                listener.exitTypenamespecifier2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier2" ):
                return visitor.visitTypenamespecifier2(self)
            else:
                return visitor.visitChildren(self)


    class Typenamespecifier1Context(TypenamespecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypenamespecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typename_(self):
            return self.getToken(CPP14_v2Parser.Typename_, 0)
        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NestednamespecifierContext,0)

        def Identifier(self):
            return self.getToken(CPP14_v2Parser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier1" ):
                listener.enterTypenamespecifier1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier1" ):
                listener.exitTypenamespecifier1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier1" ):
                return visitor.visitTypenamespecifier1(self)
            else:
                return visitor.visitChildren(self)



    def typenamespecifier(self):

        localctx = CPP14_v2Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Typenamespecifier1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2343
                self.nestednamespecifier(0)
                self.state = 2344
                self.match(CPP14_v2Parser.Identifier)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Typenamespecifier2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                self.match(CPP14_v2Parser.Typename_)
                self.state = 2347
                self.nestednamespecifier(0)
                self.state = 2349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Template:
                    self.state = 2348
                    self.match(CPP14_v2Parser.Template)


                self.state = 2351
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitinstantiationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14_v2Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitinstantiation" ):
                return visitor.visitExplicitinstantiation(self)
            else:
                return visitor.visitChildren(self)




    def explicitinstantiation(self):

        localctx = CPP14_v2Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Extern:
                self.state = 2355
                self.match(CPP14_v2Parser.Extern)


            self.state = 2358
            self.match(CPP14_v2Parser.Template)
            self.state = 2359
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitspecializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14_v2Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitspecialization" ):
                return visitor.visitExplicitspecialization(self)
            else:
                return visitor.visitChildren(self)




    def explicitspecialization(self):

        localctx = CPP14_v2Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(CPP14_v2Parser.Template)
            self.state = 2362
            self.match(CPP14_v2Parser.Less)
            self.state = 2363
            self.match(CPP14_v2Parser.Greater)
            self.state = 2364
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14_v2Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryblock" ):
                return visitor.visitTryblock(self)
            else:
                return visitor.visitChildren(self)




    def tryblock(self):

        localctx = CPP14_v2Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.match(CPP14_v2Parser.Try)
            self.state = 2367
            self.compoundstatement()
            self.state = 2368
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiontryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14_v2Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiontryblock" ):
                return visitor.visitFunctiontryblock(self)
            else:
                return visitor.visitChildren(self)




    def functiontryblock(self):

        localctx = CPP14_v2Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2370
            self.match(CPP14_v2Parser.Try)
            self.state = 2372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14_v2Parser.Colon:
                self.state = 2371
                self.ctorinitializer()


            self.state = 2374
            self.compoundstatement()
            self.state = 2375
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerseq" ):
                return visitor.visitHandlerseq(self)
            else:
                return visitor.visitChildren(self)




    def handlerseq(self):

        localctx = CPP14_v2Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.handler()
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2378
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14_v2Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ExceptiondeclarationContext,0)


        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14_v2Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler" ):
                return visitor.visitHandler(self)
            else:
                return visitor.visitChildren(self)




    def handler(self):

        localctx = CPP14_v2Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.match(CPP14_v2Parser.Catch)
            self.state = 2382
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 2383
            self.exceptiondeclaration()
            self.state = 2384
            self.match(CPP14_v2Parser.RightParen)
            self.state = 2385
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptiondeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_exceptiondeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Exceptiondeclaration3Context(ExceptiondeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptiondeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration3" ):
                listener.enterExceptiondeclaration3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration3" ):
                listener.exitExceptiondeclaration3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration3" ):
                return visitor.visitExceptiondeclaration3(self)
            else:
                return visitor.visitChildren(self)


    class Exceptiondeclaration1Context(ExceptiondeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptiondeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DeclaratorContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration1" ):
                listener.enterExceptiondeclaration1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration1" ):
                listener.exitExceptiondeclaration1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration1" ):
                return visitor.visitExceptiondeclaration1(self)
            else:
                return visitor.visitChildren(self)


    class Exceptiondeclaration2Context(ExceptiondeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptiondeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypespecifierseqContext,0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AttributespecifierseqContext,0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AbstractdeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration2" ):
                listener.enterExceptiondeclaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration2" ):
                listener.exitExceptiondeclaration2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration2" ):
                return visitor.visitExceptiondeclaration2(self)
            else:
                return visitor.visitChildren(self)



    def exceptiondeclaration(self):

        localctx = CPP14_v2Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Exceptiondeclaration1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2387
                    self.attributespecifierseq(0)


                self.state = 2390
                self.typespecifierseq()
                self.state = 2391
                self.declarator()
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Exceptiondeclaration2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.Alignas or _la==CPP14_v2Parser.LeftBracket:
                    self.state = 2393
                    self.attributespecifierseq(0)


                self.state = 2396
                self.typespecifierseq()
                self.state = 2398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14_v2Parser.T__2 or _la==CPP14_v2Parser.Decltype or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14_v2Parser.LeftParen - 84)) | (1 << (CPP14_v2Parser.LeftBracket - 84)) | (1 << (CPP14_v2Parser.Star - 84)) | (1 << (CPP14_v2Parser.And - 84)) | (1 << (CPP14_v2Parser.Doublecolon - 84)) | (1 << (CPP14_v2Parser.Ellipsis - 84)) | (1 << (CPP14_v2Parser.Identifier - 84)))) != 0):
                    self.state = 2397
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Exceptiondeclaration3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2400
                self.match(CPP14_v2Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14_v2Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowexpression" ):
                return visitor.visitThrowexpression(self)
            else:
                return visitor.visitChildren(self)




    def throwexpression(self):

        localctx = CPP14_v2Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2403
            self.match(CPP14_v2Parser.Throw)
            self.state = 2405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2404
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_exceptionspecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Exceptionspecification2Context(ExceptionspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptionspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.NoexceptspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification2" ):
                listener.enterExceptionspecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification2" ):
                listener.exitExceptionspecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification2" ):
                return visitor.visitExceptionspecification2(self)
            else:
                return visitor.visitChildren(self)


    class Exceptionspecification1Context(ExceptionspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.ExceptionspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14_v2Parser.DynamicexceptionspecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification1" ):
                listener.enterExceptionspecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification1" ):
                listener.exitExceptionspecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification1" ):
                return visitor.visitExceptionspecification1(self)
            else:
                return visitor.visitChildren(self)



    def exceptionspecification(self):

        localctx = CPP14_v2Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_exceptionspecification)
        try:
            self.state = 2409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Throw]:
                localctx = CPP14_v2Parser.Exceptionspecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2407
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14_v2Parser.Noexcept]:
                localctx = CPP14_v2Parser.Exceptionspecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2408
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicexceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14_v2Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicexceptionspecification" ):
                return visitor.visitDynamicexceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def dynamicexceptionspecification(self):

        localctx = CPP14_v2Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self.match(CPP14_v2Parser.Throw)
            self.state = 2412
            self.match(CPP14_v2Parser.LeftParen)
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (CPP14_v2Parser.Auto - 12)) | (1 << (CPP14_v2Parser.Bool - 12)) | (1 << (CPP14_v2Parser.Char - 12)) | (1 << (CPP14_v2Parser.Char16 - 12)) | (1 << (CPP14_v2Parser.Char32 - 12)) | (1 << (CPP14_v2Parser.Class - 12)) | (1 << (CPP14_v2Parser.Const - 12)) | (1 << (CPP14_v2Parser.Decltype - 12)) | (1 << (CPP14_v2Parser.Double - 12)) | (1 << (CPP14_v2Parser.Enum - 12)) | (1 << (CPP14_v2Parser.Float - 12)) | (1 << (CPP14_v2Parser.Int - 12)) | (1 << (CPP14_v2Parser.Long - 12)) | (1 << (CPP14_v2Parser.Short - 12)) | (1 << (CPP14_v2Parser.Signed - 12)) | (1 << (CPP14_v2Parser.Struct - 12)) | (1 << (CPP14_v2Parser.Typename_ - 12)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CPP14_v2Parser.Union - 76)) | (1 << (CPP14_v2Parser.Unsigned - 76)) | (1 << (CPP14_v2Parser.Void - 76)) | (1 << (CPP14_v2Parser.Volatile - 76)) | (1 << (CPP14_v2Parser.Wchar - 76)) | (1 << (CPP14_v2Parser.Doublecolon - 76)) | (1 << (CPP14_v2Parser.Identifier - 76)))) != 0):
                self.state = 2413
                self.typeidlist(0)


            self.state = 2416
            self.match(CPP14_v2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_typeidlist

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Typeidlist2Context(TypeidlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeidlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14_v2Parser.TypeidlistContext,0)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)
        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist2" ):
                listener.enterTypeidlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist2" ):
                listener.exitTypeidlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist2" ):
                return visitor.visitTypeidlist2(self)
            else:
                return visitor.visitChildren(self)


    class Typeidlist1Context(TypeidlistContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TypeidlistContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ThetypeidContext,0)

        def Ellipsis(self):
            return self.getToken(CPP14_v2Parser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist1" ):
                listener.enterTypeidlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist1" ):
                listener.exitTypeidlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist1" ):
                return visitor.visitTypeidlist1(self)
            else:
                return visitor.visitChildren(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14_v2Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = CPP14_v2Parser.Typeidlist1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2419
            self.thetypeid()
            self.state = 2421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2420
                self.match(CPP14_v2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14_v2Parser.Typeidlist2Context(self, CPP14_v2Parser.TypeidlistContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2423
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2424
                    self.match(CPP14_v2Parser.Comma)
                    self.state = 2425
                    self.thetypeid()
                    self.state = 2427
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                    if la_ == 1:
                        self.state = 2426
                        self.match(CPP14_v2Parser.Ellipsis)

             
                self.state = 2433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NoexceptspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_noexceptspecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Noexceptspecification1Context(NoexceptspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoexceptspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Noexcept(self):
            return self.getToken(CPP14_v2Parser.Noexcept, 0)
        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def constantexpression(self):
            return self.getTypedRuleContext(CPP14_v2Parser.ConstantexpressionContext,0)

        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification1" ):
                listener.enterNoexceptspecification1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification1" ):
                listener.exitNoexceptspecification1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification1" ):
                return visitor.visitNoexceptspecification1(self)
            else:
                return visitor.visitChildren(self)


    class Noexceptspecification2Context(NoexceptspecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.NoexceptspecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Noexcept(self):
            return self.getToken(CPP14_v2Parser.Noexcept, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification2" ):
                listener.enterNoexceptspecification2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification2" ):
                listener.exitNoexceptspecification2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification2" ):
                return visitor.visitNoexceptspecification2(self)
            else:
                return visitor.visitChildren(self)



    def noexceptspecification(self):

        localctx = CPP14_v2Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_noexceptspecification)
        try:
            self.state = 2440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Noexceptspecification1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2434
                self.match(CPP14_v2Parser.Noexcept)
                self.state = 2435
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 2436
                self.constantexpression()
                self.state = 2437
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Noexceptspecification2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2439
                self.match(CPP14_v2Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_theoperator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Theoperator1Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator1" ):
                listener.enterTheoperator1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator1" ):
                listener.exitTheoperator1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator1" ):
                return visitor.visitTheoperator1(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator2Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator2" ):
                listener.enterTheoperator2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator2" ):
                listener.exitTheoperator2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator2" ):
                return visitor.visitTheoperator2(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator3Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(CPP14_v2Parser.New, 0)
        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator3" ):
                listener.enterTheoperator3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator3" ):
                listener.exitTheoperator3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator3" ):
                return visitor.visitTheoperator3(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator4Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(CPP14_v2Parser.Delete, 0)
        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator4" ):
                listener.enterTheoperator4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator4" ):
                listener.exitTheoperator4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator4" ):
                return visitor.visitTheoperator4(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator24Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XorAssign(self):
            return self.getToken(CPP14_v2Parser.XorAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator24" ):
                listener.enterTheoperator24(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator24" ):
                listener.exitTheoperator24(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator24" ):
                return visitor.visitTheoperator24(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator23Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ModAssign(self):
            return self.getToken(CPP14_v2Parser.ModAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator23" ):
                listener.enterTheoperator23(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator23" ):
                listener.exitTheoperator23(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator23" ):
                return visitor.visitTheoperator23(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator45Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftBracket(self):
            return self.getToken(CPP14_v2Parser.LeftBracket, 0)
        def RightBracket(self):
            return self.getToken(CPP14_v2Parser.RightBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator45" ):
                listener.enterTheoperator45(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator45" ):
                listener.exitTheoperator45(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator45" ):
                return visitor.visitTheoperator45(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator22Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DivAssign(self):
            return self.getToken(CPP14_v2Parser.DivAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator22" ):
                listener.enterTheoperator22(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator22" ):
                listener.exitTheoperator22(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator22" ):
                return visitor.visitTheoperator22(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator44Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftParen(self):
            return self.getToken(CPP14_v2Parser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(CPP14_v2Parser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator44" ):
                listener.enterTheoperator44(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator44" ):
                listener.exitTheoperator44(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator44" ):
                return visitor.visitTheoperator44(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator21Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StarAssign(self):
            return self.getToken(CPP14_v2Parser.StarAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator21" ):
                listener.enterTheoperator21(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator21" ):
                listener.exitTheoperator21(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator21" ):
                return visitor.visitTheoperator21(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator43Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(CPP14_v2Parser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator43" ):
                listener.enterTheoperator43(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator43" ):
                listener.exitTheoperator43(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator43" ):
                return visitor.visitTheoperator43(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator20Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusAssign(self):
            return self.getToken(CPP14_v2Parser.MinusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator20" ):
                listener.enterTheoperator20(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator20" ):
                listener.exitTheoperator20(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator20" ):
                return visitor.visitTheoperator20(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator42Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ArrowStar(self):
            return self.getToken(CPP14_v2Parser.ArrowStar, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator42" ):
                listener.enterTheoperator42(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator42" ):
                listener.exitTheoperator42(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator42" ):
                return visitor.visitTheoperator42(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator41Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Comma(self):
            return self.getToken(CPP14_v2Parser.Comma, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator41" ):
                listener.enterTheoperator41(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator41" ):
                listener.exitTheoperator41(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator41" ):
                return visitor.visitTheoperator41(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator40Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(CPP14_v2Parser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator40" ):
                listener.enterTheoperator40(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator40" ):
                listener.exitTheoperator40(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator40" ):
                return visitor.visitTheoperator40(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator29Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShiftAssign(self):
            return self.getToken(CPP14_v2Parser.RightShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator29" ):
                listener.enterTheoperator29(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator29" ):
                listener.exitTheoperator29(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator29" ):
                return visitor.visitTheoperator29(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator28Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RightShift(self):
            return self.getToken(CPP14_v2Parser.RightShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator28" ):
                listener.enterTheoperator28(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator28" ):
                listener.exitTheoperator28(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator28" ):
                return visitor.visitTheoperator28(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator27Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShift(self):
            return self.getToken(CPP14_v2Parser.LeftShift, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator27" ):
                listener.enterTheoperator27(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator27" ):
                listener.exitTheoperator27(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator27" ):
                return visitor.visitTheoperator27(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator26Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OrAssign(self):
            return self.getToken(CPP14_v2Parser.OrAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator26" ):
                listener.enterTheoperator26(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator26" ):
                listener.exitTheoperator26(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator26" ):
                return visitor.visitTheoperator26(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator25Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AndAssign(self):
            return self.getToken(CPP14_v2Parser.AndAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator25" ):
                listener.enterTheoperator25(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator25" ):
                listener.exitTheoperator25(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator25" ):
                return visitor.visitTheoperator25(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator13Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Tilde(self):
            return self.getToken(CPP14_v2Parser.Tilde, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator13" ):
                listener.enterTheoperator13(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator13" ):
                listener.exitTheoperator13(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator13" ):
                return visitor.visitTheoperator13(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator35Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator35" ):
                listener.enterTheoperator35(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator35" ):
                listener.exitTheoperator35(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator35" ):
                return visitor.visitTheoperator35(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator12Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Or(self):
            return self.getToken(CPP14_v2Parser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator12" ):
                listener.enterTheoperator12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator12" ):
                listener.exitTheoperator12(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator12" ):
                return visitor.visitTheoperator12(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator34Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GreaterEqual(self):
            return self.getToken(CPP14_v2Parser.GreaterEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator34" ):
                listener.enterTheoperator34(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator34" ):
                listener.exitTheoperator34(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator34" ):
                return visitor.visitTheoperator34(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator11Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def And(self):
            return self.getToken(CPP14_v2Parser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator11" ):
                listener.enterTheoperator11(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator11" ):
                listener.exitTheoperator11(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator11" ):
                return visitor.visitTheoperator11(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator33Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LessEqual(self):
            return self.getToken(CPP14_v2Parser.LessEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator33" ):
                listener.enterTheoperator33(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator33" ):
                listener.exitTheoperator33(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator33" ):
                return visitor.visitTheoperator33(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator10Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Caret(self):
            return self.getToken(CPP14_v2Parser.Caret, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator10" ):
                listener.enterTheoperator10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator10" ):
                listener.exitTheoperator10(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator10" ):
                return visitor.visitTheoperator10(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator32Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NotEqual(self):
            return self.getToken(CPP14_v2Parser.NotEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator32" ):
                listener.enterTheoperator32(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator32" ):
                listener.exitTheoperator32(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator32" ):
                return visitor.visitTheoperator32(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator31Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Equal(self):
            return self.getToken(CPP14_v2Parser.Equal, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator31" ):
                listener.enterTheoperator31(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator31" ):
                listener.exitTheoperator31(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator31" ):
                return visitor.visitTheoperator31(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator30Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LeftShiftAssign(self):
            return self.getToken(CPP14_v2Parser.LeftShiftAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator30" ):
                listener.enterTheoperator30(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator30" ):
                listener.exitTheoperator30(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator30" ):
                return visitor.visitTheoperator30(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator9Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Mod(self):
            return self.getToken(CPP14_v2Parser.Mod, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator9" ):
                listener.enterTheoperator9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator9" ):
                listener.exitTheoperator9(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator9" ):
                return visitor.visitTheoperator9(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator19Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusAssign(self):
            return self.getToken(CPP14_v2Parser.PlusAssign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator19" ):
                listener.enterTheoperator19(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator19" ):
                listener.exitTheoperator19(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator19" ):
                return visitor.visitTheoperator19(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator18Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Greater(self):
            return self.getToken(CPP14_v2Parser.Greater, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator18" ):
                listener.enterTheoperator18(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator18" ):
                listener.exitTheoperator18(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator18" ):
                return visitor.visitTheoperator18(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator5Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(CPP14_v2Parser.Plus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator5" ):
                listener.enterTheoperator5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator5" ):
                listener.exitTheoperator5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator5" ):
                return visitor.visitTheoperator5(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator17Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Less(self):
            return self.getToken(CPP14_v2Parser.Less, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator17" ):
                listener.enterTheoperator17(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator17" ):
                listener.exitTheoperator17(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator17" ):
                return visitor.visitTheoperator17(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator39Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(CPP14_v2Parser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator39" ):
                listener.enterTheoperator39(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator39" ):
                listener.exitTheoperator39(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator39" ):
                return visitor.visitTheoperator39(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator6Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(CPP14_v2Parser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator6" ):
                listener.enterTheoperator6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator6" ):
                listener.exitTheoperator6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator6" ):
                return visitor.visitTheoperator6(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator16Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Assign(self):
            return self.getToken(CPP14_v2Parser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator16" ):
                listener.enterTheoperator16(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator16" ):
                listener.exitTheoperator16(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator16" ):
                return visitor.visitTheoperator16(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator38Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator38" ):
                listener.enterTheoperator38(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator38" ):
                listener.exitTheoperator38(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator38" ):
                return visitor.visitTheoperator38(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator7Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Star(self):
            return self.getToken(CPP14_v2Parser.Star, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator7" ):
                listener.enterTheoperator7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator7" ):
                listener.exitTheoperator7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator7" ):
                return visitor.visitTheoperator7(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator15Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator15" ):
                listener.enterTheoperator15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator15" ):
                listener.exitTheoperator15(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator15" ):
                return visitor.visitTheoperator15(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator37Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator37" ):
                listener.enterTheoperator37(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator37" ):
                listener.exitTheoperator37(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator37" ):
                return visitor.visitTheoperator37(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator8Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Div(self):
            return self.getToken(CPP14_v2Parser.Div, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator8" ):
                listener.enterTheoperator8(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator8" ):
                listener.exitTheoperator8(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator8" ):
                return visitor.visitTheoperator8(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator14Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator14" ):
                listener.enterTheoperator14(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator14" ):
                listener.exitTheoperator14(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator14" ):
                return visitor.visitTheoperator14(self)
            else:
                return visitor.visitChildren(self)


    class Theoperator36Context(TheoperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.TheoperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator36" ):
                listener.enterTheoperator36(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator36" ):
                listener.exitTheoperator36(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator36" ):
                return visitor.visitTheoperator36(self)
            else:
                return visitor.visitChildren(self)



    def theoperator(self):

        localctx = CPP14_v2Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_theoperator)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                localctx = CPP14_v2Parser.Theoperator1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2442
                self.match(CPP14_v2Parser.New)
                pass

            elif la_ == 2:
                localctx = CPP14_v2Parser.Theoperator2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2443
                self.match(CPP14_v2Parser.Delete)
                pass

            elif la_ == 3:
                localctx = CPP14_v2Parser.Theoperator3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2444
                self.match(CPP14_v2Parser.New)
                self.state = 2445
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 2446
                self.match(CPP14_v2Parser.RightBracket)
                pass

            elif la_ == 4:
                localctx = CPP14_v2Parser.Theoperator4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2447
                self.match(CPP14_v2Parser.Delete)
                self.state = 2448
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 2449
                self.match(CPP14_v2Parser.RightBracket)
                pass

            elif la_ == 5:
                localctx = CPP14_v2Parser.Theoperator5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2450
                self.match(CPP14_v2Parser.Plus)
                pass

            elif la_ == 6:
                localctx = CPP14_v2Parser.Theoperator6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2451
                self.match(CPP14_v2Parser.Minus)
                pass

            elif la_ == 7:
                localctx = CPP14_v2Parser.Theoperator7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2452
                self.match(CPP14_v2Parser.Star)
                pass

            elif la_ == 8:
                localctx = CPP14_v2Parser.Theoperator8Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2453
                self.match(CPP14_v2Parser.Div)
                pass

            elif la_ == 9:
                localctx = CPP14_v2Parser.Theoperator9Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2454
                self.match(CPP14_v2Parser.Mod)
                pass

            elif la_ == 10:
                localctx = CPP14_v2Parser.Theoperator10Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2455
                self.match(CPP14_v2Parser.Caret)
                pass

            elif la_ == 11:
                localctx = CPP14_v2Parser.Theoperator11Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2456
                self.match(CPP14_v2Parser.And)
                pass

            elif la_ == 12:
                localctx = CPP14_v2Parser.Theoperator12Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2457
                self.match(CPP14_v2Parser.Or)
                pass

            elif la_ == 13:
                localctx = CPP14_v2Parser.Theoperator13Context(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2458
                self.match(CPP14_v2Parser.Tilde)
                pass

            elif la_ == 14:
                localctx = CPP14_v2Parser.Theoperator14Context(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2459
                self.match(CPP14_v2Parser.T__0)
                pass

            elif la_ == 15:
                localctx = CPP14_v2Parser.Theoperator15Context(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2460
                self.match(CPP14_v2Parser.T__1)
                pass

            elif la_ == 16:
                localctx = CPP14_v2Parser.Theoperator16Context(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2461
                self.match(CPP14_v2Parser.Assign)
                pass

            elif la_ == 17:
                localctx = CPP14_v2Parser.Theoperator17Context(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2462
                self.match(CPP14_v2Parser.Less)
                pass

            elif la_ == 18:
                localctx = CPP14_v2Parser.Theoperator18Context(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2463
                self.match(CPP14_v2Parser.Greater)
                pass

            elif la_ == 19:
                localctx = CPP14_v2Parser.Theoperator19Context(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2464
                self.match(CPP14_v2Parser.PlusAssign)
                pass

            elif la_ == 20:
                localctx = CPP14_v2Parser.Theoperator20Context(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2465
                self.match(CPP14_v2Parser.MinusAssign)
                pass

            elif la_ == 21:
                localctx = CPP14_v2Parser.Theoperator21Context(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2466
                self.match(CPP14_v2Parser.StarAssign)
                pass

            elif la_ == 22:
                localctx = CPP14_v2Parser.Theoperator22Context(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2467
                self.match(CPP14_v2Parser.DivAssign)
                pass

            elif la_ == 23:
                localctx = CPP14_v2Parser.Theoperator23Context(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2468
                self.match(CPP14_v2Parser.ModAssign)
                pass

            elif la_ == 24:
                localctx = CPP14_v2Parser.Theoperator24Context(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2469
                self.match(CPP14_v2Parser.XorAssign)
                pass

            elif la_ == 25:
                localctx = CPP14_v2Parser.Theoperator25Context(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2470
                self.match(CPP14_v2Parser.AndAssign)
                pass

            elif la_ == 26:
                localctx = CPP14_v2Parser.Theoperator26Context(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2471
                self.match(CPP14_v2Parser.OrAssign)
                pass

            elif la_ == 27:
                localctx = CPP14_v2Parser.Theoperator27Context(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2472
                self.match(CPP14_v2Parser.LeftShift)
                pass

            elif la_ == 28:
                localctx = CPP14_v2Parser.Theoperator28Context(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2473
                self.match(CPP14_v2Parser.RightShift)
                pass

            elif la_ == 29:
                localctx = CPP14_v2Parser.Theoperator29Context(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2474
                self.match(CPP14_v2Parser.RightShiftAssign)
                pass

            elif la_ == 30:
                localctx = CPP14_v2Parser.Theoperator30Context(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2475
                self.match(CPP14_v2Parser.LeftShiftAssign)
                pass

            elif la_ == 31:
                localctx = CPP14_v2Parser.Theoperator31Context(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2476
                self.match(CPP14_v2Parser.Equal)
                pass

            elif la_ == 32:
                localctx = CPP14_v2Parser.Theoperator32Context(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2477
                self.match(CPP14_v2Parser.NotEqual)
                pass

            elif la_ == 33:
                localctx = CPP14_v2Parser.Theoperator33Context(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2478
                self.match(CPP14_v2Parser.LessEqual)
                pass

            elif la_ == 34:
                localctx = CPP14_v2Parser.Theoperator34Context(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2479
                self.match(CPP14_v2Parser.GreaterEqual)
                pass

            elif la_ == 35:
                localctx = CPP14_v2Parser.Theoperator35Context(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2480
                self.match(CPP14_v2Parser.T__2)
                pass

            elif la_ == 36:
                localctx = CPP14_v2Parser.Theoperator36Context(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2481
                self.match(CPP14_v2Parser.T__3)
                pass

            elif la_ == 37:
                localctx = CPP14_v2Parser.Theoperator37Context(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2482
                self.match(CPP14_v2Parser.T__4)
                pass

            elif la_ == 38:
                localctx = CPP14_v2Parser.Theoperator38Context(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2483
                self.match(CPP14_v2Parser.T__5)
                pass

            elif la_ == 39:
                localctx = CPP14_v2Parser.Theoperator39Context(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2484
                self.match(CPP14_v2Parser.PlusPlus)
                pass

            elif la_ == 40:
                localctx = CPP14_v2Parser.Theoperator40Context(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2485
                self.match(CPP14_v2Parser.MinusMinus)
                pass

            elif la_ == 41:
                localctx = CPP14_v2Parser.Theoperator41Context(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2486
                self.match(CPP14_v2Parser.Comma)
                pass

            elif la_ == 42:
                localctx = CPP14_v2Parser.Theoperator42Context(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2487
                self.match(CPP14_v2Parser.ArrowStar)
                pass

            elif la_ == 43:
                localctx = CPP14_v2Parser.Theoperator43Context(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2488
                self.match(CPP14_v2Parser.Arrow)
                pass

            elif la_ == 44:
                localctx = CPP14_v2Parser.Theoperator44Context(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2489
                self.match(CPP14_v2Parser.LeftParen)
                self.state = 2490
                self.match(CPP14_v2Parser.RightParen)
                pass

            elif la_ == 45:
                localctx = CPP14_v2Parser.Theoperator45Context(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 2491
                self.match(CPP14_v2Parser.LeftBracket)
                self.state = 2492
                self.match(CPP14_v2Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Literal2Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Characterliteral(self):
            return self.getToken(CPP14_v2Parser.Characterliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral2" ):
                listener.enterLiteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral2" ):
                listener.exitLiteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral2" ):
                return visitor.visitLiteral2(self)
            else:
                return visitor.visitChildren(self)


    class Literal1Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Integerliteral(self):
            return self.getToken(CPP14_v2Parser.Integerliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral1" ):
                listener.enterLiteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral1" ):
                listener.exitLiteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral1" ):
                return visitor.visitLiteral1(self)
            else:
                return visitor.visitChildren(self)


    class Literal6Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14_v2Parser.PointerliteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral6" ):
                listener.enterLiteral6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral6" ):
                listener.exitLiteral6(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral6" ):
                return visitor.visitLiteral6(self)
            else:
                return visitor.visitChildren(self)


    class Literal5Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14_v2Parser.BooleanliteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral5" ):
                listener.enterLiteral5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral5" ):
                listener.exitLiteral5(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral5" ):
                return visitor.visitLiteral5(self)
            else:
                return visitor.visitChildren(self)


    class Literal4Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Stringliteral(self):
            return self.getToken(CPP14_v2Parser.Stringliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral4" ):
                listener.enterLiteral4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral4" ):
                listener.exitLiteral4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral4" ):
                return visitor.visitLiteral4(self)
            else:
                return visitor.visitChildren(self)


    class Literal3Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Floatingliteral(self):
            return self.getToken(CPP14_v2Parser.Floatingliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral3" ):
                listener.enterLiteral3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral3" ):
                listener.exitLiteral3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral3" ):
                return visitor.visitLiteral3(self)
            else:
                return visitor.visitChildren(self)


    class Literal7Context(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14_v2Parser.UserdefinedliteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral7" ):
                listener.enterLiteral7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral7" ):
                listener.exitLiteral7(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral7" ):
                return visitor.visitLiteral7(self)
            else:
                return visitor.visitChildren(self)



    def literal(self):

        localctx = CPP14_v2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_literal)
        try:
            self.state = 2502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Integerliteral]:
                localctx = CPP14_v2Parser.Literal1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2495
                self.match(CPP14_v2Parser.Integerliteral)
                pass
            elif token in [CPP14_v2Parser.Characterliteral]:
                localctx = CPP14_v2Parser.Literal2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2496
                self.match(CPP14_v2Parser.Characterliteral)
                pass
            elif token in [CPP14_v2Parser.Floatingliteral]:
                localctx = CPP14_v2Parser.Literal3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2497
                self.match(CPP14_v2Parser.Floatingliteral)
                pass
            elif token in [CPP14_v2Parser.Stringliteral]:
                localctx = CPP14_v2Parser.Literal4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2498
                self.match(CPP14_v2Parser.Stringliteral)
                pass
            elif token in [CPP14_v2Parser.False1, CPP14_v2Parser.True1]:
                localctx = CPP14_v2Parser.Literal5Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2499
                self.booleanliteral()
                pass
            elif token in [CPP14_v2Parser.Nullptr]:
                localctx = CPP14_v2Parser.Literal6Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2500
                self.pointerliteral()
                pass
            elif token in [CPP14_v2Parser.Userdefinedintegerliteral, CPP14_v2Parser.Userdefinedfloatingliteral, CPP14_v2Parser.Userdefinedstringliteral, CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Literal7Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2501
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_booleanliteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Booleanliteral1Context(BooleanliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BooleanliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def False1(self):
            return self.getToken(CPP14_v2Parser.False1, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral1" ):
                listener.enterBooleanliteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral1" ):
                listener.exitBooleanliteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral1" ):
                return visitor.visitBooleanliteral1(self)
            else:
                return visitor.visitChildren(self)


    class Booleanliteral2Context(BooleanliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.BooleanliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def True1(self):
            return self.getToken(CPP14_v2Parser.True1, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral2" ):
                listener.enterBooleanliteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral2" ):
                listener.exitBooleanliteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral2" ):
                return visitor.visitBooleanliteral2(self)
            else:
                return visitor.visitChildren(self)



    def booleanliteral(self):

        localctx = CPP14_v2Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_booleanliteral)
        try:
            self.state = 2506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.False1]:
                localctx = CPP14_v2Parser.Booleanliteral1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2504
                self.match(CPP14_v2Parser.False1)
                pass
            elif token in [CPP14_v2Parser.True1]:
                localctx = CPP14_v2Parser.Booleanliteral2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2505
                self.match(CPP14_v2Parser.True1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14_v2Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerliteral" ):
                return visitor.visitPointerliteral(self)
            else:
                return visitor.visitChildren(self)




    def pointerliteral(self):

        localctx = CPP14_v2Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(CPP14_v2Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserdefinedliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CPP14_v2Parser.RULE_userdefinedliteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Userdefinedliteral2Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedfloatingliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral2" ):
                listener.enterUserdefinedliteral2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral2" ):
                listener.exitUserdefinedliteral2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral2" ):
                return visitor.visitUserdefinedliteral2(self)
            else:
                return visitor.visitChildren(self)


    class Userdefinedliteral1Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedintegerliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral1" ):
                listener.enterUserdefinedliteral1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral1" ):
                listener.exitUserdefinedliteral1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral1" ):
                return visitor.visitUserdefinedliteral1(self)
            else:
                return visitor.visitChildren(self)


    class Userdefinedliteral4Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedcharacterliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral4" ):
                listener.enterUserdefinedliteral4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral4" ):
                listener.exitUserdefinedliteral4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral4" ):
                return visitor.visitUserdefinedliteral4(self)
            else:
                return visitor.visitChildren(self)


    class Userdefinedliteral3Context(UserdefinedliteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CPP14_v2Parser.UserdefinedliteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14_v2Parser.Userdefinedstringliteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral3" ):
                listener.enterUserdefinedliteral3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral3" ):
                listener.exitUserdefinedliteral3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral3" ):
                return visitor.visitUserdefinedliteral3(self)
            else:
                return visitor.visitChildren(self)



    def userdefinedliteral(self):

        localctx = CPP14_v2Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_userdefinedliteral)
        try:
            self.state = 2514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14_v2Parser.Userdefinedintegerliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2510
                self.match(CPP14_v2Parser.Userdefinedintegerliteral)
                pass
            elif token in [CPP14_v2Parser.Userdefinedfloatingliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2511
                self.match(CPP14_v2Parser.Userdefinedfloatingliteral)
                pass
            elif token in [CPP14_v2Parser.Userdefinedstringliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral3Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2512
                self.match(CPP14_v2Parser.Userdefinedstringliteral)
                pass
            elif token in [CPP14_v2Parser.Userdefinedcharacterliteral]:
                localctx = CPP14_v2Parser.Userdefinedliteral4Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2513
                self.match(CPP14_v2Parser.Userdefinedcharacterliteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[26] = self.noptrnewdeclarator_sempred
        self._predicates[31] = self.pmexpression_sempred
        self._predicates[32] = self.multiplicativeexpression_sempred
        self._predicates[33] = self.additiveexpression_sempred
        self._predicates[34] = self.shiftexpression_sempred
        self._predicates[36] = self.relationalexpression_sempred
        self._predicates[37] = self.equalityexpression_sempred
        self._predicates[38] = self.andexpression_sempred
        self._predicates[39] = self.exclusiveorexpression_sempred
        self._predicates[40] = self.inclusiveorexpression_sempred
        self._predicates[41] = self.logicalandexpression_sempred
        self._predicates[42] = self.logicalorexpression_sempred
        self._predicates[46] = self.expression_sempred
        self._predicates[52] = self.statementseq_sempred
        self._predicates[61] = self.declarationseq_sempred
        self._predicates[88] = self.enumeratorlist_sempred
        self._predicates[106] = self.attributespecifierseq_sempred
        self._predicates[109] = self.attributelist_sempred
        self._predicates[115] = self.balancedtokenseq_sempred
        self._predicates[117] = self.initdeclaratorlist_sempred
        self._predicates[121] = self.noptrdeclarator_sempred
        self._predicates[132] = self.noptrabstractdeclarator_sempred
        self._predicates[134] = self.noptrabstractpackdeclarator_sempred
        self._predicates[136] = self.parameterdeclarationlist_sempred
        self._predicates[143] = self.initializerlist_sempred
        self._predicates[153] = self.memberdeclaratorlist_sempred
        self._predicates[155] = self.virtspecifierseq_sempred
        self._predicates[159] = self.basespecifierlist_sempred
        self._predicates[174] = self.templateparameterlist_sempred
        self._predicates[180] = self.templateargumentlist_sempred
        self._predicates[193] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 43:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 45:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         




